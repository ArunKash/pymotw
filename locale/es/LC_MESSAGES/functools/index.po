#
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 13:35-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/functools/index.rst:3
msgid "functools -- Tools for Manipulating Functions"
msgstr ""

#: ../../PyMOTW/functools/index.rst:8
msgid "Functions that operate on other functions."
msgstr ""

#: ../../PyMOTW/functools/index.rst:9
msgid "2.5 and later"
msgstr ""

#: ../../PyMOTW/functools/index.rst:11
msgid ""
"The :mod:`functools` module provides tools for working with functions and "
"other callable objects, to adapt or extend them for new purposes without "
"completely rewriting them."
msgstr ""

#: ../../PyMOTW/functools/index.rst:16
msgid "Decorators"
msgstr ""

#: ../../PyMOTW/functools/index.rst:18
msgid ""
"The primary tool supplied by the :mod:`functools` module is the class "
":class:`partial`, which can be used to \"wrap\" a callable object with "
"default arguments. The resulting object is itself callable, and can be "
"treated as though it is the original function.  It takes all of the same "
"arguments as the original, and can be invoked with extra positional or named"
" arguments as well."
msgstr ""

#: ../../PyMOTW/functools/index.rst:26
msgid "partial"
msgstr ""

#: ../../PyMOTW/functools/index.rst:28
msgid ""
"This example shows two simple :class:`partial` objects for the function "
":func:`myfunc`.  Notice that :func:`show_details` prints the :attr:`func`, "
":attr:`args`, and :attr:`keywords` attributes of the partial object."
msgstr ""

#: ../../PyMOTW/functools/index.rst:37
msgid ""
"At the end of the example, the first :class:`partial` created is invoked "
"without passing a value for *a*, causing an exception."
msgstr ""

#: ../../PyMOTW/functools/index.rst:80
msgid "update_wrapper"
msgstr ""

#: ../../PyMOTW/functools/index.rst:82
msgid ""
"The partial object does not have :attr:`__name__` or :attr:`__doc__` "
"attributes by default, and without those attributes decorated functions are "
"more difficult to debug. Using :func:`update_wrapper`, copies or adds "
"attributes from the original function to the :class:`partial` object."
msgstr ""

#: ../../PyMOTW/functools/index.rst:92
msgid ""
"The attributes added to the wrapper are defined in "
":const:`functools.WRAPPER_ASSIGNMENTS`, while "
":const:`functools.WRAPPER_UPDATES` lists values to be modified."
msgstr ""

#: ../../PyMOTW/functools/index.rst:128
msgid "Other Callables"
msgstr ""

#: ../../PyMOTW/functools/index.rst:130
msgid "Partials work with any callable object, not just standalone functions."
msgstr ""

#: ../../PyMOTW/functools/index.rst:136
msgid ""
"This example creates partials from an instance, and methods of an instance."
msgstr ""

#: ../../PyMOTW/functools/index.rst:195
msgid "wraps"
msgstr ""

#: ../../PyMOTW/functools/index.rst:197
msgid ""
"Updating the properties of a wrapped callable is especially useful when used"
" in a decorator, since the transformed function ends up with properties of "
"the original, \"bare\", function."
msgstr ""

#: ../../PyMOTW/functools/index.rst:205
msgid ""
":mod:`functools` provides a decorator, :func:`wraps`, which applies "
":func:`update_wrapper` to the decorated function."
msgstr ""

#: ../../PyMOTW/functools/index.rst:247
msgid "Comparison"
msgstr ""

#: ../../PyMOTW/functools/index.rst:249
msgid ""
"Under Python 2, classes can define a :func:`__cmp__` method that returns "
"``-1``, ``0``, or ``1`` based on whether the object is less than, equal to, "
"or greater than the item being compared.  Python 2.1 introduces the *rich "
"comparison* methods API, :func:`__lt__`, :func:`__le__`, :func:`__eq__`, "
":func:`__ne__`, :func:`__gt__`, and :func:`__ge__`, which perform a single "
"comparison operation and return a boolean value.  Python 3 deprecated "
":func:`__cmp__` in favor of these new methods, so :mod:`functools` provides "
"tools to make it easier to write Python 2 classes that comply with the new "
"comparison requirements in Python 3."
msgstr ""

#: ../../PyMOTW/functools/index.rst:261
msgid "Rich Comparison"
msgstr ""

#: ../../PyMOTW/functools/index.rst:263
msgid ""
"The rich comparison API is designed to allow classes with complex "
"comparisons to implement each test in the most efficient way possible. "
"However, for classes where comparison is relatively simple, there is no "
"point in manually creating each of the rich comparison methods. The "
":func:`total_ordering` class decorator takes a class that provides some of "
"the methods, and adds the rest of them."
msgstr ""

#: ../../PyMOTW/functools/index.rst:274
msgid ""
"The class must provide an implmentation of :func:`__eq__` and any one of the"
" other rich comparison methods.  The decorator adds implementations of the "
"other methods that work by using the comparisons provided."
msgstr ""

#: ../../PyMOTW/functools/index.rst:323
msgid "Collation Order"
msgstr ""

#: ../../PyMOTW/functools/index.rst:325
msgid ""
"Since old-style comparison functions are deprecated in Python 3, the "
":data:`cmp` argument to functions like :func:`sort` are also no longer "
"supported.  Python 2 programs that use comparison functions can use "
":func:`cmp_to_key` to convert them to a function that returns a *collation "
"key*, which is used to determine the position in the final sequence."
msgstr ""

#: ../../PyMOTW/functools/index.rst:338
msgid ""
"Normally :func:`cmp_to_key` would be used directly, but in this example an "
"extra wrapper function is introduced to print out more information as the "
"key function is being called."
msgstr ""

#: ../../PyMOTW/functools/index.rst:342
msgid ""
"The output shows that :func:`sorted` starts by calling "
":func:`get_key_wrapper` for each item in the sequence to produce a key.  The"
" keys returned by :func:`cmp_to_key` are instances of a class defined in "
":mod:`functools` that implements the rich comparison API based on the return"
" value of the provided old-style comparison function.  After all of the keys"
" are created, the sequence is sorted by comparing the keys."
msgstr ""

#: ../../PyMOTW/functools/index.rst:380
msgid "`functools <http://docs.python.org/library/functools.html>`_"
msgstr ""

#: ../../PyMOTW/functools/index.rst:380
msgid "The standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/functools/index.rst:382
msgid ""
"`Rich comparison methods "
"<http://docs.python.org/reference/datamodel.html#object.__lt__>`__"
msgstr ""

#: ../../PyMOTW/functools/index.rst:383
msgid ""
"Description of the rich comparison methods from the Python Reference Guide."
msgstr ""
