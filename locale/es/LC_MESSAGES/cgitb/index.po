#
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 13:35-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/cgitb/index.rst:3
msgid "cgitb -- Detailed traceback reports"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:8
msgid ""
"cgitb provides more detailed traceback information than :mod:`traceback`."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:9
msgid "2.2 and later"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:11
msgid ""
":mod:`cgitb` was originally designed for showing errors and debugging "
"information in web applications.  It was later updated to include plain-text"
" output as well, but unfortunately wasn't renamed.  This has led to "
"obscurity and the module is not used as often as it should be. Nonetheless, "
":mod:`cgitb` is a valuable debugging tool in the standard library."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:19
msgid "Standard Traceback Dumps"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:21
msgid ""
"Python's default exception handling behavior is to print a *traceback* to "
"standard error with the call stack leading up to the error position.  This "
"basic output frequently contains enough information to understand the cause "
"of the exception and permit a fix."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:30
msgid "The above sample program has a subtle error in :func:`func3()`."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:52
msgid "Enabling Detailed Tracebacks"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:54
msgid ""
"While the basic traceback includes enough information for us to spot the "
"error, enabling cgitb replaces ``sys.excepthook`` with a function that gives"
" extended tracebacks with even more detail."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:62
msgid ""
"As you can see below, the error report is much more extensive.  Each frame "
"of the stack is listed, along with:"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:65
msgid "the full path to the source file, instead of just the base name"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:66
msgid "the values of the arguments to each function in the stack"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:67
msgid "a few lines of source context from around the line in the error path"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:68
msgid "the values of variables in the expression causing the error"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:161
msgid ""
"The end of the output also includes the full details of the exception object"
" (in case it has attributes other than ``message`` that would be useful for "
"debugging) and the original form of a traceback dump."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:166
msgid "Local Variables in Tracebacks"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:168
msgid ""
"Having access to the variables involved in the error stack can help find a "
"logical error that occurs somewhere higher in the stack than the line where "
"the actual exception is generated."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:176
msgid ""
"In the case of this code with a :ref:`ZeroDivisionError <exceptions-"
"ZeroDivisionError>`, we can see that the problem is introduced in the "
"computation of the value of ``c`` in ``func1()``, rather than where the "
"value is used in ``func2()``."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:262
msgid ""
"The code in :mod:`cgitb` that examines the variables used in the stack frame"
" leading to the error is smart enough to evaluate object attributes to "
"display them, too."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:270
msgid ""
"Here we see that ``self.a`` and ``self.b`` are involved in the error-prone "
"code."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:363
msgid "Adding More Context"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:365
msgid ""
"Suppose your function includes a lot of inline comments, whitespace, or "
"other code that makes it very long.  Having the default of 5 lines of "
"context may not be enough help in that case, if the body of the function is "
"pushed out of the code window displayed.  Using a larger context value when "
"enabling cgitb gets around this."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:375
msgid ""
"You can pass *context* to :func:`enable()` to control the amount of code "
"displayed for each line of the traceback."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:459
msgid ""
"Increasing the value gets us enough of the function that we can spot the "
"problem in the code, again."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:560
msgid "Exception Properties"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:562
msgid ""
"In addition to the local variables from each stack frame, :mod:`cgitb` shows"
" all properties of the exception object.  If you have a custom exception "
"type with extra properties, they are printed as part of the error report."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:571
msgid ""
"In this example, the *bad_value* property is included along with the "
"standard *message* and *args* values."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:639
msgid "Logging Tracebacks"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:641
msgid ""
"For many situations, printing the traceback details to standard error is the"
" best resolution.  In a production system, however, logging the errors is "
"even better.  :func:`enable()` includes an optional argument, *logdir*, to "
"enable error logging.  When a directory name is provided, each exception is "
"logged to its own file in the given directory."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:652
msgid ""
"Even though the error display is suppressed, a message is printed describing"
" where to go to find the error log."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:739
msgid "HTML Output"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:741
msgid ""
"Because :mod:`cgitb` was originally developed for handling exceptions in web"
" apps, no discussion would be complete without an example of the HTML output"
" it produces."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:749
msgid ""
"By leaving out the *format* argument (or specifying ``html``), the traceback"
" format changes to HTML output."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:758
msgid "`cgitb <http://docs.python.org/library/cgitb.html>`_"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:758
msgid "The standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:761
msgid ":mod:`traceback`"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:761
msgid "Standard library module for working with tracebacks."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:765
msgid ":mod:`inspect`"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:764
msgid "The inspect module includes more functions for examining the stack."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:770
msgid ":mod:`sys`"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:768
msgid ""
"The sys module provides access to the current exception value and the "
"``excepthook`` handler invoked when an exception occurs."
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:773
msgid ""
"`Improved traceback module "
"<http://thread.gmane.org/gmane.comp.python.devel/110326>`_"
msgstr ""

#: ../../PyMOTW/cgitb/index.rst:773
msgid ""
"Python-dev discussion of improvements to the traceback module and related "
"enhancements other developers use locally."
msgstr ""
