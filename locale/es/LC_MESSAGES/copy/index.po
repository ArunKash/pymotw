#
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 13:35-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/copy/index.rst:3
msgid "copy -- Duplicate objects"
msgstr ""

#: ../../PyMOTW/copy/index.rst:8
msgid ""
"Provides functions for duplicating objects using shallow or deep copy "
"semantics."
msgstr ""

#: ../../PyMOTW/copy/index.rst:9
msgid "1.4"
msgstr ""

#: ../../PyMOTW/copy/index.rst:12
msgid ""
"The copy module includes 2 functions, copy() and deepcopy(), for duplicating"
" existing objects."
msgstr ""

#: ../../PyMOTW/copy/index.rst:16
msgid "Shallow Copies"
msgstr ""

#: ../../PyMOTW/copy/index.rst:18
msgid ""
"The shallow copy created by copy() is a new container populated with "
"references to the contents of the original object. For example, a new list "
"is constructed and the elements of the original list are appended to it."
msgstr ""

#: ../../PyMOTW/copy/index.rst:26
msgid ""
"For a shallow copy, the MyClass instance is not duplicated so the reference "
"in the dup list is to the same object that is in the l list."
msgstr ""

#: ../../PyMOTW/copy/index.rst:48
msgid "Deep Copies"
msgstr ""

#: ../../PyMOTW/copy/index.rst:50
msgid ""
"The deep copy created by deepcopy() is a new container populated with copies"
" of the contents of the original object. For example, a new list is "
"constructed and the elements of the original list are copied, then the "
"copies are appended to the new list."
msgstr ""

#: ../../PyMOTW/copy/index.rst:55
msgid ""
"By replacing the call to copy() with deepcopy(), the difference becomes "
"apparent."
msgstr ""

#: ../../PyMOTW/copy/index.rst:62
msgid ""
"Notice that the first element of the list is no longer the same object "
"reference, but the two objects still evaluate as being equal."
msgstr ""

#: ../../PyMOTW/copy/index.rst:84
msgid "Controlling Copy Behavior"
msgstr ""

#: ../../PyMOTW/copy/index.rst:86
msgid ""
"It is possible to control how copies are made using the __copy__ and "
"__deepcopy__ hooks."
msgstr ""

#: ../../PyMOTW/copy/index.rst:89
msgid ""
"__copy__() is called without any arguments and should return a shallow copy "
"of the object."
msgstr ""

#: ../../PyMOTW/copy/index.rst:92
msgid ""
"__deepcopy__() is called with a memo dictionary, and should return a deep "
"copy of the object. Any member attributes that need to be deep-copied should"
" be passed to copy.deepcopy(), along with the memo dictionary, to control "
"for recursion (see below)."
msgstr ""

#: ../../PyMOTW/copy/index.rst:97
msgid "This example illustrates how the methods are called:"
msgstr ""

#: ../../PyMOTW/copy/index.rst:118
msgid "Recursion in Deep Copy"
msgstr ""

#: ../../PyMOTW/copy/index.rst:120
msgid ""
"To avoid problems with duplicating recursive data structures, ``deepcopy()``"
" uses a dictionary to track objects that have already been copied. This "
"dictionary is passed to the ``__deepcopy__()`` method so it can be used "
"there as well."
msgstr ""

#: ../../PyMOTW/copy/index.rst:124
msgid ""
"This example shows how an interconnected data structure such as a Digraph "
"might assist with protecting against recursion by implementing a "
"``__deepcopy__()`` method. This particular example is just for illustration "
"purposes, since the default implementation of ``deepcopy()`` already handles"
" the recursion cases correctly."
msgstr ""

#: ../../PyMOTW/copy/index.rst:134
msgid ""
"First, some basic directed graph methods: A graph can be initialized with a "
"name and a list of existing nodes to which it is connected. The "
"addConnection() method is used to set up bi-directional connections. It is "
"also used by the deepcopy operator."
msgstr ""

#: ../../PyMOTW/copy/index.rst:139
msgid ""
"The ``__deepcopy__()`` method prints messages to show how it is called, and "
"manages the memo dictionary contents as needed. Instead of copying the "
"connection list wholesale, it creates a new list and appends copies of the "
"individual connections to it. That ensures that the memo dictionary is "
"updated as each new node is duplicated, and avoids recursion issues or extra"
" copies of nodes. As before, it returns the copied object when it is done."
msgstr ""

#: ../../PyMOTW/copy/index.rst:146
msgid ""
"Next we can set up a graph with a nodes *root*, *a*, and *b*. The graph "
"looks like:"
msgstr ""

#: ../../PyMOTW/copy/index.rst:158
msgid ""
"There are several cycles in the graph, but by handling the recursion with "
"the memo dictionary we can avoid having the traversal cause a stack overflow"
" error.  When the *root* node is copied, we see:"
msgstr ""

#: ../../PyMOTW/copy/index.rst:202
msgid ""
"The second time the *root* node is encountered, while the *a* node is being "
"copied, ``__deepcopy__`` detects the recursion and re-uses the existing "
"value from the memo dictionary instead of creating a new object."
msgstr ""

#: ../../PyMOTW/copy/index.rst:209
msgid "`copy <http://docs.python.org/library/copy.html>`_"
msgstr ""

#: ../../PyMOTW/copy/index.rst:210
msgid "The standard library documentation for this module."
msgstr ""
