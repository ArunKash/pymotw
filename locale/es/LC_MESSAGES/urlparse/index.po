#
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 13:35-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/urlparse/index.rst:3
msgid "urlparse -- Split URL into component pieces."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:8
msgid "Split URL into component pieces."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:9
msgid "since 1.4"
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:11
msgid ""
"The :mod:`urlparse` module provides functions for breaking URLs down into "
"their component parts, as defined by the relevant RFCs."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:15
msgid "Parsing"
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:17
msgid ""
"The return value from the :func:`urlparse()` function is an object which "
"acts like a tuple with 6 elements."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:24
msgid ""
"The parts of the URL available through the tuple interface are the scheme, "
"network location, path, parameters, query, and fragment."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:40
msgid ""
"Although the return value acts like a tuple, it is really based on a "
":ref:`namedtuple <collections-namedtuple>`, a subclass of tuple that "
"supports accessing the parts of the URL via named attributes instead of "
"indexes. That's especially useful if, like me, you can't remember the index "
"order. In addition to being easier to use for the programmer, the attribute "
"API also offers access to several values not available in the tuple API."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:52
msgid ""
"The *username* and *password* are available when present in the input URL "
"and ``None`` when not. The *hostname* is the same value as *netloc*, in all "
"lower case.  And the *port* is converted to an integer when present and "
"``None`` when not."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:78
msgid ""
"The :func:`urlsplit()` function is an alternative to :func:`urlparse()`. It "
"behaves a little different, because it does not split the parameters from "
"the URL. This is useful for URLs following :rfc:`2396`, which supports "
"parameters for each segment of the path."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:87
msgid ""
"Since the parameters are not split out, the tuple API will show 5 elements "
"instead of 6, and there is no *params* attribute."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:111
msgid ""
"To simply strip the fragment identifier from a URL, as you might need to do "
"to find a base page name from a URL, use :func:`urldefrag()`."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:118
msgid "The return value is a tuple containing the base URL and the fragment."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:135
msgid "Unparsing"
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:137
msgid ""
"There are several ways to assemble a split URL back together into a single "
"string. The parsed URL object has a :func:`geturl()` method."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:144
msgid ""
":func:`geturl()` only works on the object returned by :func:`urlparse()` or "
":func:`urlsplit()`."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:160
msgid ""
"If you have a regular tuple of values, you can use :func:`urlunparse()` to "
"combine them into a URL."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:167
msgid ""
"While the :class:`ParseResult` returned by :func:`urlparse()` can be used as"
" a tuple, in this example I explicitly create a new tuple to show that "
":func:`urlunparse()` works with normal tuples, too."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:186
msgid ""
"If the input URL included superfluous parts, those may be dropped from the "
"unparsed version of the URL."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:193
msgid ""
"In this case, the *parameters*, *query*, and *fragment* are all missing in "
"the original URL. The new URL does not look the same as the original, but is"
" equivalent according to the standard."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:213
msgid "Joining"
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:215
msgid ""
"In addition to parsing URLs, :mod:`urlparse` includes :func:`urljoin()` for "
"constructing absolute URLs from relative fragments."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:223
msgid ""
"In the example, the relative portion of the path (``\"../\"``) is taken into"
" account when the second URL is computed."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:242
msgid "`urlparse <http://docs.python.org/lib/module-urlparse.html>`_"
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:242
msgid "Standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:245
msgid ":mod:`urllib`"
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:245
msgid "Retrieve the contents of a resource identified by a URL."
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:247
msgid ":mod:`urllib2`"
msgstr ""

#: ../../PyMOTW/urlparse/index.rst:248
msgid "Alternative API for accessing remote URLs."
msgstr ""
