#
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 13:35-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/socket/addressing.rst:3
msgid "Addressing, Protocol Families and Socket Types"
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:5
msgid ""
"A *socket* is one endpoint of a communication channel used by programs to "
"pass data back and forth locally or across the Internet.  Sockets have two "
"primary properties controlling the way they send data: the *address family* "
"controls the OSI network layer protocol used and the *socket type* controls "
"the transport layer protocol."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:11
msgid ""
"Python supports three address families.  The most common, :const:`AF_INET`, "
"is used for IPv4 Internet addressing.  IPv4 addresses are made up of four "
"octal values separated by dots (e.g., ``10.1.1.5`` and ``127.0.0.1``).  "
"These values are more commonly referred to as \"IP addresses.\"  Almost all "
"Internet networking is done using IP version 4 at this time."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:18
msgid ""
":const:`AF_INET6` is used for IPv6 Internet addressing.  IPv6 is the \"next "
"generation\" version of the Internet protocol, and supports 128-bit "
"addresses, traffic shaping, and routing features not available under IPv4.  "
"Adoption of IPv6 is still limited, but continues to grow."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:23
msgid ""
":const:`AF_UNIX` is the address family for Unix Domain Sockets (UDS), an "
"interprocess communication protocol available on POSIX-compliant systems.  "
"The implementation of UDS typically allows the operating system to pass data"
" directly from process to process, without going through the network stack."
"  This is more efficient than using :const:`AF_INET`, but because the "
"filesystem is used as the namespace for addressing, UDS is restricted to "
"processes on the same system. The appeal of using UDS over other IPC "
"mechanisms such as named pipes or shared memory is that the programming "
"interface is the same as for IP networking, so the application can take "
"advantage of efficient communication when running on a single host, but use "
"the same code when sending data across the network."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:38
msgid ""
"The :const:`AF_UNIX` constant is only defined on systems where UDS is "
"supported."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:41
msgid ""
"The socket type is usually either :const:`SOCK_DGRAM` for *user datagram "
"protocol* (UDP) or :const:`SOCK_STREAM` for *transmission control protocol* "
"(TCP).  UDP does not require transmission handshaking or other setup, but "
"offers lower reliability of delivery.  UDP messages may be delivered out of "
"order, more than once, or not at all.  TCP, by contrast, ensures that each "
"message is delivered exactly once, and in the correct order.  Most "
"application protocols that deliver a large amount of data, such as HTTP, are"
" built on top of TCP.  UDP is commonly used for protocols where order is "
"less important (since the message fits in a single packet, i.e., DNS), or "
"for *multicasting* (sending the same data to several hosts)."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:55
msgid ""
"Python's :mod:`socket` module supports other socket types but they are less "
"commonly used, so are not covered here.  Refer to the standard library "
"documentation for more details."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:60
msgid "Looking up Hosts on the Network"
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:62
msgid ""
":mod:`socket` includes functions to interface with the domain name services "
"on the network, to convert the host name of a server into its numerical "
"network address.  Applications do not need to convert addresses explicitly "
"before using them to connect to a server, but it can be useful when "
"reporting errors to include the numerical address as well as the name value "
"being used."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:69
msgid ""
"To find the official name of the current host, use :func:`gethostname`."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:76
msgid ""
"The name returned will depend on the network settings for the current "
"system, and may change if it is on a different network (such as a laptop "
"attached to a wireless LAN)."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:86
msgid ""
"Use :func:`gethostbyname` to convert the name of a server to its numerical "
"address:"
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:93
msgid ""
"The name argument does not need to be a fully qualified name (i.e., it does "
"not need to include the domain name as well as the base hostname).  If the "
"name cannot be found, an exception of type :class:`socket.error` is raised."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:113
msgid ""
"For access to more naming information about a server, use "
":func:`gethostbyname_ex`.  It returns the canonical hostname of the server, "
"any aliases, and all of the available IP addresses that can be used to reach"
" it."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:122
msgid ""
"Having all known IP addresses for a server lets a client implement its own "
"load balancing or fail-over algorithms."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:150
msgid ""
"Use :func:`getfqdn` to convert a partial name to a fully qualified domain "
"name."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:157
msgid ""
"The name returned will not necessarily match the input argument in any way "
"if the input is an alias, such as ``www`` is here."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:173
msgid ""
"When the address of a server is available, use :func:`gethostbyaddr` to do a"
" \"reverse\" lookup for the name."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:180
msgid ""
"The return value is a tuple containing the full hostname, any aliases, and "
"all IP addresses associated with the name."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:194
msgid "Finding Service Information"
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:196
msgid ""
"In addition to an IP address, each socket address includes an integer *port "
"number*.  Many applications can run on the same host, listening on a single "
"IP address, but only one socket at a time can use a port at that address.  "
"The combination of IP address, protocol, and port number uniquely identify a"
" communication channel and ensure that messages sent through a socket arrive"
" at the correct destination."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:203
msgid ""
"Some of the port numbers are pre-allocated for a specific protocol. For "
"example, communication between email servers using SMTP occurs over port "
"number 25 using TCP, and web clients and servers use port 80 for HTTP.  The "
"port numbers for network services with standardized names can be looked up "
"with :func:`getservbyname`."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:213
msgid ""
"Although a standardized service is unlikely to change ports, looking up the "
"value with a system call instead of hard-coding it is more flexible when new"
" services are added in the future."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:237
msgid "To reverse the service port lookup, use :func:`getservbyport`."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:243
msgid ""
"The reverse lookup is useful for constructing URLs to services from "
"arbitrary addresses."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:266
msgid ""
"The number assigned to a transport protocol can be retrieved with "
":func:`getprotobyname`."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:273
msgid ""
"The values for protocol numbers are standardized, and defined as constants "
"in :mod:`socket` with the prefix ``IPPROTO_``."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:292
msgid "Looking Up Server Addresses"
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:294
msgid ""
":func:`getaddrinfo` converts the basic address of a service into a list of "
"tuples with all of the information necessary to make a connection.  The "
"contents of each tuple will vary, containing different network families or "
"protocols."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:303
msgid ""
"This program demonstrates how to look up the connection information for "
"``www.python.org``."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:329
msgid ""
":func:`getaddrinfo` takes several arguments to filter the result list. The "
"*host* and *port* values given in the example are required arguments.  The "
"optional arguments are *family*, *socktype*, *proto*, and *flags*.  The "
"family, socktype, and proto values should be ``0`` or one of the constants "
"defined by :mod:`socket`."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:339
msgid ""
"Since *flags* includes :const:`AI_CANONNAME` the canonical name of the "
"server (different from the value used for the lookup) is included in the "
"results this time.  Without the flag, the canonical name value is left "
"empty."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:357
msgid "IP Address Representations"
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:359
msgid ""
"Network programs written in C use the data type :class:`struct sockaddr` to "
"represent IP addresses as binary values (instead of the string addresses "
"usually found in Python programs).  Convert IPv4 addresses between the "
"Python representation and the C representation with :func:`inet_aton` and "
":func:`inet_ntoa`."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:369
msgid ""
"The four bytes in the packed format can be passed to C libraries, "
"transmitted safely over the network, or saved to a database compactly."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:403
msgid ""
"The related functions :func:`inet_pton` and :func:`inet_ntop` work with both"
" IPv4 and IPv6 addresses, producing the appropriate format based on the "
"address family parameter passed in."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:411
msgid ""
"An IPv6 address is already a hexadecimal value, so converting the packed "
"version to a series of hex digits produces a string similar to the original "
"value."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:434
msgid "`Wikipedia: IPv6 <http://en.wikipedia.org/wiki/IPv6>`__"
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:434
msgid "Article discussing Internet Protocol Version 6 (IPv6)."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:437
msgid ""
"`Wikipedia: OSI Networking Model <http://en.wikipedia.org/wiki/OSI_model>`__"
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:437
msgid "Article describing the seven layer model of networking implementation."
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:439
msgid ""
"`Assigned Internet Protocol Numbers <http://www.iana.org/assignments"
"/protocol-numbers/protocol-numbers.xml>`__"
msgstr ""

#: ../../PyMOTW/socket/addressing.rst:440
msgid "List of standard protocol names and numbers."
msgstr ""
