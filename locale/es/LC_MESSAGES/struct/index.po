#
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 13:35-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/struct/index.rst:3
msgid "struct -- Working with Binary Data"
msgstr ""

#: ../../PyMOTW/struct/index.rst:8
msgid "Convert between strings and binary data."
msgstr ""

#: ../../PyMOTW/struct/index.rst:9
msgid "1.4 and later"
msgstr ""

#: ../../PyMOTW/struct/index.rst:11
msgid ""
"The :mod:`struct` module includes functions for converting between strings "
"of bytes and native Python data types such as numbers and strings."
msgstr ""

#: ../../PyMOTW/struct/index.rst:16
msgid "Functions vs. Struct Class"
msgstr ""

#: ../../PyMOTW/struct/index.rst:18
msgid ""
"There are a set of module-level functions for working with structured "
"values, and there is also the :class:`Struct` class (new in Python 2.5).  "
"Format specifiers are converted from their string format to a compiled "
"representation, similar to the way regular expressions are. The conversion "
"takes some resources, so it is typically more efficient to do it once when "
"creating a :class:`Struct` instance and call methods on the instance instead"
" of using the module-level functions. All of the examples below use the "
":class:`Struct` class."
msgstr ""

#: ../../PyMOTW/struct/index.rst:28
msgid "Packing and Unpacking"
msgstr ""

#: ../../PyMOTW/struct/index.rst:30
msgid ""
"Structs support *packing* data into strings, and *unpacking* data from "
"strings using format specifiers made up of characters representing the type "
"of the data and optional count and endian-ness indicators.  For complete "
"details, refer to `the standard library documentation "
"<http://docs.python.org/library/struct.html>`__."
msgstr ""

#: ../../PyMOTW/struct/index.rst:36
msgid ""
"In this example, the format specifier calls for an integer or long value, a "
"two character string, and a floating point number.  The spaces between the "
"format specifiers are included here for clarity, and are ignored when the "
"format is compiled."
msgstr ""

#: ../../PyMOTW/struct/index.rst:45
msgid ""
"The example converts the packed value to a sequence of hex bytes for "
"printing with ``binascii.hexlify()``, since some of the characters are "
"nulls."
msgstr ""

#: ../../PyMOTW/struct/index.rst:64
msgid ""
"If we pass the packed value to :func:`unpack`, we get basically the same "
"values back (note the discrepancy in the floating point value)."
msgstr ""

#: ../../PyMOTW/struct/index.rst:85
msgid "Endianness"
msgstr ""

#: ../../PyMOTW/struct/index.rst:87
msgid ""
"By default values are encoded using the native C library notion of "
"\"endianness\".  It is easy to override that choice by providing an explicit"
" endianness directive in the format string."
msgstr ""

#: ../../PyMOTW/struct/index.rst:133
msgid "Buffers"
msgstr ""

#: ../../PyMOTW/struct/index.rst:135
msgid ""
"Working with binary packed data is typically reserved for highly performance"
" sensitive situations or passing data into and out of extension modules.  In"
" such situations, you can optimize by avoiding the overhead of allocating a "
"new buffer for each packed structure. The :meth:`pack_into` and "
":meth:`unpack_from` methods support writing to pre-allocated buffers "
"directly."
msgstr ""

#: ../../PyMOTW/struct/index.rst:146
msgid ""
"The *size* attribute of the :class:`Struct` tells us how big the buffer "
"needs to be."
msgstr ""

#: ../../PyMOTW/struct/index.rst:175
msgid "`struct <http://docs.python.org/library/struct.html>`_"
msgstr ""

#: ../../PyMOTW/struct/index.rst:175
msgid "The standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/struct/index.rst:178
msgid ":mod:`array`"
msgstr ""

#: ../../PyMOTW/struct/index.rst:178
msgid "The array module, for working with sequences of fixed-type values."
msgstr ""

#: ../../PyMOTW/struct/index.rst:181
msgid ":mod:`binascii`"
msgstr ""

#: ../../PyMOTW/struct/index.rst:181
msgid ""
"The binascii module, for producing ASCII representations of binary data."
msgstr ""

#: ../../PyMOTW/struct/index.rst:184
msgid "`WikiPedia: Endianness <http://en.wikipedia.org/wiki/Endianness>`_"
msgstr ""

#: ../../PyMOTW/struct/index.rst:184
msgid "Explanation of byte order and endianness in encoding."
msgstr ""

#: ../../PyMOTW/struct/index.rst:186
msgid ":ref:`article-data-structures`"
msgstr ""

#: ../../PyMOTW/struct/index.rst:187
msgid "More tools for working with data structures."
msgstr ""
