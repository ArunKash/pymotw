#
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 13:35-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/exceptions/index.rst:3
msgid "exceptions -- Built-in error classes"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:8
msgid ""
"The exceptions module defines the built-in errors used throughout the "
"standard library and by the interpreter."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:9
msgid "1.5 and later"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:13
msgid "Description"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:15
msgid ""
"In the past, Python has supported simple string messages as exceptions as "
"well as classes.  Since 1.5, all of the standard library modules use classes"
" for exceptions.  Starting with Python 2.5, string exceptions result in a "
"DeprecationWarning, and support for string exceptions will be removed in the"
" future."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:19
msgid "Base Classes"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:21
msgid ""
"The exception classes are defined in a hierarchy, described in the standard "
"library documentation.  In addition to the obvious organizational benefits, "
"exception inheritance is useful because related exceptions can be caught by "
"catching their base class.  In most cases, these base classes are not "
"intended to be raised directly."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:24
msgid "BaseException"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:26
msgid ""
"Base class for all exceptions.  Implements logic for creating a string "
"representation of the exception using str() from the arguments passed to the"
" constructor."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:31
msgid "Exception"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:33
msgid ""
"Base class for exceptions that do not result in quitting the running "
"application. All user-defined exceptions should use Exception as a base "
"class."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:37
msgid "StandardError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:39
msgid "Base class for built-in exceptions used in the standard library."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:42
msgid "ArithmeticError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:44
msgid "Base class for math-related errors."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:47
msgid "LookupError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:49
msgid "Base class for errors raised when something can't be found."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:52
msgid "EnvironmentError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:54
msgid ""
"Base class for errors that come from outside of Python (the operating "
"system, filesystem, etc.)."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:59
msgid "Raised Exceptions"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:64
msgid "AssertionError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:66
msgid "An AssertionError is raised by a failed ``assert`` statement."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:87
msgid ""
"It is also used in the :mod:`unittest` module in methods like ``failIf()``."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:120
msgid "AttributeError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:122
msgid ""
"When an attribute reference or assignment fails, AttributeError is raised.  "
"For example, when trying to reference an attribute that does not exist:"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:145
msgid "Or when trying to modify a read-only attribute:"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:169
msgid "EOFError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:171
msgid ""
"An EOFError is raised when a built-in function like ``input()`` or "
"``raw_input()`` do not read any data before encountering the end of their "
"input stream.  The file methods like ``read()`` return an empty string at "
"the end of the file."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:191
msgid "FloatingPointError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:193
msgid ""
"Raised by floating point operations that result in errors, when floating "
"point exception control (fpectl) is turned on.  Enabling :mod:`fpectl` "
"requires an interpreter compiled with the ``--with-fpectl`` flag.  Using "
":mod:`fpectl` is `discouraged in the stdlib docs <http://docs.python.org/lib"
"/module-fpectl.html>`_."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:205
msgid "GeneratorExit"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:207
msgid ""
"Raised inside a generator the generator's ``close()`` method is called."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:230
msgid "IOError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:232
msgid ""
"Raised when input or output fails, for example if a disk fills up or an "
"input file does not exist."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:257
msgid "ImportError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:259
msgid ""
"Raised when a module, or member of a module, cannot be imported. There are a"
" few conditions where an ImportError might be raised."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:262
msgid "If a module does not exist."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:283
msgid ""
"2. If ``from X import Y`` is used and Y cannot be found inside the module X,"
" an ImportError is raised."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:307
msgid "IndexError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:309
msgid "An IndexError is raised when a sequence reference is out of range."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:333
msgid "KeyError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:335
msgid ""
"Similarly, a KeyError is raised when a value is not found as a key of a "
"dictionary."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:359
msgid "KeyboardInterrupt"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:361
msgid ""
"A KeyboardInterrupt occurs whenever the user presses Ctrl-C (or Delete) to "
"stop a running program.  Unlike most of the other exceptions, "
"KeyboardInterrupt inherits directly from BaseException to avoid being caught"
" by global exception handlers that catch Exception."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:370
msgid "Pressing Ctrl-C at the prompt causes a KeyboardInterrupt exception."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:379
msgid "MemoryError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:381
msgid ""
"If your program runs out of memory and it is possible to recover (by "
"deleting some objects, for example), a MemoryError is raised."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:417
msgid "NameError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:419
msgid ""
"NameErrors are raised when your code refers to a name that does not exist in"
" the current scope.  For example, an unqualified variable name."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:447
msgid "NotImplementedError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:449
msgid ""
"User-defined base classes can raise NotImplementedError to indicate that a "
"method or behavior needs to be defined by a subclass, simulating an "
"*interface*."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:477
msgid ":mod:`abc` - Abstract base classes"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:482
msgid "OSError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:484
msgid ""
"OSError serves as the error class for the :mod:`os` module, and is raised "
"when an error comes back from an os-specific function."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:511
msgid "OverflowError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:513
msgid ""
"When an arithmetic operation exceeds the limits of the variable type, an "
"OverflowError is raise.  Long integers allocate more space as values grow, "
"so they end up raising MemoryError.  Floating point exception handling is "
"not standardized, so floats are not checked. Regular integers are converted "
"to long values as needed."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:557
msgid "ReferenceError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:559
msgid ""
"When a :mod:`weakref` proxy is used to access an object that has already "
"been garbage collected, a ReferenceError occurs."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:587
msgid "RuntimeError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:589
msgid ""
"A RuntimeError exception is used when no other more specific exception "
"applies.  The interpreter does not raise this exception itself very often, "
"but some user code does."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:595
msgid "StopIteration"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:597
msgid ""
"When an iterator is done, it's ``next()`` method raises StopIteration. This "
"exception is not considered an error."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:625
msgid "SyntaxError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:627
msgid ""
"A SyntaxError occurs any time the parser finds source code it does not "
"understand.  This can be while importing a module, invoking ``exec``, or "
"calling ``eval()``.  Attributes of the exception can be used to find exactly"
" what part of the input text caused the exception."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:651
msgid "SystemError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:653
msgid ""
"When an error occurs in the interpreter itself and there is some chance of "
"continuing to run successfully, it raises a SystemError. SystemErrors "
"probably indicate a bug in the interpreter and should be reported to the "
"maintainer."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:661
msgid "SystemExit"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:663
msgid ""
"When ``sys.exit()`` is called, it raises SystemExit instead of exiting "
"immediately.  This allows cleanup code in ``try:finally`` blocks to run and "
"special environments (like debuggers and test frameworks) to catch the "
"exception and avoid exiting."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:671
msgid "TypeError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:673
msgid ""
"TypeErrors are caused by combining the wrong type of objects, or calling a "
"function with the wrong type of object."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:697
msgid "UnboundLocalError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:699
msgid ""
"An UnboundLocalError is a type of NameError specific to local variable "
"names."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:706
msgid ""
"The difference between the global NameError and the UnboundLocal is the way "
"the name is used.  Because the name \"local_val\" appears on the left side "
"of an expression, it is interpreted as a local variable name."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:727
msgid "UnicodeError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:729
msgid ""
":class:`UnicodeError` is a subclass of :class:`ValueError` and is raised "
"when a Unicode problem occurs.  There are separate subclasses for "
":class:`UnicodeEncodeError`, :class:`UnicodeDecodeError`, and "
":class:`UnicodeTranslateError`."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:737
msgid "ValueError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:739
msgid ""
"A ValueError is used when a function receives a value that has the right "
"type but an invalid value."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:764
msgid "ZeroDivisionError"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:766
msgid ""
"When zero shows up in the denominator of a division operation, a "
"ZeroDivisionError is raised."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:789
msgid "Warning Categories"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:791
msgid ""
"There are also several exceptions defined for use with the :mod:`warnings` "
"module."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:794
msgid "Warning"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:794
msgid "The base class for all warnings."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:797
msgid "UserWarning"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:797
msgid "Base class for warnings coming from user code."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:802
msgid "DeprecationWarning"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:802
msgid "Used for features no longer being maintained."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:805
msgid "PendingDeprecationWarning"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:805
msgid "Used for features that are soon going to be deprecated."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:808
msgid "SyntaxWarning"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:808
msgid "Used for questionable syntax."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:813
msgid "RuntimeWarning"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:813
msgid "Used for events that happen at runtime that might cause problems."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:816
msgid "FutureWarning"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:816
msgid ""
"Warning about changes to the language or library that are coming at a later "
"time."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:819
msgid "ImportWarning"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:819
msgid "Warn about problems importing a module."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:823
msgid "UnicodeWarning"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:822
msgid "Warn about problems with unicode text."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:828
msgid "`exceptions <http://docs.python.org/library/exceptions.html>`_"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:828
msgid "The standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:830
msgid ":mod:`warnings`"
msgstr ""

#: ../../PyMOTW/exceptions/index.rst:831
msgid "Non-error warning messages."
msgstr ""
