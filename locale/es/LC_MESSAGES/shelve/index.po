#
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 13:35-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/shelve/index.rst:3
msgid "shelve -- Persistent storage of arbitrary Python objects"
msgstr ""

#: ../../PyMOTW/shelve/index.rst:8
msgid ""
"The shelve module implements persistent storage for arbitrary Python objects"
" which can be pickled, using a dictionary-like API."
msgstr ""

#: ../../PyMOTW/shelve/index.rst:10
msgid ""
"The :mod:`shelve` module can be used as a simple persistent storage option "
"for Python objects when a relational database is overkill. The shelf is "
"accessed by keys, just as with a dictionary. The values are pickled and "
"written to a database created and managed by :mod:`anydbm`."
msgstr ""

#: ../../PyMOTW/shelve/index.rst:18
msgid "Creating a new Shelf"
msgstr ""

#: ../../PyMOTW/shelve/index.rst:20
msgid ""
"The simplest way to use shelve is via the :class:`DbfilenameShelf` class. It"
" uses anydbm to store the data. You can use the class directly, or simply "
"call :func:`shelve.open()`:"
msgstr ""

#: ../../PyMOTW/shelve/index.rst:28
msgid "To access the data again, open the shelf and use it like a dictionary:"
msgstr ""

#: ../../PyMOTW/shelve/index.rst:34
msgid "If you run both sample scripts, you should see:"
msgstr ""

#: ../../PyMOTW/shelve/index.rst:51
msgid ""
"The :mod:`dbm` module does not support multiple applications writing to the "
"same database at the same time. If you know your client will not be "
"modifying the shelf, you can tell shelve to open the database read-only."
msgstr ""

#: ../../PyMOTW/shelve/index.rst:59
msgid ""
"If your program tries to modify the database while it is opened read-only, "
"an access error exception is generated. The exception type depends on the "
"database module selected by anydbm when the database was created."
msgstr ""

#: ../../PyMOTW/shelve/index.rst:65
msgid "Write-back"
msgstr ""

#: ../../PyMOTW/shelve/index.rst:67
msgid ""
"Shelves do not track modifications to volatile objects, by default. That "
"means if you change the contents of an item stored in the shelf, you must "
"update the shelf explicitly by storing the item again."
msgstr ""

#: ../../PyMOTW/shelve/index.rst:75
msgid ""
"In this example, the dictionary at 'key1' is not stored again, so when the "
"shelf is re-opened, the changes have not been preserved."
msgstr ""

#: ../../PyMOTW/shelve/index.rst:93
msgid ""
"To automatically catch changes to volatile objects stored in the shelf, open"
" the shelf with writeback enabled. The writeback flag causes the shelf to "
"remember all of the objects retrieved from the database using an in-memory "
"cache. Each cache object is also written back to the database when the shelf"
" is closed."
msgstr ""

#: ../../PyMOTW/shelve/index.rst:103
msgid ""
"Although it reduces the chance of programmer error, and can make object "
"persistence more transparent, using writeback mode may not be desirable in "
"every situation. The cache consumes extra memory while the shelf is open, "
"and pausing to write every cached object back to the database when it is "
"closed can take extra time. Since there is no way to tell if the cached "
"objects have been modified, they are all written back. If your application "
"reads data more than it writes, writeback will add more overhead than you "
"might want."
msgstr ""

#: ../../PyMOTW/shelve/index.rst:143
msgid "Specific Shelf Types"
msgstr ""

#: ../../PyMOTW/shelve/index.rst:145
msgid ""
"The examples above all use the default shelf implementation. Using "
":func:`shelve.open()` instead of one of the shelf implementations directly "
"is a common usage pattern, especially if you do not care what type of "
"database is used to store the data. There are times, however, when you do "
"care. In those situations, you may want to use :class:`DbfilenameShelf` or "
":class:`BsdDbShelf` directly, or even subclass :class:`Shelf` for a custom "
"solution."
msgstr ""

#: ../../PyMOTW/shelve/index.rst:156
msgid "`shelve <http://docs.python.org/lib/module-shelve.html>`_"
msgstr ""

#: ../../PyMOTW/shelve/index.rst:156
msgid "Standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/shelve/index.rst:159
msgid ":mod:`anydbm`"
msgstr ""

#: ../../PyMOTW/shelve/index.rst:159
msgid "The anydbm module."
msgstr ""

#: ../../PyMOTW/shelve/index.rst:162
msgid "`feedcache <http://www.doughellmann.com/projects/feedcache/>`_"
msgstr ""

#: ../../PyMOTW/shelve/index.rst:162
msgid "The feedcache module uses shelve as a default storage option."
msgstr ""

#: ../../PyMOTW/shelve/index.rst:165
msgid "`shove <http://pypi.python.org/pypi/shove/>`_"
msgstr ""

#: ../../PyMOTW/shelve/index.rst:165
msgid "Shove implements a similar API with more backend formats."
msgstr ""

#: ../../PyMOTW/shelve/index.rst:167
msgid ":ref:`article-data-persistence`"
msgstr ""

#: ../../PyMOTW/shelve/index.rst:168
msgid "Other mechanisms for storing data using standard library modules."
msgstr ""
