#
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 13:35-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:5
msgid "Parsing XML Documents"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:7
msgid ""
"Parsed XML documents are represented in memory by :class:`ElementTree` and "
":class:`Element` objects connected into a tree structure based on the way "
"the nodes in the XML document are nested."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:12
msgid "Parsing an Entire Document"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:14
msgid ""
"Parsing an entire document with :func:`parse()` returns an "
":class:`ElementTree` instance.  The tree knows about all of the data in the "
"input document, and the nodes of the tree can be searched or manipulated in "
"place.  While this flexibility can make working with the parsed document a "
"little easier, it typically takes more memory than an event-based parsing "
"approach since the entire document must be loaded at one time."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:22
msgid ""
"The memory footprint of small, simple documents such as this list of "
"podcasts represented as an OPML_ outline is not significant:"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:28
msgid "To parse the file, pass an open file handle to :func:`parse()`."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:34
msgid ""
"It will read the data, parse the XML, and return an :class:`ElementTree` "
"object."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:50
msgid "Traversing the Parsed Tree"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:52
msgid ""
"To visit all of the children in order, use :func:`iter` to create a "
"generator that iterates over the :class:`ElementTree` instance."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:59
msgid "This example prints the entire tree, one tag at a time."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:96
msgid ""
"To print only the groups of names and feed URLs for the podcasts, leaving "
"out of all of the data in the header section by iterating over only the "
"``outline`` nodes and print the *text* and *xmlUrl* attributes."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:105
msgid ""
"The ``'outline'`` argument to :func:`iter` means processing is limited to "
"only nodes with the tag ``'outline'``."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:151
msgid "Finding Nodes in a Document"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:153
msgid ""
"Walking the entire tree like this searching for relevant nodes can be error "
"prone.  The example above had to look at each outline node to determine if "
"it was a group (nodes with only a :attr:`text` attribute) or podcast (with "
"both :attr:`text` and :attr:`xmlUrl`).  To produce a simple list of the "
"podcast feed URLs, without names or groups, for a podcast downloader "
"application, the logic could be simplified using :func:`findall()` to look "
"for nodes with more descriptive search characteristics."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:162
msgid ""
"As a first pass at converting the above example, we can construct an XPath_ "
"argument to look for all outline nodes."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:169
msgid ""
"The logic in this version is not substantially different than the version "
"using :func:`getiterator()`.  It still has to check for the presence of the "
"URL, except that it does not print the group name when the URL is not found."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:198
msgid ""
"Another version can take advantage of the fact that the outline nodes are "
"only nested two levels deep.  Changing the search path to "
"``.//outline/outline`` mean the loop will process only the second level of "
"outline nodes."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:207
msgid ""
"All of those outline nodes nested two levels deep in the input are expected "
"to have the *xmlURL* attribute refering to the podcast feed, so the loop can"
" skip checking for for the attribute before using it."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:235
msgid ""
"This version is limited to the existing structure, though, so if the outline"
" nodes are ever rearranged into a deeper tree it will stop working."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:240
msgid "Parsed Node Attributes"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:242
msgid ""
"The items returned by :func:`findall()` and :func:`iter()` are "
":class:`Element` objects, each representing a node in the XML parse tree.  "
"Each :class:`Element` has attributes for accessing data pulled out of the "
"XML.  This can be illustrated with a somewhat more contrived example input "
"file, ``data.xml``:"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:252
msgid ""
"The \"attributes\" of a node are available in the :attr:`attrib` property, "
"which acts like a dictionary."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:259
msgid ""
"The node on line five of the input file has two attributes, :attr:`name` and"
" :attr:`foo`."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:276
msgid ""
"The text content of the nodes is available, along with the \"tail\" text "
"that comes after the end of a close tag."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:283
msgid ""
"The ``child`` node on line three contains embedded text, and the node on "
"line four has text with a tail (including any whitespace)."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:305
msgid ""
"XML entity references embedded in the document are conveniently converted to"
" the appropriate characters before values are returned."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:312
msgid ""
"The automatic conversion mean the implementation detail of representing "
"certain characters in an XML document can be ignored."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:331
msgid "Watching Events While Parsing"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:333
msgid ""
"The other API useful for processing XML documents is event-based.  The "
"parser generates ``start`` events for opening tags and ``end`` events for "
"closing tags.  Data can be extracted from the document during the parsing "
"phase by iterating over the event stream, which is convenient if it is not "
"necessary to manipulate the entire document afterwards and there is no need "
"to hold the entire parsed document in memory."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:340
msgid ""
":func:`iterparse()` returns an iterable that produces tuples containing the "
"name of the event and the node triggering the event. Events can be one of:"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:345
msgid "``start``"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:345
msgid ""
"A new tag has been encountered.  The closing angle bracket of the tag was "
"processed, but not the contents."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:348
msgid "``end``"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:348
msgid ""
"The closing angle bracket of a closing tag has been processed.  All of the "
"children were already processed."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:350
msgid "``start-ns``"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:351
msgid "Start a namespace declaration."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:353
msgid "``end-ns``"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:353
msgid "End a namespace declaration."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:359
msgid ""
"By default, only ``end`` events are generated.  To see other events, pass "
"the list of desired event names to :func:`iterparse()`, as in this example:"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:422
msgid ""
"The event-style of processing is more natural for some operations, such as "
"converting XML input to some other format.  This technique can be used to "
"convert list of podcasts from the earlier examples from an XML file to a CSV"
" file, so they can be loaded into a spreadsheet or database application."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:432
msgid ""
"This conversion program does not need to hold the entire parsed input file "
"in memory, and processing each node as it is encountered in the input is "
"more efficient."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:462
msgid "Creating a Custom Tree Builder"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:464
msgid ""
"A potentially more efficient means of handling parse events is to replace "
"the standard tree builder behavior with a custom version.  The "
":class:`ElementTree` parser uses an :class:`XMLTreeBuilder` to process the "
"XML and call methods on a target class to save the results.  The usual "
"output is an :class:`ElementTree` instance created by the default "
":class:`TreeBuilder` class.  Replacing :class:`TreeBuilder` with another "
"class allows it to receive the events before the :class:`Element` nodes are "
"instantiated, saving that portion of the overhead."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:474
msgid ""
"The XML-to-CSV converter from the previous section can be translated to a "
"tree builder."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:481
msgid ""
":class:`PodcastListToCSV` implements the :class:`TreeBuilder` protocol.  "
"Each time a new XML tag is encountered, :func:`start()` is called with the "
"tag name and attributes.  When a closing tag is seen :func:`end()` is called"
" with the name.  In between, :func:`data()` is called when a node has "
"content (the tree builder is expected to keep up with the \"current\" node)."
"  When all of the input is processed, :func:`close()` is called.  It can "
"return a value, which will be returned to the user of the "
":class:`XMLTreeBuilder`."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:517
msgid "Parsing Strings"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:519
msgid ""
"To work with smaller bits of XML text, especially string literals as might "
"be embedded in the source of a program, use :func:`XML()` and the string "
"containing the XML to be parsed as the only argument."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:527
msgid ""
"Notice that unlike with :func:`parse()`, the return value is an "
":class:`Element` instance instead of an :class:`ElementTree`.  An "
":class:`Element` supports the iterator protocol directly, so there is no "
"need to call :func:`getiterator`."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:555
msgid ""
"For structured XML that uses the :attr:`id` attribute to identify unique "
"nodes of interest, :func:`XMLID()` is a convenient way to access the parse "
"results."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:563
msgid ""
":func:`XMLID()` returns the parsed tree as an :class:`Element` object, along"
" with a dictionary mapping the :attr:`id` attribute strings to the "
"individual nodes in the tree."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:585
msgid "Outline Processor Markup Language, OPML_"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:585
msgid "Dave Winer's OPML specification and documentation."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:588
msgid "XML Path Language, XPath_"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:588
msgid "A syntax for identifying parts of an XML document."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:591
msgid ""
"`XPath Support in ElementTree <http://effbot.org/zone/element-xpath.htm>`_"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:591
msgid "Part of Fredrick Lundh's original documentation for ElementTree."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:593
msgid ":mod:`csv`"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/parse.rst:594
msgid "Read and write comma-separated-value files"
msgstr ""
