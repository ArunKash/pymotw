#
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 13:35-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:5
msgid "Creating XML Documents"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:7
msgid ""
"In addition to its parsing capabilities, :mod:`xml.etree.ElementTree` also "
"supports creating well-formed XML documents from :class:`Element` objects "
"constructed in an application.  The :class:`Element` class used when a "
"document is parsed also knows how to generate a serialized form of its "
"contents, which can then be written to a file or other data stream."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:15
msgid "Building Element Nodes"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:17
msgid ""
"There are three helper functions useful for creating a hierarchy of "
":class:`Element` nodes.  :func:`Element()` creates a standard node, "
":func:`SubElement()` attaches a new node to a parent, and :func:`Comment()` "
"creates a node that serializes using XML's comment syntax."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:27
msgid ""
"The output contains only the XML nodes in the tree, not the XML declaration "
"with version and encoding."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:45
msgid ""
"The ``&`` character in the text of ``child_with_entity_ref`` is converted to"
" the entity reference ``&amp;`` automatically."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:49
msgid "Pretty-Printing XML"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:51
msgid ""
":class:`ElementTree` makes no effort to \"pretty print\" the output produced"
" by :func:`tostring()`, since adding extra whitespace changes the contents "
"of the document.  To make the output easier to follow for human readers, the"
" rest of the examples below will use `a tip I found online "
"<http://renesd.blogspot.com/2007/05/pretty-print-xml-with-python.html>`_ and"
" re-parse the XML with :mod:`xml.dom.minidom` then use its "
":func:`toprettyxml()` method."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:64
msgid "The updated example now looks like:"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:70
msgid "and the output is easier to read:"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:92
msgid ""
"In addition to the extra whitespace for formatting, the "
":mod:`xml.dom.minidom` pretty-printer also adds an XML declaration to the "
"output."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:98
msgid "Setting Element Properties"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:100
msgid ""
"The previous example created nodes with tags and text content, but did not "
"set any attributes of the nodes.  Many of the examples from "
":ref:`xml.etree.ElementTree.parsing` worked with an OPML_ file listing "
"podcasts and their feeds.  The ``outline`` nodes in the tree used attributes"
" for the group names and podcast properties. :class:`ElementTree` can be "
"used to construct a similar XML file from a CSV input file, setting all of "
"the element attributes as the tree is constructed."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:113
msgid ""
"The attribute values can be configured one at a time with :func:`set()` (as "
"with the ``root`` node), or all at once by passing a dictionary to the node "
"factory (as with each group and podcast node)."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:201
msgid "Building Trees from Lists of Nodes"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:203
msgid ""
"Multiple children can be added to an :class:`Element` instance with the "
":func:`extend` method.  The argument to :func:`extend` is any iterable, "
"including a :class:`list` or another :class:`Element` instance."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:212
msgid ""
"When a :class:`list` is given, the nodes in the list are added directly to "
"the new parent."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:233
msgid ""
"When another :class:`Element` instance is given, the children of that node "
"are added to the new parent."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:240
msgid ""
"In this case, the node with tag ``root`` created by parsing the XML string "
"has three children, which are added to the ``parent`` node. The ``root`` "
"node is not part of the output tree."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:264
msgid ""
"It is important to understand that :func:`extend` does not modify any "
"existing parent-child relationships with the nodes.  If the values passed to"
" extend exist somewhere in the tree already, they will still be there, and "
"will be repeated in the output."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:273
msgid ""
"Setting the :attr:`id` attribute of these children to the Python unique "
"object identifier exposes the fact that the same node objects appear in the "
"output tree more than once."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:318
msgid "Serializing XML to a Stream"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:320
msgid ""
":func:`tostring()` is implemented to write to an in-memory file-like object "
"and then return a string representing the entire element tree. When working "
"with large amounts of data, it will take less memory and make more efficient"
" use of the I/O libraries to write directly to a file handle using the "
":func:`write()` method of :class:`ElementTree`."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:330
msgid ""
"The example uses :ref:`sys.stdout <sys-input-output>` to write to the "
"console, but it could also write to an open file or socket."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:348
msgid ""
"The last node in the tree contains no text or sub-nodes, so it is written as"
" an empty tag, ``<empty_child />``.  :func:`write` takes a *method* argument"
" to control the handling for empty nodes."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:356
msgid "Three methods are supported:"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:358
msgid "``xml``"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:359
msgid "The default method, produces ``<empty_child />``."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:361
msgid "``html``"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:361
msgid ""
"Produce the tag pair, as is required in HTML documents "
"(``<empty_child></empty_child>``)."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:364
msgid "``text``"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:364
msgid "Prints only the text of nodes, and skips empty tags entirely."
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:390
msgid "Outline Processor Markup Language, OPML_"
msgstr ""

#: ../../PyMOTW/xml/etree/ElementTree/create.rst:391
msgid "Dave Winer's OPML specification and documentation."
msgstr ""
