#
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 13:35-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/fileinput/index.rst:3
msgid "fileinput -- Process lines from input streams"
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:8
msgid ""
"Create command-line filter programs to process lines from input streams."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:9
msgid "1.5.2 and later"
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:11
msgid ""
"The fileinput module is a framework for creating command line programs for "
"processing text files in a filter-ish manner."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:15
msgid "Converting M3U files to RSS"
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:17
msgid ""
"For example, the m3utorss_ app I recently wrote for my friend `Patrick "
"<http://events.mediumloud.com/>`_ to convert some of his demo recordings "
"into a podcastable format."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:22
msgid ""
"The inputs to the program are one or more m3u file listing the mp3 files to "
"be distributed. The output is a single blob of XML that looks like an RSS "
"feed (output is written to stdout, for simplicity). To process the input, I "
"need to iterate over the list of filenames and:"
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:27
msgid "Open each file."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:28
msgid "Read each line of the file."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:29
msgid "Figure out if the line refers to an mp3 file."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:30
msgid ""
"If it does, extract the information from the mp3 file needed for the RSS "
"feed."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:31
msgid "Print the output."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:33
msgid ""
"I could have written all of that file handling out by hand. It isn't that "
"complicated, and with some testing I'm sure I could even get the error "
"handling right. But with the fileinput module, I don't need to worry about "
"that. I just write something like:"
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:41
msgid ""
"The ``fileinput.input()`` function takes as argument a list of filenames to "
"examine. If the list is empty, the module reads data from standard input. "
"The function returns an iterator which returns individual lines from the "
"text files being processed.  So, all I have to do is loop over each line, "
"skipping blanks and comments, to find the references to mp3 files."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:48
msgid "Here's the complete program:"
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:54
msgid "and its output:"
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:86
msgid "Progress Meta-data"
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:88
msgid ""
"In the previous example, I did not care what file or line number we are "
"processing in the input. For other tools (grep-like searching, for example) "
"you might. The fileinput module includes functions for accessing that "
"information (``filename()``, ``filelineno()``, ``lineno()``, etc.)."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:98
msgid ""
"We can use this basic pattern matching loop to find the occurances of "
"\"fileinput\" in the source for the examples."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:126
msgid "We can also pass input to it through stdin."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:155
msgid "In-place Filtering"
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:157
msgid ""
"Another common file processing operation is to modify the contents. For "
"example, a Unix hosts file might need to be updated if a subnet range "
"changes."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:164
msgid ""
"The safe way to make the change automatically is to create a new file based "
"on the input and then replace the original with the edited copy. fileinput "
"supports this automatically using the *inplace* option."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:185
msgid ""
"Although the script uses ``print``, no output is produced to stdout because "
"fileinput maps stdout to the file being overwritten."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:191
msgid ""
"Before processing begins, a backup file is created using the original name "
"plus ``.bak``.  The backup file is removed when the input is closed."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:220
msgid "`fileinput <http://docs.python.org/library/fileinput.html>`_"
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:220
msgid "The standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:223
msgid "`Patrick Bryant <http://events.mediumloud.com/>`_"
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:223
msgid "Atlanta-based singer/song-writer."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:227
msgid "m3utorss_"
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:226
msgid ""
"Script to convert m3u files listing MP3s to an RSS file suitable for use as "
"a podcast feed."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:230
msgid ":ref:`xml.etree.ElementTree.creating`"
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:230
msgid "More details of using ElementTree to produce XML."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:233
msgid ":ref:`article-file-access`"
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:233
msgid "Other modules for working with files."
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:235
msgid ":ref:`article-text-processing`"
msgstr ""

#: ../../PyMOTW/fileinput/index.rst:236
msgid "Other modules for working with text."
msgstr ""
