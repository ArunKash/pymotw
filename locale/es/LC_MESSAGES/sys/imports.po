#
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 13:35-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/sys/imports.rst:5
msgid "Modules and Imports"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:7
msgid ""
"Most Python programs end up as a combination of several modules with a main "
"application importing them. Whether using the features of the standard "
"library, or organizing custom code in separate files to make it easier to "
"maintain, understanding and managing the dependencies for a program is an "
"important aspect of development. :mod:`sys` includes information about the "
"modules available to an application, either as built-ins or after being "
"imported.  It also defines hooks for overriding the standard import behavior"
" for special cases."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:19
msgid "Imported Modules"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:21
msgid ""
":data:`sys.modules` is a dictionary mapping the names of imported modules to"
" the module object holding the code."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:28
msgid ""
"The contents of :data:`sys.modules` change as new modules are imported."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:52
msgid "Built-in Modules"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:54
msgid ""
"The Python interpreter can be compiled with some C modules built right in, "
"so they do not need to be distributed as separate shared libraries. These "
"modules don't appear in the list of imported modules managed in "
":data:`sys.modules` because they were not technically imported. The only way"
" to find the available built-in modules is through "
":data:`sys.builtin_module_names`."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:65
msgid ""
"The output of this script will vary, especially if run with a custom-built "
"version of the interpreter.  This output was created using a copy of the "
"interpreter installed from the standard python.org installer for OS X."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:91
msgid ""
"`Build instructions "
"<http://svn.python.org/view/python/trunk/README?view=markup>`_"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:92
msgid ""
"Instructions for building Python, from the README distributed with the "
"source."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:97
msgid "Import Path"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:99
msgid ""
"The search path for modules is managed as a Python list saved in "
":data:`sys.path`. The default contents of the path include the directory of "
"the script used to start the application and the current working directory."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:108
msgid ""
"The first directory in the search path is the home for the sample script "
"itself. That is followed by a series of platform-specific paths where "
"compiled extension modules (written in C) might be installed, and then the "
"global ``site-packages`` directory is listed last."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:125
msgid ""
"The import search path list can be modified before starting the interpreter "
"by setting the shell variable :data:`PYTHONPATH` to a colon-separated list "
"of directories."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:142
msgid ""
"A program can also modify its path by adding elements to :data:`sys.path` "
"directly."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:149
msgid ""
"Reloading an imported module re-imports the file, and uses the same "
":class:`module` object to hold the results.  Changing the path between the "
"initial import and the call to :func:`reload` means a different module may "
"be loaded the second time."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:172
msgid "Custom Importers"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:174
msgid ""
"Modifying the search path lets a programmer control how standard Python "
"modules are found, but what if a program needs to import code from somewhere"
" other than the usual ``.py`` or ``.pyc`` files on the filesystem? "
":pep:`302` solves this problem by introducing the idea of *import hooks* "
"that can trap an attempt to find a module on the search path and take "
"alternative measures to load the code from somewhere else or apply pre-"
"processing to it."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:183
msgid "Finders"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:185
msgid ""
"Custom importers are implemented in two separate phases. The *finder* is "
"responsible for locating a module and providing a *loader* to manage the "
"actual import. Adding a custom module finder is as simple as appending a "
"factory to the :data:`sys.path_hooks` list. On import, each part of the path"
" is given to a finder until one claims support (by not raising "
":ref:`ImportError <exceptions-ImportError>`). That finder is then "
"responsible for searching data storage represented by its path entry for "
"named modules."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:198
msgid ""
"This example illustrates how the finders are instantiated and queried. The "
":class:`NoisyImportFinder` raises :ref:`ImportError <exceptions-"
"ImportError>` when instantiated with a path entry that does not match its "
"special trigger value, which is obviously not a real path on the filesystem."
" This test prevents the :class:`NoisyImportFinder` from breaking imports of "
"real modules."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:221
msgid "Importing from a Shelve"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:223
msgid ""
"When the finder locates a module, it is responsible for returning a *loader*"
" capable of importing that module.  This example illustrates a custom "
"importer that saves its module contents in a database created by "
":mod:`shelve`."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:228
msgid ""
"The first step is to create a script to populate the shelf with a package "
"containing a sub-module and sub-package."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:235
msgid ""
"A real packaging script would read the contents from the filesystem, but "
"using hard-coded values is sufficient for a simple example like this."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:257
msgid ""
"Next, it needs to provide finder and loader classes that know how to look in"
" a shelf for the source of a module or package."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:264
msgid ""
"Now :class:`ShelveFinder` and :class:`ShelveLoader` can be used to import "
"code from a shelf. For example, importing the :mod:`package` created above:"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:272
msgid ""
"The shelf is added to the import path the first time an import occurs after "
"the path is modified. The finder recognizes the shelf and returns a loader, "
"which is used for all imports from that shelf. The initial package-level "
"import creates a new module object and then execs the source loaded from the"
" shelf, using the new module as the namespace so that names defined in the "
"source are preserved as module-level attributes."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:317
msgid "Packages"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:319
msgid ""
"The loading of other modules and sub-packages proceeds in the same way."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:400
msgid "Reloading"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:402
msgid ""
"Reloading a module is handled slightly differently. Instead of creating a "
"new module object, the existing module is re-used."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:409
msgid ""
"By re-using the same object, existing references to the module are preserved"
" even if class or function definitions are modified by the reload."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:449
msgid "Import Errors"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:451
msgid ""
"When a module cannot be located by any finder, :ref:`ImportError "
"<exceptions-ImportError>` is raised by the main import code."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:458
msgid "Other errors during the import are propagated."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:489
msgid "Package Data"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:491
msgid ""
"In addition to defining the API loading executable Python code, :pep:`302` "
"defines an optional API for retrieving package data intended for "
"distributing data files, documentation, and other non-code resources used by"
" a package. By implementing :func:`get_data`, a loader can allow calling "
"applications to support retrieval of data associated with the package "
"without considering how the package is actually installed (especially "
"without assuming that the package is stored as files on a filesystem)."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:504
msgid ""
":func:`get_data` takes a path based on the module or package that owns the "
"data, and returns the contents of the resource \"file\" as a string, or "
"raises :ref:`IOError <exceptions-IOError>` if the resource does not exist."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:547
msgid ":mod:`pkgutil`"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:548
msgid "Includes :func:`get_data` for retrieving data from a package."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:551
msgid "Importer Cache"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:553
msgid ""
"Searching through all of the hooks each time a module is imported can become"
" expensive. To save time, :data:`sys.path_importer_cache` is maintained as a"
" mapping between a path entry and the loader that can use the value to find "
"modules."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:562
msgid ""
"A cache value of ``None`` means to use the default filesystem loader. Each "
"missing directory is associated with an :class:`imp.NullImporter` instance, "
"since modules cannot be imported from directories that do not exist. In the "
"example output below, several :class:`zipimport.zipimporter` instances are "
"used to manage EGG files found on the path."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:619
msgid "Meta Path"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:621
msgid ""
"The :data:`sys.meta_path` further extends the sources of potential imports "
"by allowing a finder to be searched *before* the regular :data:`sys.path` is"
" scanned. The API for a finder on the meta-path is the same as for a regular"
" path. The difference is that the meta-finder is not limited to a single "
"entry in :data:`sys.path`, it can search anywhere at all."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:632
msgid ""
"Each finder on the meta-path is interrogated before :data:`sys.path` is "
"searched, so there is always an opportunity to have a central importer load "
"modules without explicitly modifying :data:`sys.path`. Once the module is "
"\"found\", the loader API works in the same way as for regular loaders "
"(although this example is truncated for simplicity)."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:667
msgid ":pep:`302`"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:667
msgid "Import Hooks"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:670
msgid ":mod:`imp`"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:670
msgid "The imp module provides tools used by importers."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:673
msgid ":mod:`zipimport`"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:673
msgid "Implements importing Python modules from inside ZIP archives."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:676
msgid ":mod:`importlib`"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:676
msgid "Base classes and other tools for creating custom importers."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:679
msgid ""
"`The Quick Guide to Python Eggs "
"<http://peak.telecommunity.com/DevCenter/PythonEggs>`_"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:679
msgid "PEAK documentation for working with EGGs."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:682
msgid ""
"`Import this, that, and the other thing: custom importers "
"<http://us.pycon.org/2010/conference/talks/?filter=core>`_"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:682
msgid "Brett Cannon's PyCon 2010 presentation."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:684
msgid ""
"`Python 3 stdlib module \"importlib\" "
"<http://docs.python.org/py3k/library/importlib.html>`_"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:685
msgid ""
"Python 3.x includes abstract base classes that makes it easier to create "
"custom importers."
msgstr ""
