# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/copy/index.rst:3
# bf7f334eedef4b93a4a40eccf0a70bdd
msgid "copy -- Duplicate objects"
msgstr ""

#: ../../PyMOTW/copy/index.rst:8
# 4682166bfdb0445793b86007ac27f0e1
msgid "Provides functions for duplicating objects using shallow or deep copy semantics."
msgstr ""

#: ../../PyMOTW/copy/index.rst:9
# c6b045af04b14159b2baa8bcfec29cf8
msgid "1.4"
msgstr ""

#: ../../PyMOTW/copy/index.rst:12
# 5a5babefd4f44963abd9618c2e04d2f2
msgid "The copy module includes 2 functions, copy() and deepcopy(), for duplicating existing objects."
msgstr ""

#: ../../PyMOTW/copy/index.rst:16
# 92cd1233ee214c68882852cc750b1269
msgid "Shallow Copies"
msgstr ""

#: ../../PyMOTW/copy/index.rst:18
# 00fedb06234947079a1f59895473449c
msgid "The shallow copy created by copy() is a new container populated with references to the contents of the original object. For example, a new list is constructed and the elements of the original list are appended to it."
msgstr ""

#: ../../PyMOTW/copy/index.rst:26
# eca52f780e2e4423a3693d55e097e4df
msgid "For a shallow copy, the MyClass instance is not duplicated so the reference in the dup list is to the same object that is in the l list."
msgstr ""

#: ../../PyMOTW/copy/index.rst:48
# 2c6301bb824640ed98dfa074eb828f30
msgid "Deep Copies"
msgstr ""

#: ../../PyMOTW/copy/index.rst:50
# 19b8a36f23fc47559c3e02b2c3834ff7
msgid "The deep copy created by deepcopy() is a new container populated with copies of the contents of the original object. For example, a new list is constructed and the elements of the original list are copied, then the copies are appended to the new list."
msgstr ""

#: ../../PyMOTW/copy/index.rst:55
# dfc718412f4841a39d637a47a86d8d37
msgid "By replacing the call to copy() with deepcopy(), the difference becomes apparent."
msgstr ""

#: ../../PyMOTW/copy/index.rst:62
# bb9d4c4bbd2f4a9c82d1f6ba1d7f9fc9
msgid "Notice that the first element of the list is no longer the same object reference, but the two objects still evaluate as being equal."
msgstr ""

#: ../../PyMOTW/copy/index.rst:84
# 99763186c39744d4be1b52e4d3646089
msgid "Controlling Copy Behavior"
msgstr ""

#: ../../PyMOTW/copy/index.rst:86
# d0fd98acce384d27a312e2f742ba3e9d
msgid "It is possible to control how copies are made using the __copy__ and __deepcopy__ hooks."
msgstr ""

#: ../../PyMOTW/copy/index.rst:89
# 4d5c88fddd3443648ae5336815dd090d
msgid "__copy__() is called without any arguments and should return a shallow copy of the object."
msgstr ""

#: ../../PyMOTW/copy/index.rst:92
# ef9267ef928a46d48139a99ff53a3f41
msgid "__deepcopy__() is called with a memo dictionary, and should return a deep copy of the object. Any member attributes that need to be deep-copied should be passed to copy.deepcopy(), along with the memo dictionary, to control for recursion (see below)."
msgstr ""

#: ../../PyMOTW/copy/index.rst:97
# 309ef80826b14093a15401525331b8d8
msgid "This example illustrates how the methods are called:"
msgstr ""

#: ../../PyMOTW/copy/index.rst:118
# 11dedea07d9143c7a6547a31eb806a72
msgid "Recursion in Deep Copy"
msgstr ""

#: ../../PyMOTW/copy/index.rst:120
# 528584751be9477f9abda5f5b4b7db1d
msgid "To avoid problems with duplicating recursive data structures, ``deepcopy()`` uses a dictionary to track objects that have already been copied. This dictionary is passed to the ``__deepcopy__()`` method so it can be used there as well."
msgstr ""

#: ../../PyMOTW/copy/index.rst:124
# d53d2402ae88450fb869ad6ccb141a76
msgid "This example shows how an interconnected data structure such as a Digraph might assist with protecting against recursion by implementing a ``__deepcopy__()`` method. This particular example is just for illustration purposes, since the default implementation of ``deepcopy()`` already handles the recursion cases correctly."
msgstr ""

#: ../../PyMOTW/copy/index.rst:134
# 86f9df70ddec4e75965e976133ed6404
msgid "First, some basic directed graph methods: A graph can be initialized with a name and a list of existing nodes to which it is connected. The addConnection() method is used to set up bi-directional connections. It is also used by the deepcopy operator."
msgstr ""

#: ../../PyMOTW/copy/index.rst:139
# b6f126b00d6b4d89a6c8bb09cab7f568
msgid "The ``__deepcopy__()`` method prints messages to show how it is called, and manages the memo dictionary contents as needed. Instead of copying the connection list wholesale, it creates a new list and appends copies of the individual connections to it. That ensures that the memo dictionary is updated as each new node is duplicated, and avoids recursion issues or extra copies of nodes. As before, it returns the copied object when it is done."
msgstr ""

#: ../../PyMOTW/copy/index.rst:146
# d282d10e39ab49a08068516b71741947
msgid "Next we can set up a graph with a nodes *root*, *a*, and *b*. The graph looks like:"
msgstr ""

#: ../../PyMOTW/copy/index.rst:158
# 64d03441d2964895adcca673d9f79d7b
msgid "There are several cycles in the graph, but by handling the recursion with the memo dictionary we can avoid having the traversal cause a stack overflow error.  When the *root* node is copied, we see:"
msgstr ""

#: ../../PyMOTW/copy/index.rst:202
# 14daeb6001b84cc182cab6434d4c50d3
msgid "The second time the *root* node is encountered, while the *a* node is being copied, ``__deepcopy__`` detects the recursion and re-uses the existing value from the memo dictionary instead of creating a new object."
msgstr ""

#: ../../PyMOTW/copy/index.rst:209
# 1ae9e5ed9d2a48ddac20f7f3a2e1c98a
msgid "`copy <http://docs.python.org/library/copy.html>`_"
msgstr ""

#: ../../PyMOTW/copy/index.rst:210
# cc2841bdff1642239d15bff7add59553
msgid "The standard library documentation for this module."
msgstr ""

