# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/tempfile/index.rst:3
# 51c16bdf992b46c495cd4fce2d1d00e5
msgid "tempfile -- Create temporary filesystem resources."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:8
# f0b353eb2a0a41bda344689af6d3803e
msgid "Create temporary filesystem resources."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:9
# d8970ff4e6f048a0bc95476c809b8f4f
msgid "Since 1.4 with major security revisions in 2.3"
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:11
# 29f61da6b7bd4413af0a7d2b5836450b
msgid "Many programs need to create files to write intermediate data. Creating files with unique names securely, so they cannot be guessed by someone wanting to break the application, is challenging. The :mod:`tempfile` module provides several functions for creating filesystem resources securely. :func:`TemporaryFile()` opens and returns an un-named file, :func:`NamedTemporaryFile()` opens and returns a named file, and :func:`mkdtemp()` creates a temporary directory and returns its name."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:21
# 22fd963d94f84947b52e4a83c7582e9c
msgid "TemporaryFile"
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:23
# e1540b618c434154af0d8aec05275005
msgid "If your application needs a temporary file to store data, but does not need to share that file with other programs, the best option for creating the file is the :func:`TemporaryFile()` function. It creates a file, and on platforms where it is possible, unlinks it immediately. This makes it impossible for another program to find or open the file, since there is no reference to it in the filesystem table. The file created by :func:`TemporaryFile()` is removed automatically when it is closed."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:36
# 7c27399f6eb14435b4bc558f66797e92
msgid "This example illustrates the difference in creating a temporary file using a common pattern for making up a name, versus using the :func:`TemporaryFile()` function. Notice that the file returned by :func:`TemporaryFile` has no name."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:63
# ee1c682793f945e0808ed23bf5f470d3
msgid "By default, the file handle is created with mode ``'w+b'`` so it behaves consistently on all platforms and your program can write to it and read from it."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:71
# 9c9fd6ab063d40de812569fe7befe9a3
msgid "After writing, you have to rewind the file handle using :func:`seek()` in order to read the data back from it."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:86
# d0646411f2b341dab962ed6c6c97e790
msgid "If you want the file to work in text mode, set *mode* to ``'w+t'`` when you create it:"
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:93
# c54cd3cfe45a48f8a985acecb72765f3
msgid "The file handle treats the data as text:"
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:109
# 934b2ebecfc048939ef70fb4f3685bf0
msgid "NamedTemporaryFile"
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:111
# c0cded912c734c5680fdd38839eff25f
msgid "There are situations, however, where having a named temporary file is important. If your application spans multiple processes, or even hosts, naming the file is the simplest way to pass it between parts of the application. The :func:`NamedTemporaryFile()` function creates a file with a name, accessed from the name attribute."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:121
# 5c9974c6c19e400489d5f780cae740b3
msgid "Even though the file is named, it is still removed after the handle is closed."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:141
# c5a622f49ab3474ca1ce87217e49514b
msgid "mkdtemp"
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:143
# 4b01f11626ae4989b94c741036b5a0dc
msgid "If you need several temporary files, it may be more convenient to create a single temporary directory and then open all of the files in that directory.  To create a temporary directory, use :func:`mkdtemp()`."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:152
# 03da501bf8a0406e80402456cefb48e4
msgid "Since the directory is not \"opened\" per se, you have to remove it yourself when you are done with it."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:168
# 25bc91fc92a14fc388badb8825d5835d
msgid "Predicting Names"
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:170
# 6a691f06dfb640c597acd10d0ac7c438
msgid "For debugging purposes, it is useful to be able to include some indication of the origin of the temporary files. While obviously less secure than strictly anonymous temporary files, including a predictable portion in the name lets you find the file to examine it while your program is using it. All of the functions described so far take three arguments to allow you to control the filenames to some degree. Names are generated using the formula::"
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:180
# 49bdda856e054faa8eeea270760e95ee
msgid "where all of the values except random can be passed as arguments to :func:`TemporaryFile()`, :func:`NamedTemporaryFile()`, and :func:`mkdtemp()`. For example:"
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:188
# 0f9af8f83fa8408a8a60afc1ecd68263
msgid "The *prefix* and *suffix* arguments are combined with a random string of characters to build the file name, and the *dir* argument is taken as-is and used as the location of the new file."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:208
# 5f897e1e7d8a4e7695df60554046c79d
msgid "Temporary File Location"
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:210
# ea7911e05957402481f50166fa7d1762
msgid "If you don't specify an explicit destination using the *dir* argument, the actual path used for the temporary files will vary based on your platform and settings. The tempfile module includes two functions for querying the settings being used at runtime:"
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:219
# 8c01fcc6987b4dc898342ab8c6cd50b4
msgid ":func:`gettempdir()` returns the default directory that will hold all of the temporary files and :func:`gettempprefix()` returns the string prefix for new file and directory names."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:236
# 14eec1dc2aca4c1ebf472ac9eaa9bc5e
msgid "The value returned by :func:`gettempdir()` is set based on a straightforward algorithm of looking through a list of locations for the first place the current process can create a file. From the library documentation:"
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:241
# 44fc705ab80f41b4a957790739b8f39c
msgid "Python searches a standard list of directories and sets tempdir to the first one which the calling user can create files in. The list is:"
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:244
# 610f739dd959448d8b886f5014b69f09
msgid "The directory named by the ``TMPDIR`` environment variable."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:246
# 9da2586d2ee54a8aae2a384d4d89633b
msgid "The directory named by the ``TEMP`` environment variable."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:248
# 06cffac5687b418db33a708362d33165
msgid "The directory named by the ``TMP`` environment variable."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:250
# 6f492026a554432282e8ce17527eeaf9
msgid "A platform-specific location:"
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:252
# b3a56904fdc24082afe4bd37b138bfdd
msgid "On RiscOS, the directory named by the ``Wimp$ScrapDir`` environment variable."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:255
# 5e7332b9976b4c60afc6c542c1b9d731
msgid "On Windows, the directories ``C:\\TEMP``, ``C:\\TMP``, ``\\TEMP``, and ``\\TMP``, in that order."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:258
# 8aa0eab7107a4efda97a13fbb52204e5
msgid "On all other platforms, the directories ``/tmp``, ``/var/tmp``, and ``/usr/tmp``, in that order."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:261
# 0cfa48a8c1ba4b4696d838f555933826
msgid "As a last resort, the current working directory."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:263
# 93ed3f86022f422482e36abe3b5613c1
msgid "If your program needs to use a global location for all temporary files that you need to set explicitly but do not want to set through one of these environment variables, you can set ``tempfile.tempdir`` directly."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:287
# ecb53f8bc6f84be8b3745011e3292045
msgid "`tempfile <http://docs.python.org/lib/module-tempfile.html>`_"
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:287
# e279567d49d54b1b9e098d36356a120b
msgid "Standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:289
# f63144d3f03d4fe8b6fe4ff355cdcf11
msgid ":ref:`article-file-access`"
msgstr ""

#: ../../PyMOTW/tempfile/index.rst:290
# ff8b45703b6544a7ba5b5f26822221b2
msgid "More modules for working with files."
msgstr ""

