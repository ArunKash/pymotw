# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/multiprocessing/communication.rst:3
# 48e6073e877c414a8acce72c69f353df
msgid "Communication Between Processes"
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:5
# afbadf16891b4cdbb37f207822a2a43f
msgid "As with threads, a common use pattern for multiple processes is to divide a job up among several workers to run in parallel.  Effective use of multiple processes usually requires some communication between them, so that work can be divided and results can be aggregated."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:13
# 191102ec068940f4842c185502d1564a
msgid "Passing Messages to Processes"
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:15
# ec8c3287d09a4416a05621b51c960a69
msgid "A simple way to communicate between process with :mod:`multiprocessing` is to use a :class:`Queue` to pass messages back and forth.  Any pickle-able object can pass through a :class:`Queue`."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:24
# 535d2b4177c54ce9812fecd986aaacc1
msgid "This short example only passes a single message to a single worker, then the main process waits for the worker to finish."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:39
# 55f47f5f121047e297c7059fc782b5ab
msgid "A more complex example shows how to manage several workers consuming data from a :class:`JoinableQueue` and passing results back to the parent process.  The *poison pill* technique is used to stop the workers.  After setting up the real tasks, the main program adds one \"stop\" value per worker to the job queue.  When a worker encounters the special value, it breaks out of its processing loop.  The main process uses the task queue's :func:`join` method to wait for all of the tasks to finish before processin the results."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:52
# 5b768ebdb33b4e7a93d0af5db9397180
msgid "Although the jobs enter the queue in order, since their execution is parallelized there is no guarantee about the order they will be completed."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:107
# 496ba30d5046489098eb0f8435d9ad29
msgid "Signaling between Processes"
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:109
# ab4bd85d2afc4bfeb2379a84709076b8
msgid "The :class:`Event` class provides a simple way to communicate state information between processes.  An event can be toggled between set and unset states.  Users of the event object can wait for it to change from unset to set, using an optional timeout value."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:118
# 846bf9da642a4157b99c2c9957798461
msgid "When :func:`wait` times out it returns without an error.  The caller is responsible for checking the state of the event using :func:`is_set`."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:140
# e5bcd8aaa7de4057914931cd4d81ae9a
msgid "Controlling Access to Resources"
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:142
# 17a0984aab17494a858f3326cfb20637
msgid "In situations when a single resource needs to be shared between multiple processes, a :class:`Lock` can be used to avoid conflicting accesses."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:150
# 297c50f6d5d549898a99ac1f960ec4bb
msgid "In this example, the messages printed to the console may be jumbled together if the two processes do not synchronize their access of the output stream with the lock."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:169
# b1680983f3054454af447a8e97db1dfe
msgid "Synchronizing Operations"
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:171
# d4d9b0e48c6d4fa6b315447c6acfd0fc
msgid ":class:`Condition` objects can be used to synchronize parts of a workflow so that some run in parallel but others run sequentially, even if they are in separate processes."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:179
# e71756719e2d491dacc7e24a4d0ddbc0
msgid "In this example, two process run the second stage of a job in parallel, but only after the first stage is done."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:201
# 6759463950134d0e8cc8da8b267a92d1
msgid "Controlling Concurrent Access to Resources"
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:203
# 791a7454e9094d26b72f44a838a13b78
msgid "Sometimes it is useful to allow more than one worker access to a resource at a time, while still limiting the overall number. For example, a connection pool might support a fixed number of simultaneous connections, or a network application might support a fixed number of concurrent downloads. A :class:`Semaphore` is one way to manage those connections."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:214
# e0020c67e5af49de8e2e0a74e11da365
msgid "In this example, the :class:`ActivePool` class simply serves as a convenient way to track which processes are running at a given moment. A real resource pool would probably allocate a connection or some other value to the newly active process, and reclaim the value when the task is done. Here, the pool is just used to hold the names of the active processes to show that only three are running concurrently."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:254
# 134dadaee9a44bcf98ceb6f674e85d56
msgid "Managing Shared State"
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:256
# 7ad558fbbb2146a4a90b35d6dca56ba1
msgid "In the previous example, the list of active processes is maintained centrally in the :class:`ActivePool` instance via a special type of list object created by a :class:`Manager`.  The :class:`Manager` is responsible for coordinating shared information state between all of its users."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:266
# 51e6806e9f9547c49f79c529276b93e8
msgid "By creating the list through the manager, it is shared and updates are seen in all processes.  Dictionaries are also supported."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:282
# e9984399f4a74fb9a5e83eaabe16fd91
msgid "Shared Namespaces"
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:284
# 2285937b36ed45ee9efb752e189a0991
msgid "In addition to dictionaries and lists, a :class:`Manager` can create a shared :class:`Namespace`."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:291
# e75ae6db8f744c0bae221850ec1b4a14
msgid "Any named value added to the :class:`Namespace` is visible to all of the clients that receive the :class:`Namespace` instance."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:307
# 2a05207856fe4d6697a604a2957e869b
msgid "It is important to know that *updates* to the contents of mutable values in the namespace are *not* propagated automatically."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:314
# ff53497e9e944121b60d2ec2f8af8dfc
msgid "To update the list, attach it to the namespace object again."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:331
# 7141e1fbed6b444989fa971d9b8f073e
msgid "Process Pools"
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:333
# 9c5846978fcc4c2599d4418a0a85502b
msgid "The :class:`Pool` class can be used to manage a fixed number of workers for simple cases where the work to be done can be broken up and distributed between workers independently.  The return values from the jobs are collected and returned as a list.  The pool arguments include the number of processes and a function to run when starting the task process (invoked once per child)."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:344
# e180ce7560b7434490d425a3b69105f0
msgid "The result of the :func:`map` method is functionally equivalent to the built-in :func:`map`, except that individual tasks run in parallel. Since the pool is processing its inputs in parallel, :func:`close` and :func:`join` can be used to synchronize the main process with the task processes to ensure proper cleanup."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:380
# a49160a73f124681905545d094c9d961
msgid "By default :class:`Pool` creates a fixed number of worker processes and passes jobs to them until there are no more jobs.  Setting the *maxtasksperchild* parameter tells the pool to restart a worker process after it has finished a few tasks.  This can be used to avoid having long-running workers consume ever more system resources."
msgstr ""

#: ../../PyMOTW/multiprocessing/communication.rst:390
# c6649de348cf4a51b8e40e08a46bd046
msgid "The pool restarts the workers when they have completed their allotted tasks, even if there is no more work.  In this output, eight workers are created, even though there are only 10 tasks, and each worker can complete two of them at a time."
msgstr ""

