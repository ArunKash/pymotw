# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/zipimport/index.rst:5
# 1aaa8bc3b0f147158113456e16af7bef
msgid "zipimport -- Load Python code from inside ZIP archives"
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:10
# 22eb392777ce4e7c817f54f574e38b06
msgid "Load Python code from inside ZIP archives."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:11
# 60a2f0f4fc724072b67f49cf4f8ed427
msgid "2.3 and later"
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:13
# a9535d97ad434674bf8d8a3205e436a0
msgid "The :mod:`zipimport` module implements the :class:`zipimporter` class, which can be used to find and load Python modules inside ZIP archives. The :class:`zipimporter` supports the \"import hooks\" API specified in :pep:`302`; this is how Python Eggs work."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:18
# 3c327bd3d8f746789ae2e2007bcd7bd1
msgid "You probably won't need to use the :mod:`zipimport` module directly, since it is possible to import directly from a ZIP archive as long as that archive appears in your :ref:`sys.path <sys-path>`. However, it is interesting to see the features available."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:24
# 630939233663477c90fb03900dfe68d6
msgid "Example"
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:26
# 40368005377046b7ad190eb91025ee01
msgid "For the examples this week, I'll reuse some of the code from last week's discussion of zipfile to create an example ZIP archive containing some Python modules. If you are experimenting with the sample code on your system, run ``zipimport_make_example.py`` before any of the rest of the examples. It will create a ZIP archive containing all of the modules in the example directory, along with some test data needed for the code below."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:68
# 6675c603e11b43aeaac6c0ad2dbd5423
msgid "Finding a Module"
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:70
# 1333fb62ff8b4605a0f0a3ecb54aaee4
msgid "Given the full name of a module, :func:`find_module()` will try to locate that module inside the ZIP archive."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:77
# df7f8673a5404cd9ac4c323305e77a76
msgid "If the module is found, the :class:`zipimporter` instance is returned. Otherwise, ``None`` is returned."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:96
# 3a0314d16d39417a84bddf451aea37b5
msgid "Accessing Code"
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:98
# a2b186b36f924de7b6ea15b73d9b5e7c
msgid "The :func:`get_code()` method loads the code object for a module from the archive."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:105
# 71afbb201fe7431bb359d0d4553bd4a7
msgid "The code object is not the same as a module object."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:121
# 7e63de762071456c912af824182e96d4
msgid "To load the code as a usable module, use :func:`load_module()` instead."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:128
# 1a9d0bbccd4e4676ad8086db81444d3b
msgid "The result is a module object as though the code had been loaded from a regular import:"
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:149
# d5d029e8b2cc4071bc22be2d4c4a82b3
msgid "Source"
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:151
# 5619d986995243a1bb3f1ff341ad4c94
msgid "As with the :mod:`inspect` module, it is possible to retrieve the source code for a module from the ZIP archive, if the archive includes the source. In the case of the example, only ``zipimport_get_source.py`` is added to ``zipimport_example.zip`` (the rest of the modules are just added as the .pyc files)."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:161
# c128901e83fb4d2ab1fe99014e595e9a
msgid "If the source for a module is not available, :func:`get_source()` returns ``None``."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:208
# d31603eb4bf84c4d9d4da3672e76f7c6
msgid "Packages"
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:210
# fc99ccadce8f474f918f8ed9931adb51
msgid "To determine if a name refers to a package instead of a regular module, use :func:`is_package()`."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:217
# 7641647ae1424f09a1aacc66ded342fc
msgid "In this case, ``zipimport_is_package`` came from a module and the ``example_package`` is a package."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:236
# f876067115ec4b1f8cd6c5668564d722
msgid "Data"
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:238
# ca067581219a4c218a9eb2219f80aba7
msgid "There are times when source modules or packages need to be distributed with non-code data. Images, configuration files, default data, and test fixtures are just a few examples of this. Frequently, the module ``__path__`` attribute is used to find these data files relative to where the code is installed."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:244
# 732b5eaead87475b83c6e9b05a493ea8
msgid "For example, with a normal module you might do something like:"
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:251
# a9f29fee23d8489e83f5645758d6aaa9
msgid "The output will look something like this, with the path changed based on where the PyMOTW sample code is on your filesystem."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:272
# 6e21e58c03614e28bbecb70ee6316bbc
msgid "If the ``example_package`` is imported from the ZIP archive instead of the filesystem, that method does not work:"
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:279
# 5d8937e61125406c9829752aee5e9b53
msgid "The ``__file__`` of the package refers to the ZIP archive, and not a directory. So we cannot just build up the path to the ``README.txt`` file."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:301
# 1054774fba4b4c268e7a3fa399fbc587
msgid "Instead, we need to use the :func:`get_data()` method. We can access :class:`zipimporter` instance which loaded the module through the ``__loader__`` attribute of the imported module:"
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:327
# 328314a08d4142f28c1c2b4314da477e
msgid "The ``__loader__`` is not set for modules not imported via :mod:`zipimport`."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:333
# b0bd9aa8e2f44f5baa90b3ac70ee6719
msgid "`zipimport <http://docs.python.org/lib/module-zipimport.html>`_"
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:333
# 81a2cba1f70a4c1b870bed69ac536896
msgid "Standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:336
# 81d9a432ba394714af022271967fb969
msgid ":mod:`imp`"
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:336
# b7f9ac65426d4d6a82d9e041ea654997
msgid "Other import-related functions."
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:339
# afa9b6140b254051bd875c56432fa122
msgid ":pep:`302`"
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:339
# 80f7be19fdcc45a7b0b83da508b6a5e4
msgid "New Import Hooks"
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:341
# f9e812aa5c13403badb9e42ffeb825d8
msgid ":mod:`pkgutil`"
msgstr ""

#: ../../PyMOTW/zipimport/index.rst:342
# 32feba6623374a3d9f72c1764c058a14
msgid "Provides a more generic interface to :func:`get_data`."
msgstr ""

