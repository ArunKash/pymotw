# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/signal/index.rst:3
# 2fb04d23fad64ada9bb7130dc382f465
msgid "signal -- Receive notification of asynchronous system events"
msgstr ""

#: ../../PyMOTW/signal/index.rst:8
# c7781823f5a247d999bb0291de3c6c01
msgid "Receive notification of asynchronous system events"
msgstr ""

#: ../../PyMOTW/signal/index.rst:9
# ae18035d958d44e9b463d27930d4a1f4
msgid "1.4 and later"
msgstr ""

#: ../../PyMOTW/signal/index.rst:13
# 33bc12930a374ce6914a1b686f99f004
msgid "Programming with Unix signal handlers is a non-trivial endeavor. This is an introduction, and does not include all of the details you may need to use signals successfully on every platform. There is some degree of standardization across versions of Unix, but there is also some variation, so consult documentation for your OS if you run into trouble."
msgstr ""

#: ../../PyMOTW/signal/index.rst:18
# 721b6c267f9c447294b94977df0d317e
msgid "Signals are an operating system feature that provide a means of notifying your program of an event, and having it handled asynchronously.  They can be generated by the system itself, or sent from one process to another.  Since signals interrupt the regular flow of your program, it is possible that some operations (especially I/O) may produce error if a signal is received in the middle."
msgstr ""

#: ../../PyMOTW/signal/index.rst:25
# 1827e8c5ed33447a9dae0f4e7bb3dc7c
msgid "Signals are identified by integers and are defined in the operating system C headers.  Python exposes the signals appropriate for the platform as symbols in the :mod:`signal` module.  For the examples below, I will use ``SIGINT`` and ``SIGUSR1``.  Both are typically defined for all Unix and Unix-like systems."
msgstr ""

#: ../../PyMOTW/signal/index.rst:32
# d90ce77ed8184b258cf689810747156d
msgid "Receiving Signals"
msgstr ""

#: ../../PyMOTW/signal/index.rst:34
# 67dd483159d84d1da713198d8909d921
msgid "As with other forms of event-based programming, signals are received by establishing a callback function, called a *signal handler*, that is invoked when the signal occurs.  The arguments to your signal handler are the signal number and the stack frame from the point in your program that was interrupted by the signal."
msgstr ""

#: ../../PyMOTW/signal/index.rst:44
# 11e2564dbcc141dcbf29d391f59bc4ba
msgid "This relatively simple example script loops indefinitely, pausing for a few seconds each time.  When a signal comes in, the sleep call is interrupted and the signal handler ``receive_signal()`` prints the signal number.  When the signal handler returns, the loop continues."
msgstr ""

#: ../../PyMOTW/signal/index.rst:49
# 4bd6e8d30c14489e95bdc12bf844a787
msgid "To send signals to the running program, I use the command line program kill.  To produce the output below, I ran ``signal_signal.py`` in one window, then ``kill -USR1 $pid``, ``kill -USR2 $pid``, and ``kill -INT $pid`` in another."
msgstr ""

#: ../../PyMOTW/signal/index.rst:74
# b54f93f2523143439169e360299b1334
msgid "getsignal()"
msgstr ""

#: ../../PyMOTW/signal/index.rst:76
# 49fb3777166f49cd83556d74024e0bf8
msgid "To see what signal handlers are registered for a signal, use :func:`getsignal()`.  Pass the signal number as argument.  The return value is the registered handler, or one of the special values ``signal.SIG_IGN`` (if the signal is being ignored), ``signal.SIG_DFL`` (if the default behavior is being used), or ``None`` (if the existing signal handler was registered from C, rather than Python)."
msgstr ""

#: ../../PyMOTW/signal/index.rst:88
# 1c459549a8e64c3499fa892ae29dd99c
msgid "Again, since each OS may have different signals defined, the output you see from running this on other systems may vary.  This is from OS X:"
msgstr ""

#: ../../PyMOTW/signal/index.rst:129
# 594e0bf034b843df800bed6100db4d85
msgid "Sending Signals"
msgstr ""

#: ../../PyMOTW/signal/index.rst:131
# 167e7da573444192b1015bc90e7d0f20
msgid "The function for sending signals is ``os.kill()``.  Its use is covered in the section on the :mod:`os` module, :ref:`creating-processes-with-os-fork`."
msgstr ""

#: ../../PyMOTW/signal/index.rst:136
# ae7ae80e4ba34dfc9a597cbdedcda6b0
msgid "Alarms"
msgstr ""

#: ../../PyMOTW/signal/index.rst:138
# 1a8fda937899493887d24a6ece35e3ab
msgid "Alarms are a special sort of signal, where your program asks the OS to notify it after some period of time has elapsed.  As `the standard module documentation for os <http://docs.python.org/lib/node545.html>`_ points out, this is useful for avoiding blocking indefinitely on an I/O operation or other system call."
msgstr ""

#: ../../PyMOTW/signal/index.rst:149
# 514c1f98b3d94d8bbf793fc7deb82e7a
msgid "In this example, the call to :func:`sleep()` does not last the full 4 seconds."
msgstr ""

#: ../../PyMOTW/signal/index.rst:161
# 3cce96a7390c4a80a5758f19ad80225d
msgid "Ignoring Signals"
msgstr ""

#: ../../PyMOTW/signal/index.rst:163
# 7d55331a73644ec5bd1cd8cd5ff09823
msgid "To ignore a signal, register ``SIG_IGN`` as the handler.  This script replaces the default handler for ``SIGINT`` with ``SIG_IGN``, and registers a handler for ``SIGUSR1``.  Then it uses :func:`signal.pause()` to wait for a signal to be received."
msgstr ""

#: ../../PyMOTW/signal/index.rst:172
# 25bbaf06b9f94a7bb1d78b51b9a4ddd8
msgid "Normally ``SIGINT`` (the signal sent by the shell to your program when you hit Ctrl-C) raises a :ref:`KeyboardInterrupt <exceptions-KeyboardInterrupt>`.  In this example, we ignore ``SIGINT`` and raise :ref:`SystemExit <exceptions-SystemExit>` when we see ``SIGUSR1``.  Each ``^C`` represents an attempt to use Ctrl-C to kill the script from the terminal.  Using ``kill -USR1 72598`` from another terminal eventually causes the script to exit."
msgstr ""

#: ../../PyMOTW/signal/index.rst:188
# 43f63ea72a1446148f0777798bf98015
msgid "Signals and Threads"
msgstr ""

#: ../../PyMOTW/signal/index.rst:190
# 3abcce661bb149aa970e943fc68dd9e2
msgid "Signals and threads don't generally mix well because only the main thread of a process will receive signals.  The following example sets up a signal handler, waits for the signal in one thread, and sends the signal from another."
msgstr ""

#: ../../PyMOTW/signal/index.rst:199
# 30bb048f2e05462c974c9797e5561991
msgid "Notice that the signal handlers were all registered in the main thread.  This is a requirement of the signal module implementation for Python, regardless of underlying platform support for mixing threads and signals.  Although the receiver thread calls :func:`signal.pause()`, it does not receive the signal.  The ``signal.alarm(2)`` call near the end of the example prevents an infinite block, since the receiver thread will never exit."
msgstr ""

#: ../../PyMOTW/signal/index.rst:216
# e97a9803906f4f3092d39782d8a4df0f
msgid "Although alarms can be set in threads, they are also received by the main thread."
msgstr ""

#: ../../PyMOTW/signal/index.rst:223
# 6cb7e19cf97a4bc9b7b27730e271cd26
msgid "Notice that the alarm does not abort the :func:`sleep()` call in :func:`use_alarm()`."
msgstr ""

#: ../../PyMOTW/signal/index.rst:239
# 83ab9004d49b4f728f42c7d558d650ea
msgid "`signal <http://docs.python.org/lib/module-signal.html>`_"
msgstr ""

#: ../../PyMOTW/signal/index.rst:239
# 8a362573addb4c45a8f39214f1513bf6
msgid "Standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/signal/index.rst:242
# 98929e856a8c4a8db82492a985ab59e3
msgid ":ref:`creating-processes-with-os-fork`"
msgstr ""

#: ../../PyMOTW/signal/index.rst:242
# 66d89c82fcd846adbcf499a6b7b3f17d
msgid "The :func:`kill()` function can be used to send signals between processes."
msgstr ""

