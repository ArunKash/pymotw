# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/contextlib/index.rst:3
# 5afbd76bc2124c329e508cc00c850a40
msgid "contextlib -- Context manager utilities"
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:8
# 12a1c86849ad4d0abebd4f61cc9d4c3c
msgid "Utilities for creating and working with context managers."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:9
# a9fabec320c04e70b9db424778b6ed40
msgid "2.5 and later"
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:11
# 9354e1c6bb4c421b8a9b1b180c07cfe6
msgid "The :mod:`contextlib` module contains utilities for working with context managers and the :command:`with` statement."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:15
# 2829a5eb33fb40429cfd99bd44d7a0af
msgid "Context managers are tied to the :command:`with` statement. Since :command:`with` is officially part of Python 2.6, you have to import it from :mod:`__future__` before using contextlib in Python 2.5."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:20
# 378de6647db248a0a27ad388184611d3
msgid "Context Manager API"
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:22
# b1922004d98f42d9978bd509df86bede
msgid "A *context manager* is responsible for a resource within a code block, possibly creating it when the block is entered and then cleaning it up after the block is exited.  For example, files support the context manager API to make it easy to ensure they are closed after all reading or writing is done."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:32
# 2b61979933fd4f49a8619bf6f76d331d
msgid "A context manager is enabled by the :command:`with` statement, and the API involves two methods.  The :func:`__enter__` method is run when execution flow enters the code block inside the :command:`with`.  It returns an object to be used within the context.  When execution flow leaves the :command:`with` block, the :func:`__exit__` method of the context manager is called to clean up any resources being used."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:43
# d4fa0de7ad244162a998b1ddcfe8c04b
msgid "Combining a context manager and the :command:`with` statement is a more compact way of writing a ``try:finally`` block, since the context manager's :func:`__exit__` method is always called, even if an exception is raised."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:63
# 9ef4f2e9a55d4048b997018fbc218f0c
msgid ":func:`__enter__` can return any object to be associated with a name specified in the :command:`as` clause of the :command:`with` statement.  In this example, the :class:`Context` returns an object that uses the open context."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:72
# aa31dcf3f6c743a59e5665fb8f8754f0
msgid "It can be a little confusing, but the value associated with the variable :data:`c` is the object returned by :func:`__enter__` and *not* the :class:`Context` instance created in the :command:`with` statement."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:94
# edb0038d54584ca2a2c7f95881bd4215
msgid "The :func:`__exit__` method receives arguments containing details of any exception raised in the :command:`with` block."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:101
# 9906a4c09fd04e199981f6662dbe88b8
msgid "If the context manager can handle the exception, :func:`__exit__` should return a true value to indicate that the exception does not need to be propagated.  Returning false causes the exception to be re-raised after :func:`__exit__` returns."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:136
# dc5b5c8cdb064b54afd01e7f22b41267
msgid "From Generator to Context Manager"
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:138
# 47625d7dce014e4b823b5edbbc4ce26c
msgid "Creating context managers the traditional way, by writing a class with :func:`__enter__()` and :func:`__exit__()` methods, is not difficult. But sometimes it is more overhead than you need just to manage a trivial bit of context. In those sorts of situations, you can use the :func:`contextmanager()` decorator to convert a generator function into a context manager."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:149
# 89a24ba4dfb04769957b6fe9984e5515
msgid "The generator should initialize the context, yield exactly one time, then clean up the context. The value yielded, if any, is bound to the variable in the :command:`as` clause of the :command:`with` statement. Exceptions from within the :command:`with` block are re-raised inside the generator, so they can be handled there."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:185
# 4f813bc0979442f38420387269bfc9aa
msgid "Nesting Contexts"
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:187
# d3e70d40ae6b4848bcbceae2a648e171
msgid "At times it is necessary to manage multiple contexts simultaneously (such as when copying data between input and output file handles, for example). It is possible to nest :command:`with` statements one inside another. If the outer contexts do not need their own separate block, though, this adds to the indention level without giving any real benefit. Using :func:`nested()` nests the contexts using a single :command:`with` statement."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:199
# 876fead7239f4087b5ebb0e709fe4a30
msgid "Notice that the contexts are exited in the reverse order in which they are entered."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:218
# 265e2172699148b7b64ed07083dcdb1a
msgid "In Python 2.7 and later, :func:`nested` is deprecated because the :command:`with` statement supports nesting directly."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:225
# 6280fcaad1a14273a67ae49a2ac4acbb
msgid "Each context manager and optional :command:`as` clause are separated by a comma (``,``).  The effect is similar to using :func:`nested`, but avoids some of the edge-cases around error handling that :func:`nested` could not implement correctly."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:248
# 5008cba017fb485e983a24dc0813e3d1
msgid "Closing Open Handles"
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:250
# 00826a7c4eb6441f9ad83b9fe4910eef
msgid "The :class:`file` class supports the context manager API directly, but some other objects that represent open handles do not. The example given in the standard library documentation for :mod:`contextlib` is the object returned from :func:`urllib.urlopen`.  There are other legacy classes that use a :func:`close` method but do not support the context manager API. To ensure that a handle is closed, use :func:`closing()` to create a context manager for it."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:262
# ca142222efa947dbb1588ddec229c12a
msgid "The handle is closed whether there is an error in the :command:`with` block or not."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:289
# 2d0ecd1a2c25402bad706e457796b0c2
msgid "`contextlib <http://docs.python.org/library/contextlib.html>`_"
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:289
# 3569b53de50447d385e937d40bb53a28
msgid "The standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:292
# 748d9b1ef7014530b16592f02a5e0b40
msgid ":pep:`343`"
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:292
# aa38f6ed1dbf4eae90037aefe4f6ebe4
msgid "The :command:`with` statement."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:295
# 356dc7431d77441194394222f12f195e
msgid "`Context Manager Types <http://docs.python.org/library/stdtypes.html#typecontextmanager>`__"
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:295
# 4844ccba164a41be8d49428e62ba05b3
msgid "Description of the context manager API from the standard library documentation."
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:297
# 0a66870f495541a4a23d98c43312fa08
msgid "`With Statement Context Managers <http://docs.python.org/reference/datamodel.html#context-managers>`__"
msgstr ""

#: ../../PyMOTW/contextlib/index.rst:298
# 239a0215f88f418084d9519dcc99dd96
msgid "Description of the context manager API from the Python Reference Guide."
msgstr ""

