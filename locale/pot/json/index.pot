# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/json/index.rst:3
# 65e99454e55842ebb4f8c26a20c2af14
msgid "json -- JavaScript Object Notation Serializer"
msgstr ""

#: ../../PyMOTW/json/index.rst:8
# b87f40da33114c0294aaf60514546054
msgid "Encode Python objects as JSON strings, and decode JSON strings into Python objects."
msgstr ""

#: ../../PyMOTW/json/index.rst:9
# af88edfc458e483ea5722050a206c4fd
msgid "2.6"
msgstr ""

#: ../../PyMOTW/json/index.rst:11
# 4f2d5600a0a54dafb4392c3eb6587140
msgid "The :mod:`json` module provides an API similar to :mod:`pickle` for converting in-memory Python objects to a serialized representation known as `JavaScript Object Notation`_ (JSON).  Unlike pickle, JSON has the benefit of having implementations in many languages (especially JavaScript), making it suitable for inter-application communication.  JSON is probably most widely used for communicating between the web server and client in an AJAX application, but is not limited to that problem domain."
msgstr ""

#: ../../PyMOTW/json/index.rst:21
# c5932af5d9d949a195bacfb158037d2e
msgid "Encoding and Decoding Simple Data Types"
msgstr ""

#: ../../PyMOTW/json/index.rst:23
# 9533e48ab3f546c5b02b03af7b8ebfaf
msgid "The encoder understands Python's native types by default (string, unicode, int, float, list, tuple, dict)."
msgstr ""

#: ../../PyMOTW/json/index.rst:30
# 597a3aec48cd4ec29239cda4c341cb23
msgid "Values are encoded in a manner very similar to Python's ``repr()`` output."
msgstr ""

#: ../../PyMOTW/json/index.rst:46
# ec84f67a207f4cb0b587eec2037a6753
msgid "Encoding, then re-decoding may not give exactly the same type of object."
msgstr ""

#: ../../PyMOTW/json/index.rst:53
# 0475e8146d634637953f3cb29d33a68d
msgid "In particular, strings are converted to unicode and tuples become lists."
msgstr ""

#: ../../PyMOTW/json/index.rst:73
# 0a03a85f9229445ea889ccd872d0c70a
msgid "Human-consumable vs. Compact Output"
msgstr ""

#: ../../PyMOTW/json/index.rst:75
# 509c75f5119b419d913862484fb9db05
msgid "Another benefit of JSON over pickle is that the results are human-readable.  The ``dumps()`` function accepts several arguments to make the output even nicer.  For example, ``sort_keys`` tells the encoder to output the keys of a dictionary in sorted, instead of random, order."
msgstr ""

#: ../../PyMOTW/json/index.rst:85
# ed02527102c547ad844f7a26e7e93e1e
msgid "Sorting makes it easier to scan the results by eye, and also makes it possible to compare JSON output in tests."
msgstr ""

#: ../../PyMOTW/json/index.rst:104
# efe32c0b6f814e78ace66a6e88be99f1
msgid "For highly-nested data structures, you will want to specify a value for ``indent``, so the output is formatted nicely as well."
msgstr ""

#: ../../PyMOTW/json/index.rst:111
# 9f1714b6d35142668fa333ce0f53a27f
msgid "When indent is a non-negative integer, the output more closely resembles that of :mod:`pprint`, with leading spaces for each level of the data structure matching the indent level."
msgstr ""

#: ../../PyMOTW/json/index.rst:138
# 32b039f2de5e447c89dab51e614d4c72
msgid "Verbose output like this increases the number of bytes needed to transmit the same amount of data, however, so it isn't the sort of thing you necessarily want to use in a production environment.  In fact, you may want to adjust the settings for separating data in the encoded output to make it even more compact than the default."
msgstr ""

#: ../../PyMOTW/json/index.rst:148
# 3c181bac679e4c60b94348583682b20d
msgid "The ``separators`` argument to ``dumps()`` should be a tuple containing the strings to separate items in a list and keys from values in a dictionary.  The default is ``(', ', ': ')``. By removing the whitespace, we can produce a more compact output."
msgstr ""

#: ../../PyMOTW/json/index.rst:170
# 3a6e9ec6de444799a0108beaa7dd629f
msgid "Encoding Dictionaries"
msgstr ""

#: ../../PyMOTW/json/index.rst:172
# 0cdf94409e974e609c2dc70bab574830
msgid "The JSON format expects the keys to a dictionary to be strings.  If you have other types as keys in your dictionary, trying to encode the object will produce a :ref:`ValueError <exceptions-ValueError>`.  One way to work around that limitation is to skip over non-string keys using the ``skipkeys`` argument:"
msgstr ""

#: ../../PyMOTW/json/index.rst:182
# fe1886120de94ebb91a5b8cb00c07e6c
msgid "Rather than raising an exception, the non-string key is simply ignored."
msgstr ""

#: ../../PyMOTW/json/index.rst:202
# f9ea912524c249b887e137b09bbf770c
msgid "Working with Your Own Types"
msgstr ""

#: ../../PyMOTW/json/index.rst:204
# d1f2484b041e4328887e19fbf1d1b323
msgid "All of the examples so far have used Pythons built-in types because those are supported by :mod:`json` natively.  It isn't uncommon, of course, to have your own types that you want to be able to encode as well.  There are two ways to do that."
msgstr ""

#: ../../PyMOTW/json/index.rst:209
# 6733d5c1657d43a397b0f248189095ea
msgid "First, we'll need a class to encode:"
msgstr ""

#: ../../PyMOTW/json/index.rst:215
# e696f97b8dcc4a39b1e4377f34452acb
msgid "The simple way of encoding a ``MyObj`` instance is to define a function to convert an unknown type to a known type.  You don't have to do the encoding yourself, just convert one object to another."
msgstr ""

#: ../../PyMOTW/json/index.rst:223
# 3ae7ae83df8442ec9077cb0c5c7732d3
msgid "In ``convert_to_builtin_type()``, instances of classes not recognized by :mod:`json` are converted to dictionaries with enough information to re-create the object if a program has access to the Python modules necessary."
msgstr ""

#: ../../PyMOTW/json/index.rst:245
# 8c368f9b5c4c4cf7b322def2e439948b
msgid "To decode the results and create a ``MyObj`` instance, we need to tie in to the decoder so we can import the class from the module and create the instance.  For that, we use the ``object_hook`` argument to ``loads()``."
msgstr ""

#: ../../PyMOTW/json/index.rst:250
# b337c17e68744d1ba8cdf6abceb25bf3
msgid "The ``object_hook`` is called for each dictionary decoded from the incoming data stream, giving us a chance to convert the dictionary to another type of object.  The hook function should return the object it wants the calling application to receive instead of the dictionary."
msgstr ""

#: ../../PyMOTW/json/index.rst:259
# 27dd0fedf1034f669965f63751fa02c0
msgid "Since :mod:`json` converts string values to unicode objects, we need to re-encode them as ASCII strings before using them as keyword arguments to the class constructor."
msgstr ""

#: ../../PyMOTW/json/index.rst:278
# 10e8f68f122e4b408234b122953dd96c
msgid "Similar hooks are available for the built-in types integers (``parse_int``), floating point numbers (``parse_float``), and constants (``parse_constant``)."
msgstr ""

#: ../../PyMOTW/json/index.rst:283
# 777e187725164c56b7c07738e1c57525
msgid "Encoder and Decoder Classes"
msgstr ""

#: ../../PyMOTW/json/index.rst:285
# 373a6e30ce304d3d8871be7578ed65fe
msgid "Besides the convenience functions we have already examined, the :mod:`json` module provides classes for encoding and decoding.  When using the classes directly, you have access to extra APIs and can create subclasses to customize their behavior."
msgstr ""

#: ../../PyMOTW/json/index.rst:290
# 36b30296cdf8406f920e5a14343bbc89
msgid "The JSONEncoder provides an iterable interface for producing \"chunks\" of encoded data, making it easier for you to write to files or network sockets without having to represent an entire data structure in memory."
msgstr ""

#: ../../PyMOTW/json/index.rst:299
# 790f60b812614f13a25d64070091e39a
msgid "As you can see, the output is generated in logical units, rather than being based on any size value."
msgstr ""

#: ../../PyMOTW/json/index.rst:330
# 0828c4c871324e5ba23777017f1a884a
msgid "The ``encode()`` method is basically equivalent to ``''.join(encoder.iterencode())``, with some extra error checking up front."
msgstr ""

#: ../../PyMOTW/json/index.rst:334
# f0b89c44192948479d7e86eead0547a8
msgid "To encode arbitrary objects, we can override the ``default()`` method with an implementation similar to what we used above in ``convert_to_builtin_type()``."
msgstr ""

#: ../../PyMOTW/json/index.rst:342
# f4f06b8ef23e4cb39f23f8b5207302ba
msgid "The output is the same as the previous implementation."
msgstr ""

#: ../../PyMOTW/json/index.rst:358
# 06dcbb91c4584e7ea5a5517f2840fb77
msgid "Decoding text, then converting the dictionary into an object takes a little more work to set up than our previous implementation, but not much."
msgstr ""

#: ../../PyMOTW/json/index.rst:366
# 57ff3dfa5f6b44188b087dbe60318dc7
msgid "And the output is the same as the earlier example."
msgstr ""

#: ../../PyMOTW/json/index.rst:384
# e9684ac8342f46ae9016c28a7e33a6e3
msgid "Working with Streams and Files"
msgstr ""

#: ../../PyMOTW/json/index.rst:386
# 77c0dbda1b6c497e85d6ffd7e4adc78e
msgid "In all of the examples so far, we have assumed that we could (and should) hold the encoded version of the entire data structure in memory at one time.  With large data structures it may be preferable to write the encoding directly to a file-like object.  The convenience functions ``load()`` and ``dump()`` accept references to a file-like object to use for reading or writing."
msgstr ""

#: ../../PyMOTW/json/index.rst:397
# ef873657e5d14f90b8a20d3bf5601b0e
msgid "A socket would work in much the same way as the normal file handle used here."
msgstr ""

#: ../../PyMOTW/json/index.rst:412
# e0b943ca3dba4d19937c601913de381a
msgid "Although it isn't optimized to read only part of the data at a time, the ``load()`` function still offers the benefit of encapsulating the logic of generating objects from stream input."
msgstr ""

#: ../../PyMOTW/json/index.rst:434
# 515faa5f9ba84e27b2d575ad11ef5a37
msgid "Mixed Data Streams"
msgstr ""

#: ../../PyMOTW/json/index.rst:436
# 1957204b0170413fbb5899a3b25b8760
msgid "The JSONDecoder includes the ``raw_decode()`` method for decoding a data structure followed by more data, such as JSON data with trailing text.  The return value is the object created by decoding the input data, and an index into that data indicating where decoding left off."
msgstr ""

#: ../../PyMOTW/json/index.rst:445
# dc24d3ef2bb24886ab28ba36a6887456
msgid "Unfortunately, this only works if the object appears at the beginning of the input."
msgstr ""

#: ../../PyMOTW/json/index.rst:470
# ad16a21250c24212af91ed4046bb97e8
msgid "`json <http://docs.python.org/library/json.html>`_"
msgstr ""

#: ../../PyMOTW/json/index.rst:470
# 22386c4572744d35944d471fa1bef503
msgid "The standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/json/index.rst:473
# 1223110352c84a89ae42bd40be9fedd4
msgid "`JavaScript Object Notation`_"
msgstr ""

#: ../../PyMOTW/json/index.rst:473
# 2c80bd34925840d3b52d0291c4be6b7c
msgid "JSON home, with documentation and implementations in other languages."
msgstr ""

#: ../../PyMOTW/json/index.rst:479
# b1beb6cce39442c8b5d1b0758d652402
msgid "http://code.google.com/p/simplejson/"
msgstr ""

#: ../../PyMOTW/json/index.rst:476
# adc99b6b56bb475c9733b6f70b998466
msgid "simplejson, from Bob Ippolito, et al, is the externally maintained development version of the json library included with Python 2.6 and Python 3.0. It maintains backwards compatibility with Python 2.4 and Python 2.5."
msgstr ""

#: ../../PyMOTW/json/index.rst:482
# 1d46f2574f384d68a6d63f74d1faa0d4
msgid "`jsonpickle <http://code.google.com/p/jsonpickle/>`_"
msgstr ""

#: ../../PyMOTW/json/index.rst:482
# 6bbe361b886347b5a10cbb33661dd0ab
msgid "jsonpickle allows for any Python object to be serialized into JSON."
msgstr ""

#: ../../PyMOTW/json/index.rst:484
# c88342ed1dcd413f8e0f13246095ad31
msgid ":ref:`article-data-persistence`"
msgstr ""

#: ../../PyMOTW/json/index.rst:485
# 3628e0e1790a40dba7e8a4dba7b22f21
msgid "Other examples of storing data from Python programs."
msgstr ""

