# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/sys/imports.rst:5
# cd8aa4023e31447bbe8b38f5354d08bd
msgid "Modules and Imports"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:7
# 8a5e6fc4ec134af4ac92e064e181eae4
msgid "Most Python programs end up as a combination of several modules with a main application importing them. Whether using the features of the standard library, or organizing custom code in separate files to make it easier to maintain, understanding and managing the dependencies for a program is an important aspect of development. :mod:`sys` includes information about the modules available to an application, either as built-ins or after being imported.  It also defines hooks for overriding the standard import behavior for special cases."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:19
# e6a78959925f4893a5dc84524361b111
msgid "Imported Modules"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:21
# edc5b077a9c0485a8c91657d71d2c8f6
msgid ":data:`sys.modules` is a dictionary mapping the names of imported modules to the module object holding the code."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:28
# 365f2a542de240c6983b547e5eab847e
msgid "The contents of :data:`sys.modules` change as new modules are imported."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:52
# 2e7d67e593c54ee2a043a1570f65e9b8
msgid "Built-in Modules"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:54
# 3e64af5193564f83ad9e168c6b00cda3
msgid "The Python interpreter can be compiled with some C modules built right in, so they do not need to be distributed as separate shared libraries. These modules don't appear in the list of imported modules managed in :data:`sys.modules` because they were not technically imported. The only way to find the available built-in modules is through :data:`sys.builtin_module_names`."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:65
# 6d7cdeba114e40eaa086074dd078d98d
msgid "The output of this script will vary, especially if run with a custom-built version of the interpreter.  This output was created using a copy of the interpreter installed from the standard python.org installer for OS X."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:91
# b729d18fa0434eebaa02a722ebde7555
msgid "`Build instructions <http://svn.python.org/view/python/trunk/README?view=markup>`_"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:92
# 52a7be5510954e6a92f44eb292a379cd
msgid "Instructions for building Python, from the README distributed with the source."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:97
# 16e2a0c2a0a04b3fb050d7151e270c7d
msgid "Import Path"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:99
# b953d6d43acd472c8820aadefb824cad
msgid "The search path for modules is managed as a Python list saved in :data:`sys.path`. The default contents of the path include the directory of the script used to start the application and the current working directory."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:108
# 95f90e62885441ceb0219778f0fb82fc
msgid "The first directory in the search path is the home for the sample script itself. That is followed by a series of platform-specific paths where compiled extension modules (written in C) might be installed, and then the global ``site-packages`` directory is listed last."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:125
# c92058f31b33466c8db3f130742fa933
msgid "The import search path list can be modified before starting the interpreter by setting the shell variable :data:`PYTHONPATH` to a colon-separated list of directories."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:142
# 3cd8acb8c5d3473d9d48515c2d6349d1
msgid "A program can also modify its path by adding elements to :data:`sys.path` directly."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:149
# d066c6d933264c0faa0ebd0b70d9b8de
msgid "Reloading an imported module re-imports the file, and uses the same :class:`module` object to hold the results.  Changing the path between the initial import and the call to :func:`reload` means a different module may be loaded the second time."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:172
# 5f99c76e14ca4a1cbcda010c553dd811
msgid "Custom Importers"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:174
# 70e3cbdea3934481b433c18b9b3c7207
msgid "Modifying the search path lets a programmer control how standard Python modules are found, but what if a program needs to import code from somewhere other than the usual ``.py`` or ``.pyc`` files on the filesystem? :pep:`302` solves this problem by introducing the idea of *import hooks* that can trap an attempt to find a module on the search path and take alternative measures to load the code from somewhere else or apply pre-processing to it."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:183
# 8b74cf9696db41b7ad7c6e9d2dec1cd2
msgid "Finders"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:185
# 1a98b7121b6544bcb50c256eecd28d2a
msgid "Custom importers are implemented in two separate phases. The *finder* is responsible for locating a module and providing a *loader* to manage the actual import. Adding a custom module finder is as simple as appending a factory to the :data:`sys.path_hooks` list. On import, each part of the path is given to a finder until one claims support (by not raising :ref:`ImportError <exceptions-ImportError>`). That finder is then responsible for searching data storage represented by its path entry for named modules."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:198
# 7bcbcd025d71470aaeb7cec1be7aded4
msgid "This example illustrates how the finders are instantiated and queried. The :class:`NoisyImportFinder` raises :ref:`ImportError <exceptions-ImportError>` when instantiated with a path entry that does not match its special trigger value, which is obviously not a real path on the filesystem. This test prevents the :class:`NoisyImportFinder` from breaking imports of real modules."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:221
# 1f66d6018a974446a9b9483d60914104
msgid "Importing from a Shelve"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:223
# d4b81d460332491c98fcce01cbe66411
msgid "When the finder locates a module, it is responsible for returning a *loader* capable of importing that module.  This example illustrates a custom importer that saves its module contents in a database created by :mod:`shelve`."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:228
# 9e119b72842244e392b00851a13c2575
msgid "The first step is to create a script to populate the shelf with a package containing a sub-module and sub-package."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:235
# 07d00de15d9e45cba21dc0ceadfb539e
msgid "A real packaging script would read the contents from the filesystem, but using hard-coded values is sufficient for a simple example like this."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:257
# 2c38839650904ad7b0dfada5c660c3c4
msgid "Next, it needs to provide finder and loader classes that know how to look in a shelf for the source of a module or package."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:264
# 57f6e325b4d345798a9882729633f4db
msgid "Now :class:`ShelveFinder` and :class:`ShelveLoader` can be used to import code from a shelf. For example, importing the :mod:`package` created above:"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:272
# 3bbfadc11c9a43dca06d8640674b0082
msgid "The shelf is added to the import path the first time an import occurs after the path is modified. The finder recognizes the shelf and returns a loader, which is used for all imports from that shelf. The initial package-level import creates a new module object and then execs the source loaded from the shelf, using the new module as the namespace so that names defined in the source are preserved as module-level attributes."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:317
# 52213197bbd94c2eb7eb08b0e6bb7c14
msgid "Packages"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:319
# 4eb95590c6194b14a876ad4b46d37f8d
msgid "The loading of other modules and sub-packages proceeds in the same way."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:400
# 5cc57710eef5495695c7aefa199602b3
msgid "Reloading"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:402
# 86e827d3e872449dbb4a98b487cabbb9
msgid "Reloading a module is handled slightly differently. Instead of creating a new module object, the existing module is re-used."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:409
# b1b7f9716ead450ea3e9708e393b8239
msgid "By re-using the same object, existing references to the module are preserved even if class or function definitions are modified by the reload."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:449
# d3055361ad084eda867996219a2dca49
msgid "Import Errors"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:451
# 3465f69e673c406b9cb62ee524cd73ff
msgid "When a module cannot be located by any finder, :ref:`ImportError <exceptions-ImportError>` is raised by the main import code."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:458
# fa12dcca7cd2435ca5c24902d8c88618
msgid "Other errors during the import are propagated."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:489
# 8f4ca004dd074785bc928726eabc05e4
msgid "Package Data"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:491
# a4da0ab3ac1542c697ca84800ae35a55
msgid "In addition to defining the API loading executable Python code, :pep:`302` defines an optional API for retrieving package data intended for distributing data files, documentation, and other non-code resources used by a package. By implementing :func:`get_data`, a loader can allow calling applications to support retrieval of data associated with the package without considering how the package is actually installed (especially without assuming that the package is stored as files on a filesystem)."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:504
# 468ffa8a14e149d889a37eacaef8b04d
msgid ":func:`get_data` takes a path based on the module or package that owns the data, and returns the contents of the resource \"file\" as a string, or raises :ref:`IOError <exceptions-IOError>` if the resource does not exist."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:547
# 76115431afcc4aba808c384defa57a69
msgid ":mod:`pkgutil`"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:548
# a802ffe2938344cc851ca89308cc2adf
msgid "Includes :func:`get_data` for retrieving data from a package."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:551
# b453cfb836de4b1f88353aafb35253bc
msgid "Importer Cache"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:553
# e7c7dc6729e747279ed3ae0bef7a8a76
msgid "Searching through all of the hooks each time a module is imported can become expensive. To save time, :data:`sys.path_importer_cache` is maintained as a mapping between a path entry and the loader that can use the value to find modules."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:562
# f4b22ca194874596ad2ce6fefb0a6635
msgid "A cache value of ``None`` means to use the default filesystem loader. Each missing directory is associated with an :class:`imp.NullImporter` instance, since modules cannot be imported from directories that do not exist. In the example output below, several :class:`zipimport.zipimporter` instances are used to manage EGG files found on the path."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:619
# 72f0ec76fc4c432fbc2dc3037eadc972
msgid "Meta Path"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:621
# 360011a4562e4ef0a7ecaed06206db3f
msgid "The :data:`sys.meta_path` further extends the sources of potential imports by allowing a finder to be searched *before* the regular :data:`sys.path` is scanned. The API for a finder on the meta-path is the same as for a regular path. The difference is that the meta-finder is not limited to a single entry in :data:`sys.path`, it can search anywhere at all."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:632
# be97ea8467544d8b90b46b750a7e581f
msgid "Each finder on the meta-path is interrogated before :data:`sys.path` is searched, so there is always an opportunity to have a central importer load modules without explicitly modifying :data:`sys.path`. Once the module is \"found\", the loader API works in the same way as for regular loaders (although this example is truncated for simplicity)."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:667
# 9acd82420d9248ff85f1c41b26c4ee9a
msgid ":pep:`302`"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:667
# 1a70bb0ad5874f3e800fe58833453b32
msgid "Import Hooks"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:670
# 90ac3ebe836248c7bcfb1f8a0b890222
msgid ":mod:`imp`"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:670
# 4caaba542a494e38bb1f1a2d31adb4c2
msgid "The imp module provides tools used by importers."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:673
# 1ae5cbd8267541809cefed45845bc4b7
msgid ":mod:`zipimport`"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:673
# c4c759133ef94d69bf2d80901a61c6fb
msgid "Implements importing Python modules from inside ZIP archives."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:676
# 5076f155c6364959b98f69b091b3b983
msgid ":mod:`importlib`"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:676
# b46d7ab7ce714ff0860f8690c8f8af47
msgid "Base classes and other tools for creating custom importers."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:679
# 602d8ec625cd439bb80d092cb07612ef
msgid "`The Quick Guide to Python Eggs <http://peak.telecommunity.com/DevCenter/PythonEggs>`_"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:679
# f603981002a94ec88860392aae061705
msgid "PEAK documentation for working with EGGs."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:682
# 7068e2fea56c4b1a9e4de65b48c8e4f6
msgid "`Import this, that, and the other thing: custom importers <http://us.pycon.org/2010/conference/talks/?filter=core>`_"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:682
# cbf31a78b13e484d8926a1fb0cd2cdea
msgid "Brett Cannon's PyCon 2010 presentation."
msgstr ""

#: ../../PyMOTW/sys/imports.rst:684
# f2fe99e0372a4fc98436048ca97d5408
msgid "`Python 3 stdlib module \"importlib\" <http://docs.python.org/py3k/library/importlib.html>`_"
msgstr ""

#: ../../PyMOTW/sys/imports.rst:685
# d33ee78fd362419fb731cb349b5fe445
msgid "Python 3.x includes abstract base classes that makes it easier to create custom importers."
msgstr ""

