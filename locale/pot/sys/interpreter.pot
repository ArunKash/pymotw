# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/sys/interpreter.rst:5
# 0a1ea890e5074032be2c7df23e1d51ce
msgid "Interpreter Settings"
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:7
# 8e618153aebd4bd39e3bc9f914560733
msgid ":mod:`sys` contains attributes and functions for accessing compile-time or runtime configuration settings for the interpreter."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:13
# 6991293b0fa048079b39eeddd3e778fa
msgid "Build-time Version Information"
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:15
# 6cdfdd81d714468e89ba26a373fd62fe
msgid "The version used to build the C interpreter is available in a few forms.  :const:`sys.version` is a human-readable string that usually includes the full version number as well as information about the build date, compiler, and platform.  :const:`sys.hexversion` is easier to use for checking the interpreter version since it is a simple integer.  When formatted using :func:`hex`, it is clear that parts of :const:`sys.hexversion` come from the version information also visible in the more readable :const:`sys.version_info` (a 5-part tuple representing just the version number)."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:25
# 30efaa4fd5d84e7aab3ba047357ac730
msgid "More specific information about the source that went into the build can be found in the :const:`sys.subversion` tuple, which includes the actual branch and subversion revision that was checked out and built. The separate C API version used by the current interpreter is saved in :const:`sys.api_version`."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:35
# a2fd5aece59249b8be2f0d6e813efef4
msgid "All of the values depend on the actual interpreter used to run the sample program, of course."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:70
# df8a7ce7dfba4742bc776f649c277658
msgid "The operating system platform used to build the interpreter is saved as :const:`sys.platform`."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:77
# 66766c3b48d84a8eba6d8762e4adc2e5
msgid "For most Unix systems, the value comes from combining the output of ``uname -s`` with the first part of the version in ``uname -r``. For other operating systems there is a `hard-coded table of values <http://docs.python.org/library/sys.html#sys.platform>`_."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:97
# ea96b23179c34f98822a7f09ecfb04f3
msgid "Install Location"
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:99
# 7c235706e54a474bab7fb03e7c3223bf
msgid "The path to the actual interpreter program is available in :const:`sys.executable` on all systems for which having a path to the interpreter makes sense.  This can be useful for ensuring that the *correct* interpreter is being used, and also gives clues about paths that might be set based on the interpreter location."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:105
# 21e2913db22a425998c258cfd4e371b2
msgid ":const:`sys.prefix` refers to the parent directory of the interpreter installation.  It usually includes ``bin`` and ``lib`` directories for executables and installed modules, respectively."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:115
# 336307334e164dde9b7e08c93c0f32ae
msgid "This example output was produced on a Mac running a framework build installed from python.org.  Other versions may produce different path information, even on a Mac."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:134
# ff7218d9b4d04cfbb5dabc359cdac47e
msgid "Command Line Options"
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:136
# 5ad36e5c12cf46c89495d71ed53dbee0
msgid "The CPython interpreter accepts several command line options to control its behavior."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:194
# 036700d441a942179093e5e8f81c3208
msgid "Some of these are available for programs to check through :const:`sys.flags`."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:201
# 364fc2da1e5d40448c1ac1bbcaaa171e
msgid "Experiment with ``sys_flags.py`` to learn how the command line options map to the flags settings."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:224
# 4f816c498567408faea043b505f8b874
msgid "Unicode Defaults"
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:226
# 421e9d8b4a3a435d95028efb853e1de4
msgid "To get the name of the default Unicode encoding being used by the interpreter, use :func:`getdefaultencoding`.  The value is set during startup by :mod:`site`, which calls :func:`sys.setdefaultencoding` and then removes it from the namespace in :mod:`sys` to avoid having it called again."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:232
# cdd67d1c4eaf42d6ab6c6d7f69dfde65
msgid "The internal encoding default and the filesystem encoding may be different for some operating systems, so there is a separate way to retrieve the filesystem setting.  :func:`getfilesystemencoding` returns an OS-specific (*not* filesystem-specific) value."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:241
# b6d368f56c274bc3bca9fb8c0fc918c5
msgid "Rather than changing the global default encoding, most Unicode experts recommend making an application explicitly Unicode-aware. This provides two benefits: Different Unicode encodings for different data sources can be handled more cleanly, and the number of assumptions about encodings in the application code is reduced."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:262
# efa0f56f55ff47828496cf8c6366a104
msgid "Interactive Prompts"
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:264
# c104259d291d4d929c8168e7b981026c
msgid "The interactive interpreter uses two separate prompts for indicating the default input level (:data:`ps1`) and the \"continuation\" of a multi-line statement (:data:`ps2`).  The values are only used by the interactive interpreter."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:278
# 978cdd3a8fe34afaafd9fd58667d41b3
msgid "Either or both prompt can be changed to a different string"
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:292
# 93a950766f5f4fd3812d1145f0864cd5
msgid "Alternately, any object that can be converted to a string (via ``__str__``) can be used for the prompt."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:299
# c321ac3d25234fbfb726018f29d1b302
msgid "The :class:`LineCounter` keeps track of how many times it has been used, so the number in the prompt increases each time."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:316
# 7123b0daff76454fb181311756d61800
msgid "Display Hook"
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:318
# 623c8da96f5044d28424b15efcbec978
msgid ":data:`sys.displayhook` is invoked by the interactive interpreter each time the user enters an expression.  The *result* of the expression is passed as the only argument to the function."
msgstr ""

#: ../../PyMOTW/sys/interpreter.rst:326
# 654fc93c22964e7095c08e2344473b2a
msgid "The default value (saved in :data:`sys.__displayhook__`) prints the result to stdout and saves it in :data:`__builtin__._` for easy reference later."
msgstr ""

