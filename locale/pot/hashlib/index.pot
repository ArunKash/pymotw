# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/hashlib/index.rst:3
# 1244fe5bc80a45f49bf45dadd1887546
msgid "hashlib -- Cryptographic hashes and message digests"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:8
# 74385b6531bd4f259e9ae60a3ffb6893
msgid "Cryptographic hashes and message digests"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:9
# ddad1580ef8144139ae39468ff2c65f5
msgid "2.5"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:11
# 72325da663fd428293bfc13920956aac
msgid "The :mod:`hashlib` module deprecates the separate :mod:`md5` and :mod:`sha` modules and makes their API consistent. To work with a specific hash algorithm, use the appropriate constructor function to create a hash object. Then you can use the same API to interact with the hash no matter what algorithm is being used."
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:17
# d17f7bba9c874db9b4ecc8b0efe5ca12
msgid "Since :mod:`hashlib` is \"backed\" by OpenSSL, all of of the algorithms provided by that library are available, including:"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:20
# 6d48d9c270a94568ac132be47b81384f
msgid "md5"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:21
# f69274985fee4616aebcae038eefe868
msgid "sha1"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:22
# bafa0efec4744a6f9e41c1ea638776cc
msgid "sha224"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:23
# 726955d1202d467689a21bc0829a97d4
msgid "sha256"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:24
# 056fb493ca054fb7986495b38e02b87f
msgid "sha384"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:25
# 4d7514a4de174ade93a9cd96b7b6d371
msgid "sha512"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:28
# 6b2a4e7f30ae4b0fb950e5ce66ef56a4
msgid "Sample Data"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:30
# be1d172d4529400883c4f4ce1a544ccd
msgid "All of the examples below use the same sample data:"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:38
# 34cdcff04439451d9af5d5614a1bbae9
msgid "MD5 Example"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:40
# 6f0dad228b6c441cb7e1a660aa78ef5b
msgid "To calculate the MD5 digest for a block of data (here an ASCII string), create the hash object, add the data, and compute the digest."
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:47
# bc825345ba714d7d9250f1bccee6d30b
msgid "This example uses the :func:`hexdigest()` method instead of :func:`digest()` because the output is formatted to be printed. If a binary digest value is acceptable, you can use :func:`digest()`."
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:64
# 63d349acc06f47d4abe9a06b101d6a45
msgid "SHA1 Example"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:66
# 511a08224ec74aac83a8e8546af504c6
msgid "A SHA1 digest for the same data would be calculated in much the same way."
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:72
# 58c8f7b7c9e04be09f45dc180ebb41fa
msgid "The digest value is different in this example because we changed the algorithm from MD5 to SHA1"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:89
# 3322c80e27834df08a9b13416ebf64e8
msgid "new()"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:91
# b41efdd9a1134e58a899d5f92f73b8da
msgid "Sometimes it is more convenient to refer to the algorithm by name in a string rather than by using the constructor function directly. It is useful, for example, to be able to store the hash type in a configuration file. In those cases, use :func:`new()` to create a hash calculator."
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:101
# e11772a0aa3242e5b4549e05dbac9a67
msgid "When run with a variety of arguments:"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:132
# 82c21e98d44a4550a246ffe157aefe96
msgid "Calling update() more than once"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:134
# 1a3d1ca9b0224bb7b359b394c23fe6ab
msgid "The :func:`update()` method of the hash calculators can be called repeatedly. Each time, the digest is updated based on the additional text fed in. This can be much more efficient than reading an entire file into memory, for example."
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:143
# fe41e0861ccd49aba8bfaf1add08610d
msgid "This example is a little contrived because it works with such a small amount of text, but it illustrates how you could incrementally update a digest as data is read or otherwise produced."
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:164
# e22fb05ffbc84439a33f2b4e539141b0
msgid "`hashlib <http://docs.python.org/library/hashlib.html>`_"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:164
# 9fa98a22495747aca4f9eee3c21a89da
msgid "The standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:167
# ad482db0174e41639160daff047abcc4
msgid "`Voidspace: IronPython and hashlib <http://www.voidspace.org.uk/python/weblog/arch_d7_2006_10_07.shtml#e497>`_"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:167
# 7c5e21b20889453a843afa4bd90832b5
msgid "A wrapper for :mod:`hashlib` that works with IronPython."
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:169
# 020ab49d6eb2412dbd9678273c403e2e
msgid ":mod:`hmac`"
msgstr ""

#: ../../PyMOTW/hashlib/index.rst:170
# 64737e56a04c46c8af96372a94bc7ca3
msgid "The :mod:`hmac` module."
msgstr ""

