# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/SocketServer/index.rst:3
# 3dd852de46a745a48894b0929ed6a30b
msgid "SocketServer -- Creating network servers."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:8
# bf28b072b28041cc858ac9097dae8e51
msgid "Creating network servers."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:9
# db8f388b7bb04e4c8a70c845bb6b413a
msgid "1.4"
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:11
# 8b7c125da2274293919b56009aa87aa4
msgid "The :mod:`SocketServer` module is a framework for creating network servers. It defines classes for handling synchronous network requests (the server request handler blocks until the request is completed) over TCP, UDP, Unix streams, and Unix datagrams. It also provides mix-in classes for easily converting servers to use a separate thread or process for each request, depending on what is most appropriate for your situation."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:19
# 207b8405f64e4868a98a206b362fb440
msgid "Responsibility for processing a request is split between a server class and a request handler class. The server deals with the communication issues (listing on a socket, accepting connections, etc.) and the request handler deals with the \"protocol\" issues (interpreting incoming data, processing it, sending data back to the client). This division of responsibility means that in many cases you can simply use one of the existing server classes without any modifications, and provide a request handler class for it to work with your protocol."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:30
# 20895167554b4099b6b6ae05b9edec4c
msgid "Server Types"
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:32
# 510704761ab54f80ac6452b949d16291
msgid "There are five different server classes defined in :mod:`SocketServer`.  :class:`BaseServer` defines the API, and is not really intended to be instantiated and used directly. :class:`TCPServer` uses TCP/IP sockets to communicate. :class:`UDPServer` uses datagram sockets. :class:`UnixStreamServer` and :class:`UnixDatagramServer` use Unix-domain sockets and are only available on Unix platforms."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:41
# 41dfa869eaf34f75bfa0390783ac2c3a
msgid "Server Objects"
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:43
# 479d3143fb674032b83d526d79b80d49
msgid "To construct a server, pass it an address on which to listen for requests and a request handler *class* (not instance). The address format depends on the server type and the socket family used. Refer to the :mod:`socket` module documentation for details."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:48
# 5ed1bf8cc4db4ec5b825f1d870a1e5ae
msgid "Once the server object is instantiated, use either :func:`handle_request()` or :func:`serve_forever()` to process requests. The :func:`serve_forever()` method simply calls :func:`handle_request()` in an infinite loop, so if you need to integrate the server with another event loop or use :func:`select()` to monitor several sockets for different servers, you could call :func:`handle_request()` on your own. See the example below for more detail."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:58
# e9d22b2c694f4617a80ec978977b8603
msgid "Implementing a Server"
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:60
# d43297b7cf834f8f904dc7643d53f5e7
msgid "If you are creating a server, it is usually possible to re-use one of the existing classes and simply provide a custom request handler class. If that does not meet your needs, there are several methods of :class:`BaseServer` available to override in a subclass:"
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:65
# 7d9dc8d95749433e934f3bc34dd07a9d
msgid "``verify_request(request, client_address)`` - Return True to process the request or False to ignore it. You could, for example, refuse requests from an IP range if you want to block certain clients from accessing the server."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:70
# f1ead278585d4abca4f501a0e6ad9a38
msgid "``process_request(request, client_address)`` - Typically just calls :func:`finish_request()` to actually do the work. It can also create a separate thread or process, as the mix-in classes do (see below)."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:74
# 9ad2d517e60742c7be97cf1278a7648f
msgid "``finish_request(request, client_address)`` - Creates a request handler instance using the class given to the server's constructor. Calls :func:`handle()` on the request handler to process the request."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:80
# f22a5a891237465d89acc19c1ea5a558
msgid "Request Handlers"
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:82
# 19f50d0dd34f46fdbeaaa1a3e8c67ab4
msgid "Request handlers do most of the work of receiving incoming requests and deciding what action to take. The handler is responsible for implementing the \"protocol\" on top of the socket layer (for example, HTTP or XML-RPC). The request handler reads the request from the incoming data channel, processes it, and writes a response back out. There are 3 methods available to be over-ridden."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:89
# a6d3a2514bf34e1d98e69efc10952362
msgid "``setup()`` - Prepare the request handler for the request. In the :class:`StreamRequestHandler`, for example, the :func:`setup()` method creates file-like objects for reading from and writing to the socket."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:94
# 97fb6be2025b4512a6d9e60ee23acb3e
msgid "``handle()`` - Do the real work for the request. Parse the incoming request, process the data, and send a response."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:97
# 4633c064422a48b39f433ca79a2825ef
msgid "``finish()`` - Clean up anything created during :func:`setup()`."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:99
# 84766718191647a7bc5edef2fa9f6a87
msgid "In many cases, you can simply provide a :func:`handle()` method."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:102
# dc936f6f68a945d885d5ada1ad6135cb
msgid "Echo Example"
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:104
# 239e9ade315041ed8187a22e448a1fb9
msgid "Let's look at a simple server/request handler pair that accepts TCP connectcions and echos back any data sent by the client. The only method that actually needs to be provided in the sample code is :func:`EchoRequestHandler.handle()`, but all of the methods described above are overridden to insert :mod:`logging` calls so the output of the sample program illustrates the sequence of calls made."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:111
# 6df5e3e97502430d9786cd6c4ecf0bee
msgid "The only thing left is to have simple program that creates the server, runs it in a thread, and connects to it to illustrate which methods are called as the data is echoed back."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:119
# b89323b1a1e04a1b93a3176b5f483cec
msgid "The output for the program should look something like this:"
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:154
# c3382e2932ef4a8289fdd02e1cf99086
msgid "The port number used will change each time you run it, as the kernel allocates an available port automatically. If you want the server to listen on a specific port each time you run it, provide that number in the address tuple instead of the ``0``."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:159
# 0f45093c585242b180b9d1a79c2229a8
msgid "Here is a simpler version of the same thing, without the :mod:`logging`:"
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:166
# 992891d56895442495221aa905509b23
msgid "In this case, no special server class is required since the :mod:`TCPServer` handles all of the server requirements."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:183
# a46ba73687684ea0908c46be6753919e
msgid "Threading and Forking"
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:185
# 6563191dd3b44db19f58f67add9bb1dc
msgid "Adding threading or forking support to a server is as simple as including the appropriate mix-in in the class hierarchy for the server. The mix-in classes override :func:`process_request()` to start a new thread or process when a request is ready to be handled, and the work is done in the new child."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:191
# 5f97becea4b142cdaa7f4aef4e474cdf
msgid "For threads, use the :class:`ThreadingMixIn`:"
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:197
# 66358c45e9554f4dac5d09df11858351
msgid "The response from the server includes the id of the thread where the request is handled:"
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:214
# 5a7b14a6e6094f09a15fa351b4589455
msgid "To use separate processes, use the :class:`ForkingMixIn`:"
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:220
# 02b15f5238c846a2bff13a5cc3f99412
msgid "In this case, the process id of the child is included in the response from the server:"
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:241
# 0ac56df764c442728570298cdf18a5d2
msgid "`SocketServer <http://docs.python.org/lib/module-SocketServer.html>`_"
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:241
# 29ec7fe664b54efab0f4fb011d7c182f
msgid "Standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:245
# 57de0a1f8dee428c9a1bf370c4c05786
msgid ":mod:`asyncore`"
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:244
# de977e142ed24ee9ae17ab07e4d38bfa
msgid "Use asyncore to create asynchronous servers that do not block while processing a request."
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:247
# 349ffaf0791b4e16b464ccc8d8dafa62
msgid ":mod:`SimpleXMLRPCServer`"
msgstr ""

#: ../../PyMOTW/SocketServer/index.rst:248
# 5e3a5dd3dd6b4ecb9e64933743f31d57
msgid "XML-RPC server built using :mod:`SocketServer`."
msgstr ""

