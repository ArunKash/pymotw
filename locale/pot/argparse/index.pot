# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/argparse/index.rst:3
# a7366f3a0ad34f5ea920aada9a9cad8e
msgid "argparse -- Command line option and argument parsing."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:8
# 4fc00dacf19340e1bb2000b4e3554200
msgid "Command line option and argument parsing."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:9
# 161c1b11da1545f48283585b6060606e
msgid "2.7 and later"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:11
# a65a61d892b847c18353899f2041f3d3
msgid "The :mod:`argparse` module was added to Python 2.7 as a replacement for :mod:`optparse`.  The implementation of :mod:`argparse` supports features that would not have been easy to add to :mod:`optparse`, and that would have required backwards-incompatible API changes, so a new module was brought into the library instead.  :mod:`optparse` is still supported, but is not likely to receive new features."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:19
# ee86dcc663fd42e5bcc210d31502f0e5
msgid "Comparing with optparse"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:21
# 880244f6fafa417dac3198deeb9db4fa
msgid "The API for :mod:`argparse` is similar to the one provided by :mod:`optparse`, and in many cases :mod:`argparse` can be used as a straightforward replacement by updating the names of the classes and methods used.  There are a few places where direct compatibility could not be preserved as new features were added, however."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:27
# c82e40c72a994e01a4992665ee849a78
msgid "You will have to decide whether to upgrade existing programs on a case-by-case basis.  If you have written extra code to work around limitations of :mod:`optparse`, you may want to upgrade to reduce the amount of code you need to maintain.  New programs should probably use argparse, if it is available on all deployment platforms."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:34
# 906806a677f942638e28ac4bb7211361
msgid "Setting up a Parser"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:36
# 789d8bc3d764443ebfc048cd70ed39fe
msgid "The first step when using :mod:`argparse` is to create a parser object and tell it what arguments to expect.  The parser can then be used to process the command line arguments when your program runs."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:40
# 3570c54f2c474db09d56c52554c66b4a
msgid "The parser class is :class:`ArgumentParser`.  The constructor takes several arguments to set up the description used in the help text for the program and other global behaviors or settings."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:51
# c15a160c121d408f92f033545eea4ce6
msgid "Defining Arguments"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:53
# 1f66fd2b7ca04295b11ea5e4451528a5
msgid ":mod:`argparse` is a complete argument *processing* library. Arguments can trigger different actions, specified by the *action* argument to :func:`add_argument()`. Supported actions include storing the argument (singly, or as part of a list), storing a constant value when the argument is encountered (including special handling for true/false values for boolean switches), counting the number of times an argument is seen, and calling a callback."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:61
# d3434d76bb3d485c801d4cf696caca2c
msgid "The default action is to store the argument value. In this case, if a type is provided, the value is converted to that type before it is stored. If the *dest* argument is provided, the value is saved to an attribute of that name on the Namespace object returned when the command line arguments are parsed."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:68
# 05ce37c56e0b49c38485ca245c929b10
msgid "Parsing a Command Line"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:70
# 062737585dc84d4e8ac5f51a57f3e6e7
msgid "Once all of the arguments are defined, you can parse the command line by passing a sequence of argument strings to :func:`parse_args()`. By default, the arguments are taken from ``sys.argv[1:]``, but you can also pass your own list. The options are processed using the GNU/POSIX syntax, so option and argument values can be mixed in the sequence."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:76
# eb44757c08064bfebe5fc763fc463570
msgid "The return value from :func:`parse_args()` is a :class:`Namespace` containing the arguments to the command. The object holds the argument values as attributes, so if your argument ``dest`` is ``\"myoption\"``, you access the value as ``args.myoption``."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:82
# 10b74b3080fb4218b4a3727826fbb09d
msgid "Simple Examples"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:84
# 0adaec5f849749b1879ccbdeec05e371
msgid "Here is a simple example with 3 different options: a boolean option (``-a``), a simple string option (``-b``), and an integer option (``-c``)."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:92
# 00399c52618e417cb63bcfcd7c93119f
msgid "There are a few ways to pass values to single character options. The example above uses two different forms, ``-bval`` and ``-c val``."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:107
# bcff99c83c9a4b9c9f54a1bdeb88f8b9
msgid "The type of the value associated with ``'c'`` in the output is an integer, since the :class:`ArgumentParser` was told to convert the argument before storing it."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:111
# e81584b6436f48379724ad579a0c50c6
msgid "\"Long\" option names, with more than a single character in their name, are handled in the same way."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:118
# fd9e9afc2b5e4a7f8ff096319574b3c1
msgid "And the results are similar:"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:132
# 930ef30afc6b4e0db25a1f3420ef034f
msgid "One area in which :mod:`argparse` differs from :mod:`optparse` is the treatment of non-optional argument values.  While :mod:`optparse` sticks to option parsing, :mod:`argparse` is a full command-line argument parser tool, and handles non-optional arguments as well."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:141
# 2ad332b84dec49d0a9faf18330471f55
msgid "In this example, the \"count\" argument is an integer and the \"units\" argument is saved as a string.  If either is not provided on the command line, or the value given cannot be converted to the right type, an error is reported."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:171
# c00cb728e9d14b7bac94fdeb362a9fc2
msgid "Argument Actions"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:173
# 7c03dc8469774a9a8a7fcc83fa1584a2
msgid "There are six built-in actions that can be triggered when an argument is encountered:"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:178
# 10466edc996f4b47a4e33fbdb15d067b
msgid "``store``"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:177
# bc1290fac47b4763a603ceba614737dc
msgid "Save the value, after optionally converting it to a different type. This is the default action taken if none is specified expliclity."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:183
# 45965d1bfb374389ba59303f823fd177
msgid "``store_const``"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:181
# 072cce316de7486eb501ac52609bcb66
msgid "Save a value defined as part of the argument specification, rather than a value that comes from the arguments being parsed.  This is typically used to implement command line flags that aren't booleans."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:187
# 0ffc51440a1345029db4389fc8ffbb00
msgid "``store_true`` / ``store_false``"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:186
# c6c57b09bd4048538a16a7bb936de36d
msgid "Save the appropriate boolean value.  These actions are used to implement boolean switches."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:191
# f56634afe9ab436c8552dd22a6b22440
msgid "``append``"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:190
# b34da5ac60e3433bbdad67f493bd9b6d
msgid "Save the value to a list.  Multiple values are saved if the argument is repeated."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:194
# a48eb45936b447b3aa4d9b8fb31eb649
msgid "``append_const``"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:194
# 843190c6bbdb4b3e8c48f076b210ced9
msgid "Save a value defined in the argument specification to a list."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:197
# c62871430e8347f0b2c2498ce3e0b026
msgid "``version``"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:197
# 4700ded5f73047878a512731f797c075
msgid "Prints version details about the program and then exits."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:289
# 3b853ae1292f4b4c8e2bf9fdec295f2b
msgid "Option Prefixes"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:291
# ad3812df076c4760923ee89f3f9a4694
msgid "The default syntax for options is based on the Unix convention of signifying command line switches using a prefix of \"-\". :mod:`argparse` supports other prefixes, so you can make your program conform to the local platform default (i.e., use \"/\" on Windows) or follow a different convention."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:301
# 20f9c3194b6c414e981a8d6a54fe7c59
msgid "Set the *prefix_chars* parameter for the :class:`ArgumentParser` to a string containing all of the characters that should be allowed to signify options.  It is important to understand that although *prefix_chars* establishes the allowed switch characters, the individual argument definitions specify the syntax for a given switch. This gives you explicit control over whether options using different prefixes are aliases (such as might be the case for platform-independent command line syntax) or alternatives (e.g., using \"``+``\" to indicate turning a switch on and \"``-``\" to turn it off). In the example above, ``+a`` and ``-a`` are separate arguments, and ``//noarg`` can also be given as ``++noarg``, but not ``--noarg``."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:361
# f9f35915d5854a3d8b2ba10eb8fda051
msgid "Sources of Arguments"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:363
# a98d5dbbb20848cea8da2909bdba650b
msgid "In the examples so far, the list of arguments given to the parser have come from a list passed in explicitly, or were taken implicitly from :ref:`sys.argv <sys-argv>`.  Passing the list explicitly is useful when you are using :mod:`argparse` to process command line-like instructions that do not come from the command line (such as in a configuration file)."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:374
# 6a7c4ca3b060441fac6262356dc8ae71
msgid ":mod:`shlex` makes it easy to split the string stored in the configuration file."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:391
# b77a183570c148a7b58a62ac71fe992f
msgid "An alternative to processing the configuration file yourself is to tell :mod:`argparse` how to recognize an argument that specifies an input file containing a set of arguments to be processed using *fromfile_prefix_chars*."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:400
# cdf300272f084169a218e2e67c7361c2
msgid "This example stops when it finds an argument prefixed with ``@``, then reads the named file to find more arguments.  For example, an input file ``argparse_fromfile_prefix_chars.txt`` contains a series of arguments, one per line:"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:408
# 8970e09fe6714d4899e650414d60faa7
msgid "The output produced when processing the file is:"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:423
# 755732559e7648b381738101a842091b
msgid "Automatically Generated Options"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:425
# 5eb3b16c73cc4d218f02ce970a8b948d
msgid ":mod:`argparse` will automatically add options to generate help and show the version information for your application, if configured to do so."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:429
# 260fbdd80a7a4a89ba4c9b6b2ed08f12
msgid "The *add_help* argument to :class:`ArgumentParser` controls the help-related options."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:436
# 8f725f3558c445d1828fca7410931344
msgid "The help options (``-h`` and ``--help``) are added by default, but can be disabled by setting *add_help* to false."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:443
# 34dc2bfdceaf4a5eba399e14eef41d02
msgid "Although ``-h`` and ``--help`` are defacto standard option names for requesting help, some applications or uses of :mod:`argparse` either don't need to provide help or need to use those option names for other purposes."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:472
# f5e7acd73fc54677b1fd9ea75189c5f1
msgid "The version options (``-v`` and ``--version``) are added when *version* is set in the :class:`ArgumentParser` constructor."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:479
# 34fc619066f04a50b6275f0bae360210
msgid "Both forms of the option print the program's version string, then cause it to exit immediately."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:512
# dacac4668ce2417c8d5cfb6760431ff8
msgid "Parser Organization"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:514
# 4f2c081e91be4748a68d28ac93d05ad6
msgid ":mod:`argparse` includes several features for organizing your argument parsers, to make implementation easier or to improve the usability of the help output."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:519
# b21a4ab3be284fb0986982c70326dae9
msgid "Sharing Parser Rules"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:521
# 1de09fbcbcf54ea0ac8d1da3a58e57b4
msgid "It is common to need to implement a suite of command line programs that all take a set of arguments, and then specialize in some way. For example, if the programs all need to authenticate the user before taking any real action, they would all need to support ``--user`` and ``--password`` options.  Rather than add the options explicitly to every :class:`ArgumentParser`, you can define a \"parent\" parser with the shared options, and then have the parsers for the individual programs inherit from its options."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:530
# a0123202ea0a447781a3b23aa7a70362
msgid "The first step is to set up the parser with the shared argument definitions.  Since each subsequent user of the parent parser is going to try to add the same help options, causing an exception, we turn off automatic help generation in the base parser."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:539
# fcd4590a37674055941d7076db3c2e61
msgid "Next, create another parser with *parents* set:"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:545
# 428736e0911446e688d3582da9fab8b8
msgid "And the resulting program takes all three options:"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:568
# b8ec7c06850d4b17a86b063fb7b46b4b
msgid "Conflicting Options"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:570
# 200dd9a92f7049a089a18d1a4039f161
msgid "The previous example pointed out that adding two argument handlers to a parser using the same argument name causes an exception.  Change the conflict resolution behavior by passing a *conflict_handler*.  The two built-in handlers are ``error`` (the default), and ``resolve``, which picks a handler based on the order they are added."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:580
# 13488db151ea408989f3a662d80bd43c
msgid "Since the last handler with a given argument name is used, in this example the stand-alone option ``-b`` is masked by the alias for ``--long-b``."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:602
# a6d92e67a82341f1b6bdd6a1fdad1b5c
msgid "Switching the order of the calls to :func:`add_argument` unmasks the stand-alone option:"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:609
# 9f8ed051ec414e7eb0e5d61c84cc48fa
msgid "Now both options can be used together."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:631
# 1f192392706a4ea096ff804514c8e727
msgid "Argument Groups"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:633
# 62ca52c1d68046be92a763b480cd37bf
msgid ":mod:`argparse` combines the argument definitions into \"groups.\"  By default, it uses two groups, with one for options and another for required position-based arguments."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:641
# 29b9f638a22f439080af96d91e72bdd1
msgid "The grouping is reflected in the separate \"positional arguments\" and \"optional arguments\" section of the help output:"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:665
# 17872595dcf4485cb339c929a2561269
msgid "You can adjust the grouping to make it more logical in the help, so that related options or values are documented together.  The shared-option example from earlier could be written using custom grouping so that the authentication options are shown together in the help."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:671
# c9b6b14802b748ea83f31da2425b7997
msgid "Create the \"authentication\" group with :func:`add_argument_group` and then add each of the authentication-related options to the group, instead of the base parser."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:679
# ee1b4b67b3634c26a6c366067c2e9c4c
msgid "The program using the group-based parent lists it in the *parents* value, just as before."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:686
# ccae8976b68a42c7b8707ed400f17125
msgid "The help output now shows the authentication options together."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:710
# 10f4bcce590445a5802edd1dc7a90637
msgid "Mutually Exclusive Options"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:712
# fb6aca80a8ff4fea801cf268dedb7fc6
msgid "Defining mutually exclusive options is a special case of the option grouping feature, and uses :func:`add_mutually_exclusive_group` instead of :func:`add_argument_group`."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:720
# 395ab7e46ed1484c9e58e437af8c3b44
msgid ":mod:`argparse` enforces the mutal exclusivity for you, so that only one of the options from the group can be given."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:757
# 98908cc3217643a78aa38e06998dc797
msgid "Nesting Parsers"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:759
# d12407c4510e4347923af1b4c83c4e1b
msgid "The parent parser approach described above is one way to share options between related commands.  An alternate approach is to combine the commands into a single program, and use subparsers to handle each portion of the command line.  The result works in the way ``svn``, ``hg``, and other programs with multiple command line actions, or sub-commands, does."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:766
# 986125bf2df148a7971de90948bd9d43
msgid "A program to work with directories on the filesystem might define commands for creating, deleting, and listing the contents of a directory like this:"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:774
# 56db5c3e7afe4dc6b4be24c14b17c1c9
msgid "The help output shows the named subparsers as \"commands\" that can be specified on the command line as positional arguments."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:798
# 9519208d977c4ea7a856062706e5c003
msgid "Each subparser also has its own help, describing the arguments and options for that command."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:820
# b86844a959574684b7a270f0303b3224
msgid "And when the arguments are parsed, the :class:`Namespace` object returned by :func:`parse_args` includes only the values related to the command specified."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:838
# d4c63d16cc6b445eb259f92d607e8c1c
msgid "Advanced Argument Processing"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:840
# 6644f86bb76a4c2e814a757196b89a70
msgid "The examples so far have shown simple boolean flags, options with string or numerical arguments, and positional arguments. :mod:`argparse` supports sophisticated argument specification for variable-length argument list, enumerations, and constant values as well."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:847
# 3916d6ec08c9434887855ae4ba7cd17b
msgid "Variable Argument Lists"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:849
# c10c701f8c214a81829f7485dac8d5cf
msgid "You can configure a single argument defintion to consume multiple arguments on the command line being parsed.  Set *nargs* to one of these flag values, based on the number of required or expected arguments:"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:855
# 2ab05bdcde634008adfc9dcc4cb1796a
msgid "Value"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:855
# e338a0c55e2a459d9f6c6c7229174bbf
msgid "Meaning"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:857
# c94ac16cda344f9f80b84996592ef584
msgid "``N``"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:857
# 77d67534885149e3b3caf0d3e1bb44c8
msgid "The absolute number of arguments (e.g., ``3``)."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:858
# d894994f5d724969becbf419bf61b034
msgid "``?``"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:858
# bf3d6f10cc3943d48f18d94d717604c5
msgid "0 or 1 arguments"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:859
# d6fae5c34351465891792309f9cd70f1
msgid "``*``"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:859
# 3b4f7850bdc54f0caf131b76d685804d
msgid "0 or all arguments"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:860
# f06026f275864201983f1c10348d03a6
msgid "``+``"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:860
# b29b632089f6419b900bfe0f4737a442
msgid "All, and at least one, argument"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:867
# 2d85a84360d7484c95cd5f82b336e8c8
msgid "The parser enforces the argument count instructions, and generates an accurate syntax diagram as part of the command help text."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:943
# 3f266f6d8aee4bfaaae544aa8be5c9c7
msgid "Argument Types"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:945
# 249f6c9747e8403383e80e58d79aeacf
msgid ":mod:`argparse` treats all argument values as strings, unless you tell it to convert the string to another type.  The *type* parameter to :func:`add_argument` expects a converter function used by the :class:`ArgumentParser` to transform the argument value from a string to some other type."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:955
# 306f8ece59314f20b80ea429422234bc
msgid "Any callable that takes a single string argument can be passed as *type*, including built-in types like :func:`int`, :func:`float`, and :func:`file`."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:981
# 4245366e5e31493fb4b1f95ce572a474
msgid "If the type conversion fails, :mod:`argparse` raises an exception. :ref:`TypeError <exceptions-TypeError>` and :ref:`ValueError <exceptions-ValueError>` exceptions are trapped automatically and converted to a simple error message for the user.  Other exceptions, such as the :ref:`IOError <exceptions-IOError>` in the example below where the input file does not exist, must be handled by the caller."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:1013
# 69e58a78db1346a1a9e93c51889f3993
msgid "To limit an input argument to a value within a pre-defined set, use the *choices* parameter."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:1020
# 4f4cbffee33f4550aca8a0b344690a1b
msgid "If the argument to ``--mode`` is not one of the allowed values, an error is generated and processing stops."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:1052
# 668c5605edef46909a455a9c85c07831
msgid "File Arguments"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:1054
# 1ac4b8dc871c48fca9992aa3cbb56533
msgid "Although :class:`file` objects can instantiated with a single string argument, that does not allow you to specify the access mode. :class:`FileType` gives you a more flexible way of specifying that an argument should be a file, including the mode and buffer size."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:1063
# 344fe179c58c42d2be4c2daeb317d708
msgid "The value associated with the argument name is the open file handle. You are responsible for closing the file yourself when you are done with it."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:1099
# 33a6f9b77fbd4d81a1b3158f920dffc9
msgid "Custom Actions"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:1101
# 4adc3a1d990246c291e007e7a6e34baf
msgid "In addition to the built-in actions described earlier, you can define custom actions by providing an object that implements the Action API. The object passed to :func:`add_argument` as *action* should take parameters describing the argument being defined (all of the same arguments given to :func:`add_argument`) and return a callable object that takes as parameters the *parser* processing the arguments, the *namespace* holding the parse results, the *value* of the argument being acted on, and the *option_string* that triggered the action."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:1110
# b1282e6b859047f2b220733a986463d1
msgid "A class :class:`Action` is provided as a convenient starting point for defining new actions.  The constructor handles the argument definitions, so you only need to override :func:`__call__` in the subclass."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:1119
# ee37de6c5a4f468d87420f4b6de489e1
msgid "The type of *values* depends on the value of *nargs*.  If the argument allows multiple values, *values* will be a list even if it only contains one item."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:1123
# b4b193acb7744d2dbeb5921c968dac08
msgid "The value of *option_string* also depends on the original argument specifiation.  For positional, required, arguments, *option_string* is always ``None``."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:1168
# a913173273b8445eb6f832eb7b480073
msgid "`argparse <http://docs.python.org/library/argparse.html>`_"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:1168
# 11320dbf736d484e905cbcd08662da41
msgid "The standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:1173
# b8231be11b274e299fdecb7f76d85fc6
msgid "`original argparse <http://pypi.python.org/pypi/argparse>`__"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:1171
# ca65678360be498fb7284b6e5c33ebd6
msgid "The PyPI page for the version of argparse from outside of the standard libary.  This version is compatible with older versions of Python, and can be installed separately."
msgstr ""

#: ../../PyMOTW/argparse/index.rst:1175
# 3f1210621bab4be1beb4db4d9068af3d
msgid ":mod:`ConfigParser`"
msgstr ""

#: ../../PyMOTW/argparse/index.rst:1176
# 8f3fe0546d9f4911869f9ddff6d092de
msgid "Read and write configuration files."
msgstr ""

