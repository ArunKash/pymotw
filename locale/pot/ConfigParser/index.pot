# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/ConfigParser/index.rst:3
# 6aa7cfbeb0c8461eb60ad8177d5cfa86
msgid "ConfigParser -- Work with configuration files"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:8
# 35718a79f47244d9afa7eb91b2e2c37e
msgid "Read/write configuration files similar to Windows INI files"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:9
# 9ffacff36029492ba2f2cc8e0f8d6426
msgid "1.5"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:11
# cbfe046eb4204991a56b30e1c66cdd4a
msgid "Use the :mod:`ConfigParser` module to manage user-editable configuration files for an application. The configuration files are organized into sections, and each section can contain name-value pairs for configuration data. Value interpolation using Python formatting strings is also supported, to build values that depend on one another (this is especially handy for URLs and message strings)."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:19
# 14fe4ae2e4ed4180921ef1c1931fda65
msgid "Configuration File Format"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:21
# d9c04a4488274e02857865b88836718f
msgid "The file format used by :mod:`ConfigParser` is similar to the format used by older versions of Microsoft Windows.  It consists of one or more named *sections*, each of which can contain individual *options* with names and values."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:26
# 609c82c091b54fceac1a9825c1ceec07
msgid "Config file sections are identified by looking for lines starting with ``[`` and ending with ``]``.  The value between the square brackets is the section name, and can contain any characters except square brackets."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:31
# 48d4abfdb677478f8b0318c2e78080a2
msgid "Options are listed one per line within a section.  The line starts with the name of the option, which is separated from the value by a colon (``:``) or equal sign (``=``).  Whitespace around the separator is ignored when the file is parsed."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:36
# 46da8229766a4e9a8bbca281bb07995c
msgid "A sample configuration file with section \"bug_tracker\" and three options would look like:"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:42
# 2b6f773b09f74f03ae587a0eb0423b74
msgid "Reading Configuration Files"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:44
# 93f093df1add46d29be972d7f4499452
msgid "The most common use for a configuration file is to have a user or system administrator edit the file with a regular text editor to set application behavior defaults, and then have the application read the file, parse it, and act based on its contents.  Use the :func:`read` method of :mod:`SafeConfigParser` to read the configuration file."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:54
# 236b8ef54ed042f9a3feea861940601f
msgid "This program reads the ``simple.ini`` file from the previous section and prints the value of the :data:`url` option from the :data:`bug_tracker` section."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:70
# f5853dc5c4854e1eae804979dd3b745d
msgid "The :func:`read` method also accepts a list of filenames.  Each name in turn is scanned, and if the file exists it is opened and read."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:77
# af2fd1919efa4ea894de3dc441cda346
msgid ":func:`read` returns a list containing the names of the files successfully loaded, so the program can discover which configuration files are missing and decide whether to ignore them."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:95
# 5f348f930c8647729a6a7b4cb52ddfae
msgid "Unicode Configuration Data"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:97
# fe0c858960e64001a06f1c10c4e8472c
msgid "Configuration files containing Unicode data should be opened using the :mod:`codecs` module to set the proper encoding value."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:100
# 9ceda731bff2404bb2d0d7ac73f3d9b6
msgid "Changing the password value of the original input to contain Unicode characters and saving the results in UTF-8 encoding gives:"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:105
# 705f057c7bce4131a25413609d396531
msgid "The :mod:`codecs` file handle can be passed to :func:`readfp`, which uses the :func:`readline` method of its argument to get lines from the file and parse them."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:113
# 97c6c2749a6f467996ee5e73af29816d
msgid "The value returned by :func:`get` is a :class:`unicode` object, so in order to print it safely it must be re-encoded as UTF-8."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:131
# 73f3500b1b0f4f128190ba885ae121b9
msgid "Accessing Configuration Settings"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:133
# b94bcbfff52e46448311829b30a7d1f2
msgid ":class:`SafeConfigParser` includes methods for examining the structure of the parsed configuration, including listing the sections and options, and getting their values.  This configuration file includes two sections for separate web services:"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:140
# f3376a09c27f49d6800cfea43e46eece
msgid "And this sample program exercies some of the methods for looking at the configuration data, including :func:`sections`, :func:`options`, and :func:`items`."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:148
# 0f58df4e0d904849aab4e3829e3dcf23
msgid "Both :func:`sections` and :func:`options` return lists of strings, while :func:`items` returns a list of tuples containing the name-value pairs."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:176
# ee9ef20a3b154a6fa54cbfa617770e11
msgid "Testing whether values are present"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:178
# 9a7704b61a844160b6601ee3e700b383
msgid "To test if a section exists, use :func:`has_section`, passing the section name."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:185
# 507a42012d8e49c188c5cdb92ef49d2d
msgid "Testing if a section exists before calling :func:`get` avoids exceptions for missing data."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:202
# b2fa2e25326c489fb017415a10bcfba8
msgid "Use :func:`has_option` to test if an option exists within a section."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:208
# 61678371b14944609446e7b7047a56eb
msgid "If the section does not exist, :func:`has_option` returns ``False``."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:234
# 76c632c04a1a4ad0b38990a77273eceb
msgid "Value Types"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:236
# fb6224c1a0804d41b6e5e22b1f10f78c
msgid "All section and option names are treated as strings, but option values can be strings, integers, floating point numbers, or booleans.  There are a range of possible boolean values that are converted true or false.  This example file includes one of each:"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:243
# 8e9dcd0e8a1a4497ac074df760e06370
msgid ":class:`SafeConfigParser` does not make any attempt to understand the option type.  The application is expected to use the correct method to fetch the value as the desired type.  :func:`get` always returns a string.  Use :func:`getint` for integers, :func:`getfloat` for floating point numbers, and :func:`getboolean` for boolean values."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:253
# 845b9f75f2a641708292ce776948081a
msgid "Running this program with the example input produces:"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:285
# d30bb6efe84f478e86bf523fb24b24ce
msgid "Options as Flags"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:287
# 56c28ee1bd3c4c968e92cfb084b308ad
msgid "Usually the parser requires an explicit value for each option, but with the :class:`SafeConfigParser` parameter *allow_no_value* set to ``True`` an option can appear by itself on a line in the input file, and be used as a flag."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:296
# c79bdeba65b0450e862c8b15d2057498
msgid "When an option has no explicit value, :func:`has_option` reports that the option exists and :func:`get` returns ``None``."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:322
# c4d5603e385d4ea4a979f67c86888735
msgid "Modifying Settings"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:324
# d2918b25eedb4ecca3d584e628f6cd2e
msgid "While :class:`SafeConfigParser` is primarily intended to be configured by reading settings from files, settings can also be populated by calling :func:`add_section` to create a new section, and :func:`set` to add or change an option."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:333
# 19dce9a6a6e5468d96a990b11dde24fa
msgid "All options must be set as strings, even if they will be retrieved as integer, float, or boolean values."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:351
# a5d2f98c1b814d7b881b56865308c54a
msgid "Sections and options can be removed from a :class:`SafeConfigParser` with :func:`remove_section` and :func:`remove_option`."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:358
# ab41d8f8fe9e4105a7236d68948dfa60
msgid "Removing a section deletes any options it contains."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:389
# 66a3f167f98e4d0da0554b4e70d7411b
msgid "Saving Configuration Files"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:391
# 84fd063f85a54d60b3c84e75b3537f34
msgid "Once a :class:`SafeConfigParser` is populated with desired data, it can be saved to a file by calling the :func:`write` method.  This makes it possible to provide a user interface for editing the configuration settings, without having to write any code to manage the file."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:401
# 3c0e2ac00b0949edac2284ac50c07acd
msgid "The :func:`write` method takes a file-like object as argument.  It writes the data out in the INI format so it can be parsed again by :class:`SafeConfigParser`."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:424
# cb32fbed4ed74349b27c99ccf2ece35b
msgid "Option Search Path"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:426
# bb7c382723734060ae4b417372c277e1
msgid ":class:`SafeConfigParser` uses a multi-step search process when looking for an option."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:429
# 1d90feba37fe46c591c9cb47606477ad
msgid "Before starting the option search, the section name is tested.  If the section does not exist, and the name is not the special value ``DEFAULT``, then :class:`NoSectionError` is raised."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:433
# 3cca4b2011f44a06b76ac851845ada63
msgid "If the option name appears in the *vars* dictionary passed to :func:`get`, the value from *vars* is returned."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:435
# 3d78babe9b364b86abd47ee4095e8568
msgid "If the option name appears in the specified section, the value from that section is returned."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:437
# 1df690a3cca24955a2237d670e759508
msgid "If the option name appears in the ``DEFAULT`` section, that value is returned."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:439
# e6ab010acf85492f8f0685f71a9479df
msgid "If the option name appears in the *defaults* dictionary passed to the constructor, that value is returned."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:442
# 3658ece353ab4a9daab1778e52f28039
msgid "If the name is not found in any of those locations, :class:`NoOptionError` is raised."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:445
# 7ac3eed4c29441218c55c2829587997e
msgid "The search path behavior can be demonstrated using this configuration file:"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:450
# d8d500ad16ca48e9a97e4d818c318fea
msgid "and this test program:"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:456
# 59e3e29e0f7347509c529ac5643f704f
msgid "The output shows the origin for the value of each option, and illustrates the way defaults from different sources override existing values."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:500
# d0aa91fd3625479ebb06ba0f25b15e12
msgid "Combining Values with Interpolation"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:502
# 5f50cfd10a2b4ae4ba3be99f49b66282
msgid ":class:`SafeConfigParser` provides a feature called *interpolation* that can be used to combine values together.  Values containing standard Python format strings trigger the interpolation feature when they are retrieved with :func:`get`.  Options named within the value being fetched are replaced with their values in turn, until no more substitution is necessary."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:509
# a244550385cc4342a5a3974d3585700c
msgid "The URL examples from earlier in this section can be rewritten to use interpolation to make it easier to change only part of the value.  For example, this configuration file separates the protocol, hostname, and port from the URL as separate options."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:516
# 8985e39a6bad4a45b8c73bdf8efb82c5
msgid "Interpolation is performed by default each time :func:`get` is called. Pass a true value in the :data:`raw` argument to retrieve the original value, without interpolation."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:524
# aa10d211d9a7408bb2e81216959e855f
msgid "Because the value is computed by :func:`get`, changing one of the settings being used by the ``url`` value changes the return value."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:542
# 80e04d19a5a3426c95d36ade6896dd68
msgid "Using Defaults"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:544
# 067ed2b32bdf4b9c831110cd0d4d01df
msgid "Values for interpolation do not need to appear in the same section as the original option.  Defaults can be mixed with override values. Using this config file:"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:550
# b70ade770d074d04851864a1f191384b
msgid "The ``url`` value comes from the ``DEFAULT`` section, and the substitution starts by looking in ``bug_tracker`` and falling back to ``DEFAULT`` for pieces not found."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:558
# 09fce5b575cb45a0b07978847d9a8f45
msgid "The ``hostname`` and ``port`` values come from the ``bug_tracker`` section, but the ``protocol`` comes from ``DEFAULT``."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:574
# 90cbf8419637494999fe2aaf48ba4d1c
msgid "Substitution Errors"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:576
# 613a0db8420a47ceb552e6a883b53dd0
msgid "Substitution stops after :attr:`MAX_INTERPOLATION_DEPTH` steps to avoid problems due to recursive references."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:583
# 33b4d6210f504f16903ab69561f5c0b4
msgid "An :class:`InterpolationDepthError` exception is raised if there are too many substitution steps."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:602
# 25c77073d69a4930b8baf183043fd9d8
msgid "Missing values result in an :class:`InterpolationMissingOptionError` exception."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:609
# 82bd4f6fe81e4e2885d3b01c240125bd
msgid "Since no ``server`` value is defined, the ``url`` cannot be constructed."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:632
# abd1a68b6e0c422e82ed20aece450e26
msgid "`ConfigParser <http://docs.python.org/library/configparser.html>`_"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:632
# 8c7496953916408494478fd40f3fa86f
msgid "The standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:634
# 4a62200865f64625899d07532b6536a5
msgid ":mod:`codecs`"
msgstr ""

#: ../../PyMOTW/ConfigParser/index.rst:635
# 930014078e4c4afaa629e0935ce6fa05
msgid "The codecs module is for reading and writing Unicode files."
msgstr ""

