# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/asyncore/index.rst:3
# 1dd1b87dd03949d3961526a4c3db68f3
msgid "asyncore -- Asynchronous I/O handler"
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:8
# d778ea001bcd493b85ccec888dc6ba53
msgid "Asynchronous I/O handler"
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:9
# 15aa3d7de0f34745aefac1180309ab55
msgid "1.5.2 and later"
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:11
# 127de973064f4526ac99f2207bd97b0e
msgid "The asyncore module includes tools for working with I/O objects such as sockets so they can be managed asynchronously (instead of, for example, using threads).  The main class provided is :class:`dispatcher`, a wrapper around a socket that provides hooks for handling events like connecting, reading, and writing when invoked from the main loop function, :func:`loop`."
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:14
# 6280324e011d45b593230359f0b26457
msgid "Clients"
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:16
# a0768772bd01480fa225093c67b5d69b
msgid "To create an asyncore-based client, subclass :class:`dispatcher` and provide implementations for creating the socket, reading, and writing.  Let's examine this HTTP client, based on the one from the standard library documentation."
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:22
# b4843a26e7724d4a83cc4425c01fd0f8
msgid "First, the socket is created in ``__init__()`` using the base class method ``create_socket()``.  Alternative implementations of the method may be provided, but in this case we want a TCP/IP socket so the base class version is sufficient."
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:24
# 1578d7a8a063496982509d441f5a8a6e
msgid "The ``handle_connect()`` hook is present simply to illustrate when it is called.  Other types of clients that need to do some sort of hand-shaking or protocol negotiation should do the work in ``handle_connect()``."
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:26
# 7ca9d9dd55d94437bbef596fce7d33b0
msgid "``handle_close()`` is similarly presented for the purposes of showing when the method is called.  The base class version closes the socket correctly, so if you don't need to do extra cleanup on close you can leave the method out."
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:28
# d87f06fed61043388c944a655ff16bd1
msgid "The asyncore loop uses ``writable()`` and its sibling method ``readable()`` to decide what actions to take with each dispatcher.  Actual use of poll() or select() on the sockets or file descriptors managed by each dispatcher is handled inside the :mod:`asyncore` code, so you don't need to do that yourself.  Simply indicate whether the dispatcher cares at all about reading or writing.  In the case of this HTTP client, ``writable()`` returns True as long as there is data from the request to send to the server.  ``readable()`` always returns True because we want to read all of the data."
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:30
# 521aff35115d4d439ccd7aa34a640c30
msgid "Each time through the loop when ``writable()`` responds positively, ``handle_write()`` is invoked.  In this version, the HTTP request string that was built in ``__init__()`` is sent to the server and the write buffer is reduced by the amount successfully sent."
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:32
# 4161eb2bd49a49ddb97a43edf0df1465
msgid "Similarly, when ``readable()`` responds positively and there is data to read, ``handle_read()`` is invoked."
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:34
# 23e547026c744d7fa3b9ca4aaf47ecb6
msgid "The example below the ``__main__`` test configures logging for debugging then creates two clients to download two separate web pages.  Creating the clients registers them in a \"map\" kept internally by asyncore.  The downloading occurs as the loop iterates over the clients.  When the client reads 0 bytes from a socket that seems readable, the condition is interpreted as a closed connection and ``handle_close()`` is called."
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:36
# 6916e006bc5742e7a5ef025f25095eab
msgid "One example of how this client app may run is:"
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:83
# 0ecc136cc4494a378b2cbb9f9fe62e45
msgid "Servers"
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:85
# 27f46d30153340e99be12235bec96a1a
msgid "The example below illustrates using asyncore on the server by re-implementing the EchoServer from the :mod:`SocketServer` examples.  There are three classes: ``EchoServer`` receives incoming connections from clients and creates ``EchoHandler`` instances to deal with each.  The ``EchoClient`` is an asyncore dispatcher similar to the HttpClient defined above."
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:91
# 28d49b984cd84bfcb48d43c8a94816ea
msgid "The EchoServer and EchoHandler are defined in separate classes because they do different things.  When EchoServer accepts a connection, a new socket is established.  Rather than try to dispatch to individual clients within EchoServer, an EchoHandler is created to take advantage of the socket map maintained by asyncore."
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:139
# d324a80909754e2a942b9e34c7e87983
msgid "In this example the server, handler, and client objects are all being maintained in the same socket map by asyncore in a single process. To separate the server from the client, simply instantiate them from separate scripts and run ``asyncore.loop()`` in both. When a dispatcher is closed, it is removed from the map maintained by asyncore and the loop exits when the map is empty."
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:142
# 13edff5e79b0456da4e1a06dc077c498
msgid "Working with Other Event Loops"
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:144
# aea55cf889154695a219b0c5f2075818
msgid "It is sometimes necessary to integrate the asyncore event loop with an event loop from the parent application.  For example, a GUI application would not want the UI to block until all asynchronous transfers are handled -- that would defeat the purpose of making them asynchronous.  To make this sort of integration easy, ``asyncore.loop()`` accepts arguments to set a timeout and to limit the number of times the loop is run.  We can see their effect on the client by re-using HttpClient from the first example."
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:150
# ae2b62bf0d054b4a81903fb390bd780c
msgid "Here we see that the client is only asked to read or data once per call into ``asyncore.loop()``.  Instead of our own ``while`` loop, we could call ``asyncore.loop()`` like this from a GUI toolkit idle handler or other mechanism for doing a small amount of work when the UI is not busy with other event handlers."
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:179
# 131734989c9e41fb9a91575faf6eaca5
msgid "Working with Files"
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:181
# 2fae27475ad94f35bf003e1c077b0db2
msgid "Normally you would want to use asyncore with sockets, but there are times when it is useful to read files asynchronously, too (to use files when testing network servers without requiring the network setup, or to read or write large data files in parts).  For these situations, asyncore provides the :class:`file_dispatcher` and :class:`file_wrapper` classes."
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:187
# 8d212bdd3bcd480994a63fe55e5d1417
msgid "This example was tested under Python 2.5.2, so I am using ``os.open()`` to get a file descriptor for the file.  For Python 2.6 and later, ``file_dispatcher`` automatically converts anything with a ``fileno()`` method to a file descriptor."
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:212
# d0e88d52fa4f4d3e8fedaf31a59e0111
msgid "`asyncore <http://docs.python.org/library/asyncore.html>`_"
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:212
# ed38c0958e3a4d5c96bf13a440dcd3aa
msgid "The standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:216
# 16b06093667a4fb1b9325dbf1ba35560
msgid ":mod:`asynchat`"
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:215
# 346b48cdecd745e98e71a721cfccc999
msgid "The asynchat module builds on asyncore to make it easier to create clients and servers communicate by passing messages back and forth using a set protocol."
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:219
# 2d8c9b73b6c44259a53ac9020e8bffda
msgid ":mod:`SocketServer`"
msgstr ""

#: ../../PyMOTW/asyncore/index.rst:219
# 08c75e6a7f814aeb8075492678843855
msgid "The SocketServer module article includes another example of the EchoServer with threading and forking variants."
msgstr ""

