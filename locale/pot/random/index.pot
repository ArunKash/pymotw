# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/random/index.rst:3
# 48c54487f2d64076a4b6a1e167c468ab
msgid "random -- Pseudorandom number generators"
msgstr ""

#: ../../PyMOTW/random/index.rst:8
# e84f1b8e3d604716a9e32e61331c36a8
msgid "Implements several types of pseudorandom number generators."
msgstr ""

#: ../../PyMOTW/random/index.rst:9
# 268a1257e23646ecbff3c8714f2f040c
msgid "1.4 and later"
msgstr ""

#: ../../PyMOTW/random/index.rst:11
# 49637e2a376946f29a0448310fcb8f3d
msgid "The :mod:`random` module provides a fast pseudorandom number generator based on the *Mersenne Twister* algorithm.  Originally developed to produce inputs for Monte Carlo simulations, Mersenne Twister generates numbers with nearly uniform distribution and a large period, making it suited for a wide range of applications."
msgstr ""

#: ../../PyMOTW/random/index.rst:18
# 961b0eec2bc44b8189aff8eb6f4e1d28
msgid "Generating Random Numbers"
msgstr ""

#: ../../PyMOTW/random/index.rst:20
# 859169669faa49e0b8a3f67d22e52be5
msgid "The :func:`random` function returns the next random floating point value from the generated sequence.  All of the return values fall within the range ``0 <= n < 1.0``."
msgstr ""

#: ../../PyMOTW/random/index.rst:28
# 745d1027105446c697892e493ad9ca65
msgid "Running the program repeatedly produces different sequences of numbers."
msgstr ""

#: ../../PyMOTW/random/index.rst:48
# 682a9fc0ac8b4b688b7ce6c7342d6800
msgid "To generate numbers in a specific numerical range, use :func:`uniform` instead."
msgstr ""

#: ../../PyMOTW/random/index.rst:55
# 08d3008ab7164890a870f981d770db57
msgid "Pass minimum and maximum values, and :func:`uniform` adjusts the return values from :func:`random` using the formula ``min + (max - min) * random()``."
msgstr ""

#: ../../PyMOTW/random/index.rst:73
# 1773d83a164843cda91b99535b1a247a
msgid "Seeding"
msgstr ""

#: ../../PyMOTW/random/index.rst:75
# 11ed4f1fa3004828b6e42ece8231fd6f
msgid ":func:`random` produces different values each time it is called, and has a very large period before it repeats any numbers.  This is useful for producing unique values or variations, but there are times when having the same dataset available to be processed in different ways is useful.  One technique is to use a program to generate random values and save them to be processed by a separate step.  That may not be practical for large amounts of data, though, so :mod:`random` includes the :func:`seed` function for initializing the pseudorandom generator so that it produces an expected set of values."
msgstr ""

#: ../../PyMOTW/random/index.rst:89
# 3d00812aaec046a090b43fbc55ebef77
msgid "The seed value controls the first value produced by the formula used to produce pseudorandom numbers, and since the formula is deterministic it also sets the full sequence produced after the seed is changed.  The argument to :func:`seed` can be any hashable object. The default is to use a platform-specific source of randomness, if one is available.  Otherwise the current time is used."
msgstr ""

#: ../../PyMOTW/random/index.rst:115
# 93a74b844cc843e78c0e924c179c06ce
msgid "Saving State"
msgstr ""

#: ../../PyMOTW/random/index.rst:117
# 1c1c48e8ab1d4816a8161599afa5deff
msgid "Another technique useful for controlling the number sequence is to save the internal state of the generator between test runs.  Restoring the previous state before continuing reduces the likelyhood of repeating values or sequences of values from the earlier input.  The :func:`getstate` function returns data that can be used to re-initialize the random number generator later with :func:`setstate`."
msgstr ""

#: ../../PyMOTW/random/index.rst:128
# 48c2c01a10d04e1797150a6b3a97bfa3
msgid "The data returned by :func:`getstate` is an implementation detail, so this example saves the data to a file with :mod:`pickle` but otherwise treats it as a black box.  If the file exists when the program starts, it loads the old state and continues.  Each run produces a few numbers before and after saving the state, to show that restoring the state causes the generator to produce the same values again."
msgstr ""

#: ../../PyMOTW/random/index.rst:163
# 14060e4b8f30447fabb25e7cb4281062
msgid "Random Integers"
msgstr ""

#: ../../PyMOTW/random/index.rst:165
# 737bb441ba534b299cc9e0dc493398cf
msgid ":func:`random` generates floating point numbers.  It is possible to convert the results to integers, but using :func:`randint` to generate integers directly is more convenient."
msgstr ""

#: ../../PyMOTW/random/index.rst:173
# fb8e16bcd3014c1fa65cf40705772786
msgid "The arguments to :func:`randint` are the ends of the inclusive range for the values.  The numbers can be positive or negative, but the first value should be less than the second."
msgstr ""

#: ../../PyMOTW/random/index.rst:190
# 25235662e18f48a58b97f271c72b6528
msgid ":func:`randrange` is a more general form of selecting values from a range."
msgstr ""

#: ../../PyMOTW/random/index.rst:197
# 629bf17574cd4f9f8eb127ead929d715
msgid ":func:`randrange` supports a *step* argument, in addition to start and stop values, so it is fully equivalent to selecting a random value from ``range(start, stop, step)``.  It is more efficient, because the range is not actually constructed."
msgstr ""

#: ../../PyMOTW/random/index.rst:216
# ae9348f2b39c4da6bc7c569d2151a2fb
msgid "Picking Random Items"
msgstr ""

#: ../../PyMOTW/random/index.rst:218
# 344133c4ce0e4640b129a6b022b6dd9f
msgid "One common use for random number generators is to select a random item from a sequence of enumerated values, even if those values are not numbers.  :mod:`random` includes the :func:`choice` function for making a random selection from a sequence.  This example simulates flipping a coin 10,000 times to count how many times it comes up heads and how many times tails."
msgstr ""

#: ../../PyMOTW/random/index.rst:229
# de336ee29e044a96a0258325da4fb477
msgid "There are only two outcomes allowed, so rather than use numbers and convert them the words \"heads\" and \"tails\" are used with :func:`choice`.  The results are tabulated in a dictionary using the outcome names as keys."
msgstr ""

#: ../../PyMOTW/random/index.rst:249
# 36a43de7dbc24d0eb3aeac0eceb95c02
msgid "Permutations"
msgstr ""

#: ../../PyMOTW/random/index.rst:251
# 812a49d9ad97424292378abd19b1f911
msgid "A simulation of a card game needs to mix up the deck of cards and then \"deal\" them to the players, without using the same card more than once.  Using :func:`choice` could result in the same card being dealt twice, so instead the deck can be mixed up with :func:`shuffle` and then individual cards removed as they are dealt."
msgstr ""

#: ../../PyMOTW/random/index.rst:261
# 879b55c1b02847f0af945155de3afaf1
msgid "The cards are represented as tuples with the face value and a letter indicating the suit.  The dealt \"hands\" are created by adding one card at a time to each of four lists, and removing it from the deck so it cannot be dealt again."
msgstr ""

#: ../../PyMOTW/random/index.rst:299
# e76bf3e483c343b9affbe21bb28135c7
msgid "Many simulations need random samples from a population of input values.  The :func:`sample` function generates samples without repeating values and without modifying the input sequence.  This example prints a random sample of words from the system dictionary."
msgstr ""

#: ../../PyMOTW/random/index.rst:308
# cc81a0487cbb4f0fb6f0f679ea98d5a4
msgid "The algorithm for producing the result set takes into account the sizes of the input and the sample requested to produce the result as efficiently as possible."
msgstr ""

#: ../../PyMOTW/random/index.rst:332
# 3995e28b8e8e4683ada4cf9c4bd0068f
msgid "Multiple Simultaneous Generators"
msgstr ""

#: ../../PyMOTW/random/index.rst:334
# 10df75c499ba4af783664fb333c6b7a9
msgid "In addition to module-level functions, :mod:`random` includes a :class:`Random` class to manage the internal state for several random number generators.  All of the functions described above are available as methods of the :class:`Random` instances, and each instance can be initialized and used separately, without interfering with the values returned by other instances."
msgstr ""

#: ../../PyMOTW/random/index.rst:345
# 7a49dd17ab3649dd8bf35219f4f46dd7
msgid "On a system with good native random value seeding, the instances start out in unique states.  However, if there is no good platform random value generator, the instances are likely to have been seeded with the current time, and therefore produce the same values."
msgstr ""

#: ../../PyMOTW/random/index.rst:372
# e1fa05a1f4034c44b3ce577a27a18828
msgid "To ensure that the generators produce values from different parts of the random period, use :func:`jumpahead` to shift one of them away from its initial state."
msgstr ""

#: ../../PyMOTW/random/index.rst:380
# b80ebf2b33a943d38bda8651d38456c1
msgid "The argument to :func:`jumpahead` should be a non-negative integer based the number of values needed from each generator.  The internal state of the generator is scrambled based on the input value, but not simply by incrementing it by the number of steps given."
msgstr ""

#: ../../PyMOTW/random/index.rst:400
# 1516e2124179418c99ed7c1e44521fcb
msgid "SystemRandom"
msgstr ""

#: ../../PyMOTW/random/index.rst:402
# 0667e7e6f4c3456db2eabda0d862c090
msgid "Some operating systems provide a random number generator that has access to more sources of entropy that can be introduced into the generator.  :mod:`random` exposes this feature through the :class:`SystemRandom` class, which has the same API as :class:`Random` but uses :func:`os.urandom` to generate the values that form the basis of all of the other algorithms."
msgstr ""

#: ../../PyMOTW/random/index.rst:413
# 0f869712b27249c08851fcfd7c945b67
msgid "Sequences produced by :class:`SystemRandom` are not reproducable because the randomness is coming from the system, rather than software state (in fact, :func:`seed` and :func:`setstate` have no effect at all)."
msgstr ""

#: ../../PyMOTW/random/index.rst:442
# e4517c07022a47a688961b37288fcfeb
msgid "Non-uniform Distributions"
msgstr ""

#: ../../PyMOTW/random/index.rst:444
# c980890ef8d5465eb5dbe045ac66bd1f
msgid "While the uniform distribution of the values produced by :func:`random` is useful for a lot of purposes, other distributions more accurately model specific situations.  The :mod:`random` module includes functions to produce values in those distributions, too. They are listed here, but not covered in detail because their uses tend to be specialized and require more complex examples."
msgstr ""

#: ../../PyMOTW/random/index.rst:452
# 28c02f44e83445fcb5cd6647ce154c2d
msgid "Normal"
msgstr ""

#: ../../PyMOTW/random/index.rst:454
# 2ee06f253cb14c929a1ea2585f008be7
msgid "The *normal* distribution is commonly used for non-uniform continuous values such as grades, heights, weights, etc.  The curve produced by the distribution has a distinctive shape which has lead to it being nicknamed a \"bell curve.\"  :mod:`random` includes two functions for generating values with a normal distribution, :func:`normalvariate` and the slightly faster :func:`gauss` (the normal distribution is also called the Gaussian distribution)."
msgstr ""

#: ../../PyMOTW/random/index.rst:462
# 2ad26e16880643cc8bf6c1c2212c2164
msgid "The related function, :func:`lognormvariate` produces pseudorandom values where the logarithm of the values is distributed normally. Log-normal distributions are useful for values that are the product of several random variables which do not interact."
msgstr ""

#: ../../PyMOTW/random/index.rst:468
# 3009b5d4befe40d79a531b50894e56fd
msgid "Approximation"
msgstr ""

#: ../../PyMOTW/random/index.rst:470
# 5e9fb248d33b4b3092e237dfb7b5aa6b
msgid "The *triangular* distribution is used as an approximate distribution for small sample sizes.  The \"curve\" of a triangular distribution has low points at known minimum and maximum values, and a high point at and the mode, which is estimated based on a \"most likely\" outcome (reflected by the mode argument to :func:`triangular`)."
msgstr ""

#: ../../PyMOTW/random/index.rst:477
# d5dc11a2770b40ec92bd45fbfaaa622a
msgid "Exponential"
msgstr ""

#: ../../PyMOTW/random/index.rst:479
# 9719b0afb937429ea1794f10ab261a1e
msgid ":func:`expovariate` produces an exponential distribution useful for simulating arrival or interval time values for in homogeneous Poisson processes such as the rate of radioactive decay or requests coming into a web server."
msgstr ""

#: ../../PyMOTW/random/index.rst:484
# 7ce8a69d0f93429cb48abe76f9411afd
msgid "The Pareto, or power law, distribution matches many observable phenomena and was popularized by Chris Anderon's book, *The Long Tail*.  The :func:`paretovariate` function is useful for simulating allocation of resources to individuals (wealth to people, demand for musicians, attention to blogs, etc.)."
msgstr ""

#: ../../PyMOTW/random/index.rst:491
# bf5a438e958f4e94beed77422534fe0e
msgid "Angular"
msgstr ""

#: ../../PyMOTW/random/index.rst:493
# b83b7d513bb74b2d8efda50a40cc4191
msgid "The von Mises, or circular normal, distribution (produced by :func:`vonmisesvariate`) is used for computing probabilities of cyclic values such as angles, calendar days, and times."
msgstr ""

#: ../../PyMOTW/random/index.rst:498
# 5ea7645ddedc4f3591b1af94e4b19881
msgid "Sizes"
msgstr ""

#: ../../PyMOTW/random/index.rst:500
# 31334df93ef54a71a11a914ebb10845b
msgid ":func:`betavariate` generates values with the Beta distribution, which is commonly used in Bayesian statistics and applications such as task duration modeling."
msgstr ""

#: ../../PyMOTW/random/index.rst:504
# 94f41b83657e4e1c8dce87b1c9b486b3
msgid "The Gamma distribution produced by :func:`gammavariate` is used for modeling the sizes of things such as waiting times, rainfall, and computational errors."
msgstr ""

#: ../../PyMOTW/random/index.rst:508
# 93b3e0314fa6452d92ca2b59b1bc2445
msgid "The Weibull distribution computed by :func:`weibullvariate` is used in failure analysis, industrial engineering, and weather forecasting.  It describes the distribution of sizes of particles or other discrete objects."
msgstr ""

#: ../../PyMOTW/random/index.rst:517
# 2354080c8aa144af8e2d674e1bbc70f5
msgid "`random <http://docs.python.org/library/random.html>`_"
msgstr ""

#: ../../PyMOTW/random/index.rst:517
# 0fabcf689d254a9885bc33458a63dad8
msgid "The standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/random/index.rst:522
# 0d8d87c5e74b49d1bd7be0228478ca61
msgid "Mersenne Twister: A 623-dimensionally equidistributed uniform pseudorandom number generator"
msgstr ""

#: ../../PyMOTW/random/index.rst:520
# 357e101f1b01432d862098d7cefbfa8d
msgid "Article by M. Matsumoto and T. Nishimura from *ACM Transactions on Modeling and Computer Simulation* Vol. 8, No. 1, January pp.3-30 1998."
msgstr ""

#: ../../PyMOTW/random/index.rst:525
# de31899620bf450ea9e914e9b48565c6
msgid "`Wikipedia: Mersenne Twister <http://en.wikipedia.org/wiki/Mersenne_twister>`_"
msgstr ""

#: ../../PyMOTW/random/index.rst:525
# 3bff9ac5315f4736b1281827f910da2e
msgid "Article about the pseudorandom generator algorithm used by Python."
msgstr ""

#: ../../PyMOTW/random/index.rst:527
# f6989cf7d55c46f5adcc7f735d8e42e7
msgid "`Wikipedia: Uniform distribution <http://en.wikipedia.org/wiki/Uniform_distribution_(continuous)>`_"
msgstr ""

#: ../../PyMOTW/random/index.rst:528
# f86beb328de742e4b53ac1ffd7a4ef4d
msgid "Article about continuous uniform distributions in statistics."
msgstr ""

