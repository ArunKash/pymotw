# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/pipes/index.rst:3
# 656484592d7542278b8c7ad3c1ed3908
msgid "pipes -- Unix shell command pipeline templates"
msgstr ""

#: ../../PyMOTW/pipes/index.rst:8
# 74218c078caa4328acb9fd1c60c7d269
msgid "Create repeatable Unix shell command pipelines."
msgstr ""

#: ../../PyMOTW/pipes/index.rst:9
# 989750c664844d598cbb3e97c44e2fb8
msgid "Python 1.4"
msgstr ""

#: ../../PyMOTW/pipes/index.rst:11
# 29969053da2a412e959f2a9ad821bcb1
msgid "The :mod:`pipes` module implements a class to create arbitrarily complex Unix command pipelines.  Inputs and outputs of the commands can be chained together as with the shell ``|`` operator, even if the individual commands need to write to or read from files instead of stdin/stdout."
msgstr ""

#: ../../PyMOTW/pipes/index.rst:19
# 8fcdda8bd9994f0ea0645973dcd19c8d
msgid "Passing Standard I/O Through a Pipe"
msgstr ""

#: ../../PyMOTW/pipes/index.rst:21
# f3b66eb343e440e0a50202fdb010910c
msgid "A very simple example, passing standard input through a pipe and receiving the results in a file looks like this:"
msgstr ""

#: ../../PyMOTW/pipes/index.rst:28
# 7d4d2f32055048078bd12dd821ace214
msgid "The pipeline Template is created and then a single command, ``cat -`` is added.  The command reads standard input and writes it to standard output, without modification.  The second argument to ``append()`` encodes the input and output sources for the command in two characters (input, then output).  Using ``-`` means the command uses standard I/O.  Using ``f`` means the command needs to read from a file (as may be the case with an image processing pipeline)."
msgstr ""

#: ../../PyMOTW/pipes/index.rst:36
# 76cd5b127a8e4c59a4aa15ba48cd3b08
msgid "The ``debug()`` method toggles debugging output on and off.  When debugging is enabled, the commands being run are printed and the shell is given ``set -x`` so it runs verbosely."
msgstr ""

#: ../../PyMOTW/pipes/index.rst:40
# 4082d1571da04efb897f57c08751852e
msgid "After the pipeline is set up, a NamedTemporaryFile is created to give the pipeline somewhere to write its output.  A file must always be specified as argument to ``open()``, whether reading or writing."
msgstr ""

#: ../../PyMOTW/pipes/index.rst:58
# 81b4ecf9c4554b40976aaa79ba441cbe
msgid "Reading from a pipeline works basically the same way, with a few changes to the arguments.  For our example, we need to set up the contents of the input file before opening the pipline.  Then we can pass that filename as input to ``open()``."
msgstr ""

#: ../../PyMOTW/pipes/index.rst:67
# 4681c47c7c8649c18317d0e1999192b5
msgid "We can read the results from the pipeline directly."
msgstr ""

#: ../../PyMOTW/pipes/index.rst:84
# 2c049a452d0e45f0bbeeb3e9a78e67df
msgid "Using Files Instead of Streams"
msgstr ""

#: ../../PyMOTW/pipes/index.rst:86
# 56eadfb3481c45a0b39c0d1870996d2f
msgid "Some commands need to work on files on the filesystem instead of input streams.  Commands that process a large amount of data might perform better in this mode, since they will not block on the next command reading their output.  Anything that works on non-stream-based data requires this capability as well (e.g., databases or other binary file manipulation tools).  To support this mode of operation, ``append()`` lets you specify a *kind* of ``f``, and the pipeline code will create the needed temporary files.  The filenames are passed to the shell as ``$IN`` and ``$OUT``, so those variable names need to appear in your command string."
msgstr ""

#: ../../PyMOTW/pipes/index.rst:101
# 253b9512201145308f0c94c038f8f6ad
msgid "As you see, several intermediate temporary files are created to hold the input and output of the step."
msgstr ""

#: ../../PyMOTW/pipes/index.rst:126
# 3e5c687b901c4bebab6c2c3f524e347f
msgid "And the input and output *kind* values can be mixed, so that different steps of the pipeline use files or standard I/O as needed."
msgstr ""

#: ../../PyMOTW/pipes/index.rst:133
# 0aaff8cfa2404259b85ffbe40c70a915
msgid "The trap statements visible in the output here ensure that the temporary files created by the pipeline are cleaned up even if a task fails in the middle or the shell is killed."
msgstr ""

#: ../../PyMOTW/pipes/index.rst:163
# ffbaf21348224681bb847d5321a9a1e3
msgid "A More Complex Example"
msgstr ""

#: ../../PyMOTW/pipes/index.rst:165
# 7465309c3ba145d6906923cb6d576257
msgid "All of the examples up to this point have been fairly trivial.  They were constructed to illustrate how to use ``pipes.Template()`` without depending on deep knowledge of shell scripting in general.  This example is more complex, and shows how several commands can be combined to manipulate data before bringing it into Python."
msgstr ""

#: ../../PyMOTW/pipes/index.rst:171
# 122cb0d06c41431a9e6e32bc56c638f8
msgid "My `virtualenvwrapper <http://www.doughellmann.com/projects/virtualenvwrapper/>`_ script includes a shell function for listing all of the virtual environments you have created.  The function is used for tab-completion and can be called directly to list the environments, in case you forget a name. The heart of that function is a small pipeline that looks in ``$WORKON_HOME`` for directories that look like virtual environments (i.e., they have an ``activate`` script).  That pipeline is:"
msgstr ""

#: ../../PyMOTW/pipes/index.rst:187
# cc65d54ae0b04d8da52f9b90c98a3e4c
msgid "Implemented using :mod:`pipes`, the pipeline looks like:"
msgstr ""

#: ../../PyMOTW/pipes/index.rst:193
# e131e1d7092c4675a792fe947c1a5a3b
msgid "Since each sandbox name is written to a separate line, parsing the output is easy:"
msgstr ""

#: ../../PyMOTW/pipes/index.rst:211
# a674d81fdc634494ba04c7681b9beeec
msgid "Passing Files Through Pipelines"
msgstr ""

#: ../../PyMOTW/pipes/index.rst:213
# e178fddeb7ac43a3855c5e90a3c82a04
msgid "If the input to your pipeline already exists in a file on disk, there's no need to read it into Python simply to pass it to the pipeline.  You can use the ``copy()`` method to pass the file directly through the pipeline and create an output file for reading."
msgstr ""

#: ../../PyMOTW/pipes/index.rst:242
# 4cd26e22be2342c9936cddd2aba1470c
msgid "Cloning Templates"
msgstr ""

#: ../../PyMOTW/pipes/index.rst:244
# f7b374e72d30474abaeb2a99a16a3bc6
msgid "Once you have a pipeline template, you may want to use it multiple times or create variants without re-constructing the entire object. The ``clone()`` method makes both of these operations easy.  This example constructs a simple word-counter pipeline, then prepends commands to a couple of clones to make it look for different words."
msgstr ""

#: ../../PyMOTW/pipes/index.rst:254
# ad5ea5bb56de43b8906d7574f2343b4f
msgid "By prepending a custom command to each clone, we can create separate pipelines that perform the same basic function with small variations."
msgstr ""

#: ../../PyMOTW/pipes/index.rst:275
# df7e237367be454a8ac0dcc45a8a8e21
msgid "`pipes <http://docs.python.org/library/pipes.html>`_"
msgstr ""

#: ../../PyMOTW/pipes/index.rst:275
# 56b826a1cf764a959197ad7dbf12c6cd
msgid "The standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/pipes/index.rst:278
# 106e533d7e134d15bc3cb1632f251d2b
msgid ":mod:`tempfile`"
msgstr ""

#: ../../PyMOTW/pipes/index.rst:278
# 55e65d5cafa14784a52497a17af00e9a
msgid "The tempfile module includes classes for managing temporary files."
msgstr ""

#: ../../PyMOTW/pipes/index.rst:281
# b3d87a24498a420da609057a037f3490
msgid ":mod:`subprocess`"
msgstr ""

#: ../../PyMOTW/pipes/index.rst:281
# ae5b4566e3054bbbbbead06d5e885ef9
msgid "The subprocess module also supports chaining the inputs and outputs of processes together."
msgstr ""

