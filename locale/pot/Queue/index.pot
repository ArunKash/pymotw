# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/Queue/index.rst:3
# d77f0cc1f5c346b6bc84b7ef52a4b321
msgid "Queue -- A thread-safe FIFO implementation"
msgstr ""

#: ../../PyMOTW/Queue/index.rst:8
# d782206a26334233a3d39e18abc6f63e
msgid "Provides a thread-safe FIFO implementation"
msgstr ""

#: ../../PyMOTW/Queue/index.rst:9
# 9d04ffe093f4433380d144252b21edc6
msgid "at least 1.4"
msgstr ""

#: ../../PyMOTW/Queue/index.rst:11
# eb5d7a3738974cf5b7883bce26022766
msgid "The :mod:`Queue` module provides a FIFO implementation suitable for multi-threaded programming. It can be used to pass messages or other data between producer and consumer threads safely. Locking is handled for the caller, so it is simple to have as many threads as you want working with the same Queue instance. A Queue's size (number of elements) may be restricted to throttle memory usage or processing."
msgstr ""

#: ../../PyMOTW/Queue/index.rst:20
# ec282069d7c7472499abe1b1eb447000
msgid "This discussion assumes you already understand the general nature of a queue. If you don't, you may want to read some of the references before continuing."
msgstr ""

#: ../../PyMOTW/Queue/index.rst:25
# c1f1dde14bb7475c874b622f1ab7b6e7
msgid "Basic FIFO Queue"
msgstr ""

#: ../../PyMOTW/Queue/index.rst:27
# c37476eeb37a42608e0014e761f96e0c
msgid "The ``Queue`` class implements a basic first-in, first-out container. Elements are added to one \"end\" of the sequence using ``put()``, and removed from the other end using ``get()``."
msgstr ""

#: ../../PyMOTW/Queue/index.rst:35
# 9f453466fdfd42b1837f711ed4362f76
msgid "This example uses a single thread to illustrate that elements are removed from the queue in the same order they are inserted."
msgstr ""

#: ../../PyMOTW/Queue/index.rst:51
# 26f17eebd6d94533821093f612e2dfe6
msgid "LIFO Queue"
msgstr ""

#: ../../PyMOTW/Queue/index.rst:53
# ee53905a2a7d43b18c68ef93dee409da
msgid "In contrast to the standard FIFO implementation of ``Queue``, the ``LifoQueue`` uses last-in, first-out ordering (normally associated with a stack data structure)."
msgstr ""

#: ../../PyMOTW/Queue/index.rst:61
# 5231c13aaeb84779836176ce8c8cf608
msgid "The item most recently ``put()`` into the queue is removed by ``get()``."
msgstr ""

#: ../../PyMOTW/Queue/index.rst:79
# 69d6137f96a54ea98e6bab3f279831f4
msgid "Priority Queue"
msgstr ""

#: ../../PyMOTW/Queue/index.rst:81
# 54e78f4983b449b09f600f26ff5c76aa
msgid "Sometimes the processing order of the items in a queue needs to be based on characteristics of those items, rather than just the order they are created or added to the queue.  For example, print jobs from the payroll department may take precedence over a code listing printed by a developer.  ``PriorityQueue`` uses the sort order of the contents of the queue to decide which to retrieve."
msgstr ""

#: ../../PyMOTW/Queue/index.rst:92
# efabc8ff875c4353a9bb9b587de767e9
msgid "In this single-threaded example, the jobs are pulled out of the queue in strictly priority order.  If there were multiple threads consuming the jobs, they would be processed based on the priority of items in the queue at the time ``get()`` was called."
msgstr ""

#: ../../PyMOTW/Queue/index.rst:117
# bff4423ddbec44418e4324e7d527ea9f
msgid "Using Queues with Threads"
msgstr ""

#: ../../PyMOTW/Queue/index.rst:119
# 1219cf84bee84189aae639a939a80062
msgid "As an example of how to use the Queue class with multiple threads, we can create a very simplistic podcasting client. This client reads one or more RSS feeds, queues up the enclosures for download, and processes several downloads in parallel using threads. It is simplistic and unsuitable for actual use, but the skeleton implementation gives us enough code to work with to provide an example of using the Queue module."
msgstr ""

#: ../../PyMOTW/Queue/index.rst:131
# e4b7c5b655f94d389da28c26ebab0fb3
msgid "First, we establish some operating parameters. Normally these would come from user inputs (preferences, a database, whatever). For our example we hard code the number of threads to use and the list of URLs to fetch."
msgstr ""

#: ../../PyMOTW/Queue/index.rst:136
# 9217b3bf68a84169a07af225573b9bbf
msgid "Next, we need to define the function ``downloadEnclosures()`` that will run in the worker thread, processing the downloads. Again, for illustration purposes this only simulates the download. To actually download the enclosure, you might use :mod:`urllib` or :mod:`urllib2`. In this example, we simulate a download delay by sleeping a variable amount of time, depending on the thread id."
msgstr ""

#: ../../PyMOTW/Queue/index.rst:143
# 03246daf7cef452a96530317b5ecfc34
msgid "Once the threads' target function is defined, we can start the worker threads. Notice that downloadEnclosures() will block on the statement ``url = q.get()`` until the queue has something to return, so it is safe to start the threads before there is anything in the queue."
msgstr ""

#: ../../PyMOTW/Queue/index.rst:148
# a6388744f28d486390635c21be81a949
msgid "The next step is to retrieve the feed contents (using Mark Pilgrim's `feedparser`_ module) and enqueue the URLs of the enclosures. As soon as the first URL is added to the queue, one of the worker threads should pick it up and start downloading it. The loop below will continue to add items until the feed is exhausted, and the worker threads will take turns dequeuing URLs to download them."
msgstr ""

#: ../../PyMOTW/Queue/index.rst:155
# 8126e606fe4b4d60a2ffc49c293c4db4
msgid "And the only thing left to do is wait for the queue to empty out again, using ``join()``."
msgstr ""

#: ../../PyMOTW/Queue/index.rst:158
# 984af280ba34472e82e589bddc701349
msgid "If you run the sample script, you should see output something like this:"
msgstr ""

#: ../../PyMOTW/Queue/index.rst:189
# dc2eafe5da1a4438bd208a6b2fe7e82e
msgid "The actual output will depend on whether anyone modifies the subscriptions in the guest account on http://www.CastSampler.com."
msgstr ""

#: ../../PyMOTW/Queue/index.rst:196
# b7c386e1ea254932a989442d79bd3812
msgid "`Queue <http://docs.python.org/lib/module-Queue.html>`_"
msgstr ""

#: ../../PyMOTW/Queue/index.rst:196
# 7e12d45363fd4622b4b2c2924c186185
msgid "Standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/Queue/index.rst:199
# fbe9ce23aac14e748dbe7459a3b589c1
msgid ":ref:`deque` from :mod:`collections`"
msgstr ""

#: ../../PyMOTW/Queue/index.rst:199
# 999faf468ec14879a1cab2dfa912e9f1
msgid "collections includes a deque (double-ended queue) class"
msgstr ""

#: ../../PyMOTW/Queue/index.rst:202
# 7ce2664154974496af84d9671a3395c8
msgid "*Wikipedia: Queue data structures*"
msgstr ""

#: ../../PyMOTW/Queue/index.rst:202
# 196d615d1a144f189940584bc0a2b44b
msgid "http://en.wikipedia.org/wiki/Queue_(data_structure)"
msgstr ""

#: ../../PyMOTW/Queue/index.rst:205
# b199be6532a849e489c67acd8a8123ad
msgid "*Wikipedia: FIFO*"
msgstr ""

#: ../../PyMOTW/Queue/index.rst:205
# c3ead0ae8e8244f59664d744c2f9d23e
msgid "http://en.wikipedia.org/wiki/FIFO"
msgstr ""

#: ../../PyMOTW/Queue/index.rst:208
# 2ed86e40e3b546b39e659fd5ade75c80
msgid "`feedparser`_"
msgstr ""

#: ../../PyMOTW/Queue/index.rst:208
# 0c021ca0a9a54566a193adf235fa8854
msgid "Mark Pilgrim's feedparser module (http://www.feedparser.org/)."
msgstr ""

#: ../../PyMOTW/Queue/index.rst:210
# f884a9d651f3412fa0fd35e07513a43b
msgid ":ref:`article-data-structures`"
msgstr ""

#: ../../PyMOTW/Queue/index.rst:211
# cd1b08ad35db4f0b9747ce1048597d79
msgid "Other complex data structures in the standard library."
msgstr ""

