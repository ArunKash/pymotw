# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/optparse/index.rst:3
# 59e9a52badcf4dde85e92952bbdcf7b1
msgid "optparse -- Command line option parser to replace getopt."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:8
# 2031a587fb824b51822b92a488c7edc7
msgid "Command line option parser to replace :mod:`getopt`."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:9
# b7dfae54337c4bbe91bc1a022bfeb194
msgid "2.3"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:11
# ec439104723346099192fa40d1928f0a
msgid "The :mod:`optparse` module is a modern alternative for command line option parsing that offers several features not available in :mod:`getopt`, including type conversion, option callbacks, and automatic help generation. There are many more features to :mod:`optparse` than can be covered here, but this section will introduce some of the more commonly used capabilities."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:19
# 12b84d377e5f42b7b02afb25e076d10b
msgid "Creating an OptionParser"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:21
# 82f41fd9c0044d4c84336a70b61f8c77
msgid "There are two phases to parsing options with :mod:`optparse`. First, the :class:`OptionParser` instance is constructed and configured with the expected options. Then a sequence of options is fed in and processed."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:31
# 897aa4a3ca9945d8aa320ef974c88fa5
msgid "Usually, once the parser has been created, each option is added to the parser explicitly, with information about what to do when the option is encountered on the command line. It is also possible to pass a list of options to the :class:`OptionParser` constructor, but that form is not used as frequently."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:38
# b9688f7f91314d4ca247ba797e47f58d
msgid "Defining Options"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:40
# 971c1e33ebb54607b5eae3c29f6cb474
msgid "Options should be added one at a time using the :func:`add_option()` method. Any un-named string arguments at the beginning of the argument list are treated as option names. To create aliases for an option (i.e., to have a short and long form of the same option), simply pass multiple names."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:47
# ba97b325cf80410895d8bd2985a67bec
msgid "Parsing a Command Line"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:49
# e8a9f866255d4bf093dbd30ce989e19d
msgid "After all of the options are defined, the command line is parsed by passing a sequence of argument strings to :func:`parse_args()`. By default, the arguments are taken from ``sys.argv[1:]``, but a list can be passed explicitly as well. The options are processed using the GNU/POSIX syntax, so option and argument values can be mixed in the sequence."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:56
# 9d2a4a06498240c0acf8ea5b5ac7b8dd
msgid "The return value from :func:`parse_args()` is a two-part tuple containing an :class:`Values` instance and the list of arguments to the command that were not interpreted as options. The default processing action for options is to store the value using the name given in the *dest* argument to :func:`add_option`.  The :class:`Values` instance returned by :func:`parse_args` holds the option values as attributes, so if an option's :data:`dest` is set to ``\"myoption\"``, the value is accessed as ``options.myoption``."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:66
# 6e4d6eefdffa4322988b65cbd6c2aa31
msgid "Short and Long-Form Options"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:68
# 474758d2557e4eaab391d2e3720d61bf
msgid "Here is a simple example with three different options: a boolean option (``-a``), a simple string option (``-b``), and an integer option (``-c``)."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:77
# 6f838d459dcd44819135ed62d28bc9d5
msgid "The options on the command line are parsed with the same rules that :func:`getopt.gnu_getopt()` uses, so there are two ways to pass values to single character options. The example above uses both forms, ``-bval`` and ``-c val``."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:94
# 3be1ec16b044402787286ab15ab515f8
msgid "Notice that the type of the value associated with ``'c'`` in the output is an integer, since the :class:`OptionParser` was told to convert the argument before storing it."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:98
# 569764ac47d94b7fa6bd499f8779869e
msgid "Unlike with :mod:`getopt`, \"long\" option names are not handled any differently by :mod:`optparse`:"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:105
# f6064aa1f01646aa889e434716711634
msgid "And the results are similar:"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:120
# 64c717d8959e45739e797e5763e08653
msgid "Comparing with getopt"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:122
# 33a4719c19ea463eb0a23cbae6e02cad
msgid "Since :mod:`optparse` is supposed to replace :mod:`getopt`, this example re-implements the same example program used in the section about :mod:`getopt`:"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:130
# e41c9b8f96d64bff871b60c5fdac1a7a
msgid "Notice how the options ``-o`` and ``--output`` are aliased by being added at the same time. Either option can be used on the command line. The short form:"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:150
# 2f7ef08f7dcb4d16b86e3bb5703b4769
msgid "or the long form:"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:169
# ad1b3b25e9a2411ca2e289c3333a8f57
msgid "Any unique prefix of the long option can also be used:"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:189
# 077ed89da80e4e23981f6d58925d97c0
msgid "Option Values"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:191
# f9feb69310f34729b3a3baf0cc5fe0c4
msgid "The default processing action is to store the argument to the option. If a type is provided, the argument value is converted to that type before it is stored."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:196
# bbb26bd02d894428a295affde0a8b85d
msgid "Setting Defaults"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:198
# 944f1120ebc84cad8cd4d36bbf6e31a1
msgid "Since options are by definition optional, applications should establish default behavior when an option is not given on the command line.  A default value for an individual option can be provided when the option is defined."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:224
# 6769478390394e72aef5d778321d9938
msgid "Defaults can also be loaded after the options are defined using keyword arguments to :func:`set_defaults`."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:231
# 870329d240484b87ae32ce0e528607ea
msgid "This form is useful when loading defaults from a configuration file or other source, instead of hard-coding them."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:251
# 30cd9005809747978910c46f6f2537b8
msgid "All defined options are available as attributes of the :class:`Values` instance returned by :func:`parse_args` so applications do not need to check for the presence of an option before trying to use its value."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:259
# f01e6cdeba2b42d6a453326675cb2d77
msgid "If no default value is given for an option, and the option is not specified on the command line, its value is ``None``."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:281
# 3005b19d83a141238aa3cc6d7bad7083
msgid "Type Conversion"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:283
# 9836f869a3da4e3a9f50326d22f9856a
msgid ":mod:`optparse` will convert option values from strings to integers, floats, longs, and complex values.  To enable the conversion, specify the *type* of the option as an argument to :func:`add_option`."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:291
# 0746c2c7dd16458c82e2ef1fb970e604
msgid "If an option's value cannot be converted to the specified type, an error is printed and the program exits."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:316
# c0da3f57738143c2bd9585cb8151b617
msgid "Custom conversions can be created by subclassing the :class:`Option` class.  See the standard library documentation for complete details."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:320
# 96e99fa800584ab5baa7c4b317f67968
msgid "Enumerations"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:322
# c4de5f0a608d48daa14b3010f4b5b50d
msgid "The :const:`choice` type provides validation using a list of candidate strings.  Set *type* to choice and provide the list of valid values using the *choices* argument to :func:`add_option`."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:330
# 062121412310400cb424e59ffb4c36f8
msgid "Invalid inputs result in an error message that shows the allowed list of values."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:359
# c179a38b0d834b318d96f73ec39c529d
msgid "Option Actions"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:361
# 0b82541e1b0146889728d52101050c7e
msgid "Unlike :mod:`getopt`, which only *parses* the options, :mod:`optparse` is a full option *processing* library. Options can trigger different actions, specified by the action argument to :func:`add_option()`. Supported actions include storing the argument (singly, or as part of a list), storing a constant value when the option is encountered (including special handling for true/false values for boolean switches), counting the number of times an option is seen, and calling a callback.  The default action is :const:`store`, and does not need to be specified explicitly."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:372
# 49f9300522c54c5db476c3b2ac98c52b
msgid "Constants"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:374
# 5e115a8aa19a483fabf2e6c494ee6452
msgid "When options represent a selection of fixed alternatives, such as operating modes of an application, creating separate explicit options makes it easier to document them.  The :const:`store_const` action is intended for this purpose."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:383
# f895815388be45d3b4442bbe04c72cb8
msgid "The :const:`store_const` action associates a constant value in the application with the option specified by the user.  Several options can be configured to store different constant values to the same *dest* name, so the application only has to check a single setting."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:407
# db1407e121024bc5801d2d23c14ae919
msgid "Boolean Flags"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:409
# 8b752987ba62406bb478b2cf5c3f3dc1
msgid "Boolean options are implemented using special actions for storing true and false constant values."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:416
# ef97839b2cf24bfba7d29c63c046354e
msgid "True and false versions of the same flag can be created by configuring their *dest* name to the same value."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:443
# 676d82d268df47e9b33b5588dbef3bae
msgid "Repeating Options"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:445
# 239babc828794bcea75a4a2f9d79e7cf
msgid "There are three ways to handle repeated options.  The default is to overwrite any existing value so that the last option specified is used.  The :const:`store` action works this way."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:449
# a9fcaf072cc147ae88663bb4ccd9f4a0
msgid "Using the :const:`append` action, it is possible to accumulate values as an option is repeated, creating a list of values.  Append mode is useful when multiple responses are allowed, and specifying them separately is easier for the user than constructing a parsable syntax."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:458
# fcae0ab8df4d4e95808c088c7506b07e
msgid "The order of the values given on the command line is preserved, in case it is important for the application."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:483
# 3255938712894a5caf06ab61ade88639
msgid "Sometimes it is enough to know how many times an option was given, and the associated value is not needed.  For example, many applications allow the user to repeat the ``-v`` option to increase the level of verbosity of their output.  The :const:`count` action increments a value each time the option appears."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:493
# 11c5ef6412814851b38b392307a7b33a
msgid "Since the ``-v`` option doesn't take an argument, it can be repeated using the syntax ``-vv`` as well as through separate individual options."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:531
# 15ff96c265fc43daada8b94dffb40c0f
msgid "Callbacks"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:533
# 14e51aaa33c04a9b80bef2dfb52dad5f
msgid "Beside saving the arguments for options directly, it is possible to define callback functions to be invoked when the option is encountered on the command line. Callbacks for options take four arguments: the :class:`Option` instance causing the callback, the option string from the command line, any argument value associated with the option, and the :class:`OptionParser` instance doing the parsing work."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:544
# 44dcbcf110e44f67aee35b5a51b17a7e
msgid "In this example, the ``--with`` option is configured to take a string argument (other types such as integers and floats are support as well)."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:569
# 04d348b11f3f4883af66d51ff7ee1c87
msgid "Callbacks can be configured to take multiple arguments using the *nargs* option."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:577
# cdc3d0b6519e4d80a4c328a9dcfa7660
msgid "In this case, the arguments are passed to the callback function as a tuple via the value argument."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:597
# 71f02edb4b0845e88fd5a4608ed6c4c6
msgid "Help Messages"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:599
# 32ef82ffacca4107872965368f556749
msgid "The :class:`OptionParser` automatically includes a help option to all option sets, so the user can pass ``--help`` on the command line to see instructions for running the program. The help message includes all of the options with an indication of whether or not they take an argument. It is also possible to pass help text to :class:`add_option()` to give a more verbose description of an option."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:611
# 10ee4a6ea1224e36a1d0de3161f6c795
msgid "The options are listed in alphabetical order, with aliases included on the same line. When the option takes an argument, the ``dest`` name is included as an argument name in the help output. The help text is printed in the right column."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:633
# f573f37ab08446e1ab735c2eee29cf31
msgid "The name ``WITH`` printed with the option ``--with`` comes from the destination variable for the option.  For cases where the internal variable name is descriptive enough to serve in the documentation, the *metavar* argument can be used to set a different name."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:642
# f4986762dc75407b8594b223f43aad98
msgid "The value is printed exactly as it is given, without any changes to capitalization or punctuation."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:664
# 07d50e54c3034362ad66a4b6c061ebfc
msgid "Organizing Options"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:666
# 91f8af9567fd4d93885acd166842038e
msgid "Many applications include sets of related options.  For example, :command:`rpm` includes separate options for each of its operating modes.  :mod:`optparse` uses *option groups* to organize options in the help output.  The option values are all still saved in a single :class:`Values` instance, so the namespace for option names is still flat."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:677
# 17025dc731e941e9b431bb22b0b99a7e
msgid "Each group has its own section title and description, and the options are displayed together."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:711
# f9ba8672e5fd4626aaa9a2a543a8dde0
msgid "Application Settings"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:713
# a40a5b9925e74a04953efd907b3a93a9
msgid "The automatic help generation facilities support configuration settings to control several aspects of the help output.  The program's *usage* string, which shows how the positional arguments are expected, can be set when the :class:`OptionParser` is created."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:722
# 55503552051a46a48383287f1f2af879
msgid "The literal value ``%prog`` is expanded to the name of the program at runtime, so it can reflect the full path to the script.  If the script is run by :command:`python`, instead of running directly, the script name is used."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:745
# f3b1cffa30c74c669f9ee4f780917032
msgid "The program name can be changed using the *prog* argument."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:751
# 7fea0faa74724efea83cee538ec2f3a2
msgid "It is generally a bad idea to hard-code the program name in this way, though, because if the program is renamed the help will not reflect the change."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:773
# b89da12fb3874cd98b8a07ea0918b739
msgid "The application version can be set using the *version* argument.  When a value is provided, :mod:`optparse` automatically adds a ``--version`` option to the parser."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:781
# 51808e0a2d5b42d2bdab7a01db94d499
msgid "When the user runs the program with the ``--version`` option, :mod:`optparse` prints the version string and then exits."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:808
# 1a4120f3585b4b638142326c99b59ab4
msgid "`optparse <http://docs.python.org/lib/module-optparse.html>`_"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:808
# e47854ba5c36449db9d525faa8098ea4
msgid "Standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:811
# 030e00fd6d054b08a5051266d0817ff6
msgid ":mod:`getopt`"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:811
# 7b4bdbfa27194157a35bee74c9d8a13c
msgid "The getopt module, replaced by optparse."
msgstr ""

#: ../../PyMOTW/optparse/index.rst:813
# 4a1024c688e84eaa8f13fd59fb3ded53
msgid ":mod:`argparse`"
msgstr ""

#: ../../PyMOTW/optparse/index.rst:814
# 1844d0b90a3046259547206f5c4ae6e3
msgid "Newer replacement for optparse."
msgstr ""

