# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/asynchat/index.rst:3
# 5beaa84cbd0c4289916c53f914977476
msgid "asynchat -- Asynchronous protocol handler"
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:8
# 4bf4d9db317c47bfbefb78a5f59ba804
msgid "Asynchronous network communication protocol handler"
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:9
# 2a52cd84a92e4676a60409f88b2888c2
msgid "1.5.2 and later"
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:11
# 4148c6fc53d148fbb6bb9dbb9fb22e45
msgid "The :mod:`asynchat` module builds on :mod:`asyncore` to make it easier to implement protocols based on passing messages back and forth between server and client. The :class:`async_chat` class is an :class:`asyncore.dispatcher` subclass that receives data and looks for a message terminator. Your subclass only needs to specify what to do when data comes in and how to respond once the terminator is found. Outgoing data is queued for transmission via FIFO objects managed by :class:`async_chat`."
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:21
# ff840810595a4a9bbeb5cc445e04389d
msgid "Message Terminators"
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:23
# 3481d2790b7f40839cbb34e2b50bc8fa
msgid "Incoming messages are broken up based on *terminators*, controlled for each instance via :func:`set_terminator()`. There are three possible configurations:"
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:27
# dfd37b131a0640c98e44f53345a8c151
msgid "If a string argument is passed to :func:`set_terminator()`, the message is considered complete when that string appears in the input data."
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:30
# 783023bcecbf4caba9a9c0bbd58227b3
msgid "If a numeric argument is passed, the message is considered complete when that many bytes have been read."
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:32
# 7aa3d2f7fb9f4796858048caf3c589be
msgid "If ``None`` is passed, message termination is not managed by :class:`async_chat`."
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:35
# 86f6524aa0534c1896ae3bafb055de1c
msgid "The :class:`EchoServer` example below uses both a simple string terminator and a message length terminator, depending on the context of the incoming data. The HTTP request handler example in the standard library documentation offers another example of how to change the terminator based on the context to differentiate between HTTP headers and the HTTP POST request body."
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:43
# 06e8e71151f24f5589c11b03bc260f4b
msgid "Server and Handler"
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:45
# 13313e0ce17545a98d912dda569990eb
msgid "To make it easier to understand how :mod:`asynchat` is different from :mod:`asyncore`, the examples here duplicate the functionality of the :class:`EchoServer` example from the :mod:`asyncore` discussion. The same pieces are needed: a server object to accept connections, handler objects to deal with communication with each client, and client objects to initiate the conversation."
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:52
# 06e0061ff8d9421baaa5d8d088ec4343
msgid "The :class:`EchoServer` needed to work with :mod:`asynchat` is essentially the same as the one created for the :mod:`asyncore` example, with fewer :mod:`logging` calls because they are less interesting this time around:"
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:61
# c84355739aba4b1a8329bccf6f3a3caa
msgid "The :class:`EchoHandler` is based on ``asynchat.async_chat`` instead of the :class:`asyncore.dispatcher` this time around. It operates at a slightly higher level of abstraction, so reading and writing are handled automatically. The buffer needs to know four things:"
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:66
# 49a7cb5beb7d4690bbba7398c1193f6b
msgid "what to do with incoming data (by overriding :func:`handle_incoming_data()`)"
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:68
# 98ed140773314f03bb2416f9ee1c75ee
msgid "how to recognize the end of an incoming message (via :func:`set_terminator()`)"
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:70
# 560694c831a6453d9c5de8fbc2e1cc93
msgid "what to do when a complete message is received (in :func:`found_terminator()`)"
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:72
# 5735d724ade94a3d9dfd9eb2ba0c0df8
msgid "what data to send (using :func:`push()`)"
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:74
# b616081c49f5451e9342d86264d992ab
msgid "The example application has two operating modes. It is either waiting for a command of the form ``ECHO length\\n``, or waiting for the data to be echoed. The mode is toggled back and forth by setting an instance variable *process_data* to the method to be invoked when the terminator is found and then changing the terminator as appropriate."
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:84
# 3ff544a3522a4c3a82cff69582bbea8b
msgid "Once the complete command is found, the handler switches to message-processing mode and waits for the complete set of text to be received. When all of the data is available, it is pushed onto the outgoing channel and set up the handler to be closed once the data is sent."
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:91
# 50faa639915747d2976adf092e9807b6
msgid "Client"
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:93
# b13a459988644227bdf3f862fc46bc32
msgid "The client works in much the same way as the handler. As with the :mod:`asyncore` implementation, the message to be sent is an argument to the client's constructor. When the socket connection is established, :func:`handle_connect()` is called so the client can send the command and message data."
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:99
# 151036b8b0594fd892d0ad17e4a3e8d5
msgid "The command is pushed directly, but a special \"producer\" class is used for the message text. The producer is polled for chunks of data to send out over the network. When the producer returns an empty string, it is assumed to be empty and writing stops."
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:104
# 42f5c46b3b8a45f083a4b2fdcc65f45f
msgid "The client expects just the message data in response, so it sets an integer terminator and collects data in a list until the entire message has been received."
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:114
# f3693572aa7940948c0bb61ba118ae2a
msgid "Putting It All Together"
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:116
# 7920d71878f34091a244cd5f92080320
msgid "The main program for this example sets up the client and server in the same :mod:`asyncore` main loop."
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:123
# d569dfa870ae4f6197a9fa752998b820
msgid "Normally you would have them in separate processes, but this makes it easier to show the combined output."
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:157
# d51d361d730549aab00a241c52b40b53
msgid "`asynchat <http://docs.python.org/library/asynchat.html>`_"
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:157
# be2050c0891746cea97743cd6b9e8591
msgid "The standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:160
# 565e7d21c9534d23aec33e2889e5950c
msgid ":mod:`asyncore`"
msgstr ""

#: ../../PyMOTW/asynchat/index.rst:160
# 499dd090a4084fae9ac46d5ba94d16b5
msgid "The asyncore module implements an lower-level asynchronous I/O event loop."
msgstr ""

