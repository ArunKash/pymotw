# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/atexit/index.rst:3
# 4a92abee58b240f5882b82c78cf17bfb
msgid "atexit -- Call functions when a program is closing down"
msgstr ""

#: ../../PyMOTW/atexit/index.rst:8
# ae8ec47b3c484b6f836709f70b39b0b3
msgid "Register function(s) to be called when a program is closing down."
msgstr ""

#: ../../PyMOTW/atexit/index.rst:9
# abe5b14b6e2543ef8e8f4a49198af38d
msgid "2.1.3 and later"
msgstr ""

#: ../../PyMOTW/atexit/index.rst:11
# 3c02967e78bb4724a906f184a4e9a61c
msgid "The atexit module provides a simple interface to register functions to be called when a program closes down normally. The sys module also provides a hook, sys.exitfunc, but only one function can be registered there. The atexit registry can be used by multiple modules and libraries simultaneously."
msgstr ""

#: ../../PyMOTW/atexit/index.rst:17
# 8933baa12741471ba5c311f4e9716dcc
msgid "Examples"
msgstr ""

#: ../../PyMOTW/atexit/index.rst:19
# 69ae67087e0044778a39317d69d1bf69
msgid "A simple example of registering a function via atexit.register() looks like:"
msgstr ""

#: ../../PyMOTW/atexit/index.rst:25
# 58fd8d3e25b04bfd9be7df1eaef8d229
msgid "Since the program doesn't do anything else, all_done() is called right away:"
msgstr ""

#: ../../PyMOTW/atexit/index.rst:41
# 3b81304423d54fe188992eb4a2695d3a
msgid "It is also possible to register more than one function, and to pass arguments. That can be useful to cleanly disconnect from databases, remove temporary files, etc. Since it is possible to pass arguments to the registered functions, we don't even need to keep a separate list of things to clean up -- we can just register a clean up function more than once."
msgstr ""

#: ../../PyMOTW/atexit/index.rst:51
# d6c9c549a03e4a538768f6b8d66991d4
msgid "Notice that order in which the exit functions are called is the reverse of the order they are registered. This allows modules to be cleaned up in the reverse order from which they are imported (and therefore register their atexit functions), which should reduce dependency conflicts."
msgstr ""

#: ../../PyMOTW/atexit/index.rst:71
# 78eb6c0f54414d4888cf8e1d875949de
msgid "When are atexit functions not called?"
msgstr ""

#: ../../PyMOTW/atexit/index.rst:73
# 2dee22c9ce024e37b88287978847ef96
msgid "The callbacks registered with atexit are not invoked if:"
msgstr ""

#: ../../PyMOTW/atexit/index.rst:75
# 4e57e465ebbc4b238f999c77f6d8f997
msgid "the program dies because of a signal"
msgstr ""

#: ../../PyMOTW/atexit/index.rst:77
# 7796a435a0994dcfadca8b28a03a9d3a
msgid "os._exit() is invoked directly"
msgstr ""

#: ../../PyMOTW/atexit/index.rst:79
# dc7b026a2fd4469ca4379780abda6510
msgid "a Python fatal error is detected (in the interpreter)"
msgstr ""

#: ../../PyMOTW/atexit/index.rst:81
# de60024d2cd94d69b8b96a0eca9ea7c1
msgid "To illustrate a program being killed via a signal, we can modify one of the examples from the :mod:`subprocess` article. There are 2 files involved, the parent and the child programs. The parent starts the child, pauses, then kills it:"
msgstr ""

#: ../../PyMOTW/atexit/index.rst:91
# e346d16835304a498969fd32daa9b8c2
msgid "The child sets up an atexit callback, to prove that it is not called."
msgstr ""

#: ../../PyMOTW/atexit/index.rst:98
# ede6444cba3a456a8131df99523f9095
msgid "When run, the output should look something like this:"
msgstr ""

#: ../../PyMOTW/atexit/index.rst:115
# 58139767ae5d425084d72293a8dff511
msgid "Note that the child does not print the message embedded in not_called()."
msgstr ""

#: ../../PyMOTW/atexit/index.rst:117
# b0968e1fe69348eb868ebbe727f97f8d
msgid "Similarly, if a program bypasses the normal exit path it can avoid having the atexit callbacks invoked."
msgstr ""

#: ../../PyMOTW/atexit/index.rst:125
# ebd42aa0ccf74821bba86abb9bcaa60a
msgid "Since we call os._exit() instead of exiting normally, the callback is not invoked."
msgstr ""

#: ../../PyMOTW/atexit/index.rst:139
# abcc3ead58bc41c0840999cb292e7ceb
msgid "If we had instead used sys.exit(), the callbacks would still have been called."
msgstr ""

#: ../../PyMOTW/atexit/index.rst:161
# ec8bf30dd04642ac88f28a882f073143
msgid "Simulating a fatal error in the Python interpreter is left as an exercise to the reader."
msgstr ""

#: ../../PyMOTW/atexit/index.rst:165
# 9b949149f3604a0aa9bdfcbe975d3ef7
msgid "Exceptions in atexit Callbacks"
msgstr ""

#: ../../PyMOTW/atexit/index.rst:167
# 09aea684ed794344aa38e2d3aba9b28a
msgid "Tracebacks for exceptions raised in atexit callbacks are printed to the console and the last exception raised is re-raised to be the final error message of the program."
msgstr ""

#: ../../PyMOTW/atexit/index.rst:175
# 49125a73a627433b94ba60471f9cffe2
msgid "Notice again that the registration order controls the execution order. If an error in one callback introduces an error in another (registered earlier, but called later), the final error message might not be the most useful error message to show the user."
msgstr ""

#: ../../PyMOTW/atexit/index.rst:213
# b861e436accf4fc6bb79a3b1db855f90
msgid "In general you will probably want to handle and quietly log all exceptions in your cleanup functions, since it is messy to have a program dump errors on exit."
msgstr ""

#: ../../PyMOTW/atexit/index.rst:219
# a6ff0ade093f4bf0b281e9fbe0e97fa8
msgid "`atexit <http://docs.python.org/library/atexit.html>`_"
msgstr ""

#: ../../PyMOTW/atexit/index.rst:220
# 59326cea19764f149b01f5ded5594b32
msgid "The standard library documentation for this module."
msgstr ""

