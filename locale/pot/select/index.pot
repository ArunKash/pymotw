# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/select/index.rst:3
# 6dd33f39eb5444a7b78460b197501063
msgid "select -- Wait for I/O Efficiently"
msgstr ""

#: ../../PyMOTW/select/index.rst:8
# fe306103daa249758df1984c07bcb87f
msgid "Wait for notification that an input or output channel is ready."
msgstr ""

#: ../../PyMOTW/select/index.rst:9
# e3e0bbd25dac4dd39cf512e7ae227e72
msgid "1.4 and later"
msgstr ""

#: ../../PyMOTW/select/index.rst:11
# b97a6be56de1420ea20070c2c33f9c40
msgid "The :mod:`select` module provides access to platform-specific I/O monitoring functions.  The most portable interface is the POSIX function :func:`select`, which is available on Unix and Windows.  The module also includes :func:`poll`, a Unix-only API, and several options that only work with specific variants of Unix."
msgstr ""

#: ../../PyMOTW/select/index.rst:18
# 7b2bc73a73834dd8b6fc5242a99b7b14
msgid "select()"
msgstr ""

#: ../../PyMOTW/select/index.rst:20
# ef7f9f5a57f8425cb6102d7abe909cdc
msgid "Python's :func:`select` function is a direct interface to the underlying operating system implementation.  It monitors sockets, open files, and pipes (anything with a :func:`fileno` method that returns a valid file descriptor) until they become readable or writable, or a communication error occurs.  :func:`select` makes it easier to monitor multiple connections at the same time, and is more efficient than writing a polling loop in Python using socket timeouts, because the monitoring happens in the operating system network layer, instead of the interpreter."
msgstr ""

#: ../../PyMOTW/select/index.rst:32
# 9aaa8ca4dd3546e2a39e0046107c3328
msgid "Using Python's file objects with :func:`select` works for Unix, but is not supported under Windows."
msgstr ""

#: ../../PyMOTW/select/index.rst:35
# 11a7cc1803b1461b8aa9843244d2b789
msgid "The echo server example from the :mod:`socket` section can be extended to watch for more than one connection at a time by using :func:`select`.  The new version starts out by creating a non-blocking TCP/IP socket and configuring it to listen on an address."
msgstr ""

#: ../../PyMOTW/select/index.rst:43
# a42e6b06506041c7ad377804f7c81f2f
msgid "The arguments to :func:`select` are three lists containing communication channels to monitor.  The first is a list of the objects to be checked for incoming data to be read, the second contains objects that will receive outgoing data when there is room in their buffer, and the third those that may have an error (usually a combination of the input and output channel objects).  The next step in the server is to set up the lists containing input sources and output destinations to be passed to :func:`select`."
msgstr ""

#: ../../PyMOTW/select/index.rst:55
# 688c1b34ebec4e4b909f344a8b196d7d
msgid "Connections are added to and removed from these lists by the server main loop.  Since this version of the server is going to wait for a socket to become writable before sending any data (instead of immediately sending the reply), each output connection needs a queue to act as a buffer for the data to be sent through it."
msgstr ""

#: ../../PyMOTW/select/index.rst:64
# ecba0215ed2244ef9af7985279b614d2
msgid "The main portion of the server program loops, calling :func:`select` to block and wait for network activity."
msgstr ""

#: ../../PyMOTW/select/index.rst:70
# 2c19a4ec394e4cdba0fb0ae1feef3610
msgid ":func:`select` returns three new lists, containing subsets of the contents of the lists passed in.  All of the sockets in the :data:`readable` list have incoming data buffered and available to be read.  All of the sockets in the :data:`writable` list have free space in their buffer and can be written to.  The sockets returned in :data:`exceptional` have had an error (the actual definition of \"exceptional condition\" depends on the platform)."
msgstr ""

#: ../../PyMOTW/select/index.rst:78
# 1728776c6fe947bd87f36c592059c603
msgid "The \"readable\" sockets represent three possible cases.  If the socket is the main \"server\" socket, the one being used to listen for connections, then the \"readable\" condition means it is ready to accept another incoming connection.  In addition to adding the new connection to the list of inputs to monitor, this section sets the client socket to not block."
msgstr ""

#: ../../PyMOTW/select/index.rst:88
# 322e9b8d49f94e5190428d35916389d2
msgid "The next case is an established connection with a client that has sent data.  The data is read with :func:`recv`, then placed on the queue so it can be sent through the socket and back to the client."
msgstr ""

#: ../../PyMOTW/select/index.rst:95
# d33965e9c80d41feb750709df0502e3a
msgid "A readable socket *without* data available is from a client that has disconnected, and the stream is ready to be closed."
msgstr ""

#: ../../PyMOTW/select/index.rst:101
# 12cd71f4532d43f9b872a7b9210c803b
msgid "There are fewer cases for the writable connections.  If there is data in the queue for a connection, the next message is sent.  Otherwise, the connection is removed from the list of output connections so that the next time through the loop :func:`select` does not indicate that the socket is ready to send data."
msgstr ""

#: ../../PyMOTW/select/index.rst:110
# 2f0196cac29f4e6db673f6468051d718
msgid "Finally, if there is an error with a socket, it is closed."
msgstr ""

#: ../../PyMOTW/select/index.rst:115
# 022135a6be874b4bac0c06fd282248a8
msgid "The example client program uses two sockets to demonstrate how the server with :func:`select` manages multiple connections at the same time.  The client starts by connecting each TCP/IP socket to the server."
msgstr ""

#: ../../PyMOTW/select/index.rst:123
# 3df9b78529b546e99ab46a43dce40962
msgid "Then it sends one pieces of the message at a time via each socket, and reads all responses available after writing new data."
msgstr ""

#: ../../PyMOTW/select/index.rst:129
# a241e233e65440bcae85376a2ec2085b
msgid "Run the server in one window and the client in another.  The output will look like this, with different port numbers."
msgstr ""

#: ../../PyMOTW/select/index.rst:189
# ccfc2de46c2543d980289b8a380b2fef
msgid "The client output shows the data being sent and received using both sockets."
msgstr ""

#: ../../PyMOTW/select/index.rst:210
# 9e002a4170dc4c61ab6bd48378c31109
msgid "Timeouts"
msgstr ""

#: ../../PyMOTW/select/index.rst:212
# 058ef122cd1c4f959eb087866842773f
msgid ":func:`select` also takes an optional fourth parameter which is the number of seconds to wait before breaking off monitoring if no channels have become active.  Using a timeout value lets a main program call :func:`select` as part of a larger processing loop, taking other actions in between checking for network input."
msgstr ""

#: ../../PyMOTW/select/index.rst:218
# 10cf54e73ce044a49c136afc10b93c99
msgid "When the timeout expires, :func:`select` returns three empty lists. Updating the server example to use a timeout requires adding the extra argument to the :func:`select` call and handling the empty lists after :func:`select` returns."
msgstr ""

#: ../../PyMOTW/select/index.rst:226
# e340a434ac51408593f78415b1923bf7
msgid "This \"slow\" version of the client program pauses after sending each message, to simulate latency or other delay in transmission."
msgstr ""

#: ../../PyMOTW/select/index.rst:232
# 5f390e046b554bdd85645b52362d0ddb
msgid "Running the new server with the slow client produces:"
msgstr ""

#: ../../PyMOTW/select/index.rst:280
# 240014e676bb44e5ac31c122cdf3f085
msgid "And the client output is:"
msgstr ""

#: ../../PyMOTW/select/index.rst:295
# 5efebb2743334362a17d91879fa1ca56
msgid "poll()"
msgstr ""

#: ../../PyMOTW/select/index.rst:297
# 10fa661c741448f2bf3a2695134e8fe3
msgid "The :func:`poll` function provides similar features to :func:`select`, but the underlying implementation is more efficient.  The trade-off is that :func:`poll` is not supported under Windows, so programs using :func:`poll` are less portable."
msgstr ""

#: ../../PyMOTW/select/index.rst:302
# 0f7a02ed2daf448aaa3f0a524596bd16
msgid "An echo server built on :func:`poll` starts with the same socket configuration code used in the other examples."
msgstr ""

#: ../../PyMOTW/select/index.rst:308
# b68ba3b986ec4e4fa735a671f8282810
msgid "The timeout value passed to :func:`poll` is represented in milliseconds, instead of seconds, so in order to pause for a full second the timeout must be set to ``1000``."
msgstr ""

#: ../../PyMOTW/select/index.rst:315
# 1b1bc32c24214d8788191146940c8a8e
msgid "Python implements :func:`poll` with a class that manages the registered data channels being monitored.  Channels are added by calling :func:`register` with flags indicating which events are interesting for that channel.  The full set of flags is:"
msgstr ""

#: ../../PyMOTW/select/index.rst:321
# 69786e47091a4da58e5799dd1f56d3b8
msgid "Event"
msgstr ""

#: ../../PyMOTW/select/index.rst:321
# 025fd6055edb41d1b5105c3b1bcd0474
msgid "Description"
msgstr ""

#: ../../PyMOTW/select/index.rst:323
# 7ebc0ccea9044382b5f6813a0fcabc67
msgid ":const:`POLLIN`"
msgstr ""

#: ../../PyMOTW/select/index.rst:323
# 7527834b0430423c95fefad3b804f0b3
msgid "Input ready"
msgstr ""

#: ../../PyMOTW/select/index.rst:324
# 8857188b0cf4411a9ebd166057e9bd57
msgid ":const:`POLLPRI`"
msgstr ""

#: ../../PyMOTW/select/index.rst:324
# 4fbb7637f5624f7a803d87f73ae545a5
msgid "Priority input ready"
msgstr ""

#: ../../PyMOTW/select/index.rst:325
# 3bbbc9921e284ad49d6d716dcef5de8d
msgid ":const:`POLLOUT`"
msgstr ""

#: ../../PyMOTW/select/index.rst:325
# eedd5b61dd694394aa1cc15a9fd6dddd
msgid "Able to receive output"
msgstr ""

#: ../../PyMOTW/select/index.rst:326
# 12d4b797936e43e4b60c4f9736a79868
msgid ":const:`POLLERR`"
msgstr ""

#: ../../PyMOTW/select/index.rst:326
# f1c795bd27d74f79b68a8eab021e12ec
msgid "Error"
msgstr ""

#: ../../PyMOTW/select/index.rst:327
# 9c337124d2cd411fad466a78322fd010
msgid ":const:`POLLHUP`"
msgstr ""

#: ../../PyMOTW/select/index.rst:327
# 7cc66caf5b4f473282936a50bbbe2b7d
msgid "Channel closed"
msgstr ""

#: ../../PyMOTW/select/index.rst:328
# 30c8608e23b849b4807bd5a92bf851ba
msgid ":const:`POLLNVAL`"
msgstr ""

#: ../../PyMOTW/select/index.rst:328
# 95c6b91b14fc418c84730992d371f6b1
msgid "Channel not open"
msgstr ""

#: ../../PyMOTW/select/index.rst:331
# 50e9a6d0e7cf4af6ba1a09f5fb1b1554
msgid "The echo server will be setting up some sockets just for reading, and others to be read from or written to.  The appropriate combinations of flags are saved to the local variables :data:`READ_ONLY` and :data:`READ_WRITE`."
msgstr ""

#: ../../PyMOTW/select/index.rst:339
# 4c4d45421eb64d6e94c0f7620063ccac
msgid "The :data:`server` socket is registered so that any incoming connections or data triggers an event."
msgstr ""

#: ../../PyMOTW/select/index.rst:345
# 3fa4e1c0b49c43cea2c5b825e9c70678
msgid "Since :func:`poll` returns a list of tuples containing the file descriptor for the socket and the event flag, a mapping from file descriptor numbers to objects is needed to retrieve the :class:`socket` to read or write from it."
msgstr ""

#: ../../PyMOTW/select/index.rst:353
# 49f614ba25484e91b8870956d69229b6
msgid "The server's loop calls :func:`poll`, then processes the \"events\" returned by looking up the socket and taking action based on the flag in the event."
msgstr ""

#: ../../PyMOTW/select/index.rst:360
# a041ca12052947a987004e7f8887f5ca
msgid "As with :func:`select`, when the main server socket is \"readable,\" that really means there is a pending connection from a client.  The new connection is registered with the :data:`READ_ONLY` flags to watch for new data to come through it."
msgstr ""

#: ../../PyMOTW/select/index.rst:368
# a33512e6e08544c781c19ab4ca3f481e
msgid "Sockets other than the server are existing clients, and :func:`recv` is used to access the data waiting to be read."
msgstr ""

#: ../../PyMOTW/select/index.rst:374
# 80f7d1fc51114dbba59f99fc593e5e19
msgid "If :func:`recv` returns any data, it is placed into the outgoing queue for the socket and the flags for that socket are changed using :func:`modify` so :func:`poll` will watch for the socket to be ready to receive data."
msgstr ""

#: ../../PyMOTW/select/index.rst:382
# a747dfac95434c2aba4fafadc03dbafc
msgid "An empty string returned by :func:`recv` means the client disconnected, so :func:`unregister` is used to tell the :class:`poll` object to ignore the socket."
msgstr ""

#: ../../PyMOTW/select/index.rst:389
# 69e5c3cce87140a7a91e8c0b483c409f
msgid "The :const:`POLLHUP` flag indicates a client that \"hung up\" the connection without closing it cleanly.  The server stops polling clients that disappear."
msgstr ""

#: ../../PyMOTW/select/index.rst:396
# 24bccf02149b42f6a0dbd1a70ed40bb0
msgid "The handling for writable sockets looks like the version used in the example for :func:`select`, except that :func:`modify` is used to change the flags for the socket in the poller, instead of removing it from the output list."
msgstr ""

#: ../../PyMOTW/select/index.rst:404
# bc5f4dc8cee14d848a4bd673750db708
msgid "And finally, any events with :const:`POLLERR` cause the server to close the socket."
msgstr ""

#: ../../PyMOTW/select/index.rst:410
# 99168519515849be9334274e087a5828
msgid "When the poll-based server is run together with ``select_echo_multiclient.py`` (the client program that uses multiple sockets), the output is:"
msgstr ""

#: ../../PyMOTW/select/index.rst:475
# 9264caeac42d41b5835e40dcf431d057
msgid "Platform-specific Options"
msgstr ""

#: ../../PyMOTW/select/index.rst:477
# ccad45649dc74640ac4900bdc5b3dee9
msgid "Less portable options provided by :mod:`select` are :class:`epoll`, the *edge polling* API supported by Linux; :class:`kqueue`, which uses BSD's *kernel queue*; and :class:`kevent`, BSD's *kernel event* interface.  Refer to the operating system library documentation for more detail about how they work."
msgstr ""

#: ../../PyMOTW/select/index.rst:486
# 5def9dd40715473b9572992869165ff1
msgid "`select <http://docs.python.org/library/select.html>`_"
msgstr ""

#: ../../PyMOTW/select/index.rst:486
# dad8f3ad0e0c4c73936a4663f3725b1d
msgid "The standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/select/index.rst:490
# 4f7d741449c44636bc3d63cd44ff3ed4
msgid "`Socket Programming HOWOTO <http://docs.python.org/howto/sockets.html>`__"
msgstr ""

#: ../../PyMOTW/select/index.rst:489
# e23ee20591574c88b311ea5b8e04108c
msgid "An instructional guide by Gordon McMillan, included in the standard library documentation."
msgstr ""

#: ../../PyMOTW/select/index.rst:493
# 7bfc3412c24442a38443c789d2f72c93
msgid ":mod:`socket`"
msgstr ""

#: ../../PyMOTW/select/index.rst:493
# ebf466e54e2b4a4289be75d70df47678
msgid "Low-level network communication."
msgstr ""

#: ../../PyMOTW/select/index.rst:496
# 7f437817101c45308bbc9837c18402d8
msgid ":mod:`SocketServer`"
msgstr ""

#: ../../PyMOTW/select/index.rst:496
# f5996c77713443b19944651e4bc2e867
msgid "Framework for creating network server applications."
msgstr ""

#: ../../PyMOTW/select/index.rst:499
# 3a700c4687c14b879beeb681c184832e
msgid ":mod:`asyncore` and :mod:`asynchat`"
msgstr ""

#: ../../PyMOTW/select/index.rst:499
# 4b26a5304b9b4569a75fbf424c6fc895
msgid "Asynchronous I/O framework."
msgstr ""

#: ../../PyMOTW/select/index.rst:503
# a669acd648eb46478185049b9b0cbff2
msgid "*Unix Network Programming, Volume 1: The Sockets Networking API, 3/E*"
msgstr ""

#: ../../PyMOTW/select/index.rst:502
# 8114ff99a1ca41f68308c2c06bf50d58
msgid "By W. Richard Stevens, Bill Fenner, and Andrew M. Rudoff. Published by Addison-Wesley Professional, 2004. ISBN-10: 0131411551"
msgstr ""

