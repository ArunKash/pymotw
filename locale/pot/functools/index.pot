# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/functools/index.rst:3
# e306c1d85b834c32a95f2b1d94c8142c
msgid "functools -- Tools for Manipulating Functions"
msgstr ""

#: ../../PyMOTW/functools/index.rst:8
# 45facb11628f4f1ca9bf2cf69d1e31eb
msgid "Functions that operate on other functions."
msgstr ""

#: ../../PyMOTW/functools/index.rst:9
# baccc7d3c5c14877bf6aa829ef87c266
msgid "2.5 and later"
msgstr ""

#: ../../PyMOTW/functools/index.rst:11
# 7fedfcefdd5c4b608585eaded49709eb
msgid "The :mod:`functools` module provides tools for working with functions and other callable objects, to adapt or extend them for new purposes without completely rewriting them."
msgstr ""

#: ../../PyMOTW/functools/index.rst:16
# 3ba22598c2cc46ceacfcd95c8ca7472b
msgid "Decorators"
msgstr ""

#: ../../PyMOTW/functools/index.rst:18
# b6072a3d81644506b16edd53b3253f4b
msgid "The primary tool supplied by the :mod:`functools` module is the class :class:`partial`, which can be used to \"wrap\" a callable object with default arguments. The resulting object is itself callable, and can be treated as though it is the original function.  It takes all of the same arguments as the original, and can be invoked with extra positional or named arguments as well."
msgstr ""

#: ../../PyMOTW/functools/index.rst:26
# a82993382a194087ad82ffa1fd809ea7
msgid "partial"
msgstr ""

#: ../../PyMOTW/functools/index.rst:28
# 5937652b1f52433190cc70bc2b1a8563
msgid "This example shows two simple :class:`partial` objects for the function :func:`myfunc`.  Notice that :func:`show_details` prints the :attr:`func`, :attr:`args`, and :attr:`keywords` attributes of the partial object."
msgstr ""

#: ../../PyMOTW/functools/index.rst:37
# 31f7fa02b4b54d2a96352455ec1f7ef7
msgid "At the end of the example, the first :class:`partial` created is invoked without passing a value for *a*, causing an exception."
msgstr ""

#: ../../PyMOTW/functools/index.rst:80
# b24438f6ffb84c05a0236617ee1f3c5c
msgid "update_wrapper"
msgstr ""

#: ../../PyMOTW/functools/index.rst:82
# 3eede45cdef149189d03db022bdfd9ab
msgid "The partial object does not have :attr:`__name__` or :attr:`__doc__` attributes by default, and without those attributes decorated functions are more difficult to debug. Using :func:`update_wrapper`, copies or adds attributes from the original function to the :class:`partial` object."
msgstr ""

#: ../../PyMOTW/functools/index.rst:92
# f27bc737e7f64aec97d2e86b2e0f5d54
msgid "The attributes added to the wrapper are defined in :const:`functools.WRAPPER_ASSIGNMENTS`, while :const:`functools.WRAPPER_UPDATES` lists values to be modified."
msgstr ""

#: ../../PyMOTW/functools/index.rst:128
# b7e9f1446c0a441296e3ee394ac5d35b
msgid "Other Callables"
msgstr ""

#: ../../PyMOTW/functools/index.rst:130
# 74a746cca339457fa14b126fc0fb8be7
msgid "Partials work with any callable object, not just standalone functions."
msgstr ""

#: ../../PyMOTW/functools/index.rst:136
# 7bdc043385194df6b9bb4b459fa09cae
msgid "This example creates partials from an instance, and methods of an instance."
msgstr ""

#: ../../PyMOTW/functools/index.rst:195
# 3c4e7432a4f947df928c2e27d064b22d
msgid "wraps"
msgstr ""

#: ../../PyMOTW/functools/index.rst:197
# f8e9f3dce88b42b1829a69a6d8904336
msgid "Updating the properties of a wrapped callable is especially useful when used in a decorator, since the transformed function ends up with properties of the original, \"bare\", function."
msgstr ""

#: ../../PyMOTW/functools/index.rst:205
# aaf482807dcf4226a75f47c2bc0c71ae
msgid ":mod:`functools` provides a decorator, :func:`wraps`, which applies :func:`update_wrapper` to the decorated function."
msgstr ""

#: ../../PyMOTW/functools/index.rst:247
# baa1c6f5dc9a41a1948b25694d4cb5ed
msgid "Comparison"
msgstr ""

#: ../../PyMOTW/functools/index.rst:249
# 859e191df0ca42598aafa087fab46ddb
msgid "Under Python 2, classes can define a :func:`__cmp__` method that returns ``-1``, ``0``, or ``1`` based on whether the object is less than, equal to, or greater than the item being compared.  Python 2.1 introduces the *rich comparison* methods API, :func:`__lt__`, :func:`__le__`, :func:`__eq__`, :func:`__ne__`, :func:`__gt__`, and :func:`__ge__`, which perform a single comparison operation and return a boolean value.  Python 3 deprecated :func:`__cmp__` in favor of these new methods, so :mod:`functools` provides tools to make it easier to write Python 2 classes that comply with the new comparison requirements in Python 3."
msgstr ""

#: ../../PyMOTW/functools/index.rst:261
# 70e0b04ab6d6468e88b63528d087ebbe
msgid "Rich Comparison"
msgstr ""

#: ../../PyMOTW/functools/index.rst:263
# 735f97bdf56a46128e5c2502f32f1bf6
msgid "The rich comparison API is designed to allow classes with complex comparisons to implement each test in the most efficient way possible. However, for classes where comparison is relatively simple, there is no point in manually creating each of the rich comparison methods. The :func:`total_ordering` class decorator takes a class that provides some of the methods, and adds the rest of them."
msgstr ""

#: ../../PyMOTW/functools/index.rst:274
# 6ecafcd85811421a895fc1295e6d6f23
msgid "The class must provide an implmentation of :func:`__eq__` and any one of the other rich comparison methods.  The decorator adds implementations of the other methods that work by using the comparisons provided."
msgstr ""

#: ../../PyMOTW/functools/index.rst:323
# 3e2bd03836ca4610a8f2ae670f6d807a
msgid "Collation Order"
msgstr ""

#: ../../PyMOTW/functools/index.rst:325
# 85906c6dd0a143f59cc66709c70bd9f6
msgid "Since old-style comparison functions are deprecated in Python 3, the :data:`cmp` argument to functions like :func:`sort` are also no longer supported.  Python 2 programs that use comparison functions can use :func:`cmp_to_key` to convert them to a function that returns a *collation key*, which is used to determine the position in the final sequence."
msgstr ""

#: ../../PyMOTW/functools/index.rst:338
# 97e2587d6b104872a49b66beb29ad620
msgid "Normally :func:`cmp_to_key` would be used directly, but in this example an extra wrapper function is introduced to print out more information as the key function is being called."
msgstr ""

#: ../../PyMOTW/functools/index.rst:342
# ced52da6a36a472dbe2774e6786d3ce4
msgid "The output shows that :func:`sorted` starts by calling :func:`get_key_wrapper` for each item in the sequence to produce a key.  The keys returned by :func:`cmp_to_key` are instances of a class defined in :mod:`functools` that implements the rich comparison API based on the return value of the provided old-style comparison function.  After all of the keys are created, the sequence is sorted by comparing the keys."
msgstr ""

#: ../../PyMOTW/functools/index.rst:380
# eef31d5f120f4a64a999ed86d398dec3
msgid "`functools <http://docs.python.org/library/functools.html>`_"
msgstr ""

#: ../../PyMOTW/functools/index.rst:380
# 9e2770185adf45559a894917b2b7faf9
msgid "The standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/functools/index.rst:382
# 5c2d3ea9f47b462ca2ee72a0bcf4332a
msgid "`Rich comparison methods <http://docs.python.org/reference/datamodel.html#object.__lt__>`__"
msgstr ""

#: ../../PyMOTW/functools/index.rst:383
# ffe025aacb7445fb87298c3a067f1312
msgid "Description of the rich comparison methods from the Python Reference Guide."
msgstr ""

