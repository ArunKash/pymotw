# SOME DESCRIPTIVE TITLE.
# Copyright (C) Doug Hellmann
# This file is distributed under the same license as the Python Module of the Week package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Module of the Week 2.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-06 02:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../PyMOTW/readline/index.rst:3
# bd1e1c51b2444f799620eb8382386dcb
msgid "readline -- Interface to the GNU readline library"
msgstr ""

#: ../../PyMOTW/readline/index.rst:8
# 4cb473cdf19649c6afecd060cc6143f2
msgid "Provides an interface to the GNU readline library for interacting with the user at a command prompt."
msgstr ""

#: ../../PyMOTW/readline/index.rst:9
# a749f4ab6a3f48139aac28aa7af60fde
msgid "1.4 and later"
msgstr ""

#: ../../PyMOTW/readline/index.rst:11
# 2a02b64a58a74b0788e92f5f8be60962
msgid "The :mod:`readline` module can be used to enhance interactive command line programs to make them easier to use.  It is primarily used to provide command line text completion, or \"tab completion\"."
msgstr ""

#: ../../PyMOTW/readline/index.rst:17
# fb1cb6295d5a422db5e2e654a823d0b2
msgid "Because :mod:`readline` interacts with the console content, printing debug messages makes it difficult to see what it happening in the sample code versus what readline is doing for free.  The examples below use the :mod:`logging` module to write debug information to a separate file.  The log output is shown with each example."
msgstr ""

#: ../../PyMOTW/readline/index.rst:26
# b970a2aab80745979f91849a82df0e7c
msgid "Configuring"
msgstr ""

#: ../../PyMOTW/readline/index.rst:28
# fd6854cbe9144cf890ce54b69b2d31f8
msgid "There are two ways to configure the underlying readline library, using a configuration file or the ``parse_and_bind()`` function. Configuration options include the keybinding to invoke completion, editing modes (vi or emacs), and many other values.  Refer to the `GNU readline library documentation <http://tiswww.case.edu/php/chet/readline/readline.html#SEC10>`_ for details."
msgstr ""

#: ../../PyMOTW/readline/index.rst:36
# 2a9bb73ea05a4a35836062e93e5b1b3d
msgid "The easiest way to enable tab-completion is through a call to ``parse_and_bind()``.  Other options can be set at the same time. This example changes the editing controls to use \"vi\" mode instead of the default of \"emacs\".  To edit the current input line, press ``ESC`` then use normal vi navigation keys such as ``j``, ``k``, ``l``, and ``h``."
msgstr ""

#: ../../PyMOTW/readline/index.rst:47
# 295ff26e06a449f8a51f2e66e2200baf
msgid "The same configuration can be stored as instructions in a file read by the library with a single call.  If ``myreadline.rc`` contains:"
msgstr ""

#: ../../PyMOTW/readline/index.rst:53
# 6be66ffaaeea4ad3a2a0810cef0b5cf7
msgid "the file can be read with ``read_init_file()``:"
msgstr ""

#: ../../PyMOTW/readline/index.rst:62
# da093a785cad43c5957c12baf4ab9680
msgid "Completing Text"
msgstr ""

#: ../../PyMOTW/readline/index.rst:64
# b714ad2ba9b84dcd9638e97c005129ea
msgid "As an example of how to build command line completion, we can look at a program that has a built-in set of possible commands and uses tab-completion when the user is entering instructions."
msgstr ""

#: ../../PyMOTW/readline/index.rst:72
# a4d35651ff7d40b3becaf10f3f88e1fc
msgid "The ``input_loop()`` function simply reads one line after another until the input value is ``\"stop\"``.  A more sophisticated program could actually parse the input line and run the command."
msgstr ""

#: ../../PyMOTW/readline/index.rst:76
# 654e325169134b568d49c961430ab4e1
msgid "The ``SimpleCompleter`` class keeps a list of \"options\" that are candidates for auto-completion.  The ``complete()`` method for an instance is designed to be registered with :mod:`readline` as the source of completions.  The arguments are a \"text\" string to complete and a \"state\" value, indicating how many times the function has been called with the same text.  The function is called repeatedly with the state incremented each time.  It should return a string if there is a candidate for that state value or ``None`` if there are no more candidates.  The implementation of ``complete()`` here looks for a set of matches when state is ``0``, and then returns all of the candidate matches one at a time on subsequent calls."
msgstr ""

#: ../../PyMOTW/readline/index.rst:88
# 87d108876c3d4adc9a2984c405d29c79
msgid "When run, the initial output looks something like this:"
msgstr ""

#: ../../PyMOTW/readline/index.rst:95
# 2af9819b0c8b4b63b12c56ac998f5e0b
msgid "If you press ``TAB`` twice, a list of options are printed."
msgstr ""

#: ../../PyMOTW/readline/index.rst:104
# b96a86b05c644145bae255674c85cd31
msgid "The log file shows that ``complete()`` was called with two separate sequences of state values."
msgstr ""

#: ../../PyMOTW/readline/index.rst:123
# 9a065f87a5964e689afc5fdc7a193adf
msgid "The first sequence is from the first TAB key-press.  The completion algorithm asks for all candidates but does not expand the empty input line.  Then on the second TAB, the list of candidates is recalculated so it can be printed for the user."
msgstr ""

#: ../../PyMOTW/readline/index.rst:128
# 8f333384e3334cd6bf050b09de71c28c
msgid "If next we type \"``l``\" and press TAB again, the screen shows:"
msgstr ""

#: ../../PyMOTW/readline/index.rst:134
# 948ee0c62c6541cfb254d2aba1c8c05a
msgid "and the log reflects the different arguments to ``complete()``:"
msgstr ""

#: ../../PyMOTW/readline/index.rst:142
# fea0e352806d41559bbc06a83798a2d8
msgid "Pressing RETURN now causes ``raw_input()`` to return the value, and the ``while`` loop cycles."
msgstr ""

#: ../../PyMOTW/readline/index.rst:150
# 69cdd57ea3644e2180619af886f27e4d
msgid "There are two possible completions for a command beginning with \"``s``\".  Typing \"``s``\", then pressing TAB finds that \"``start``\" and \"``stop``\" are candidates, but only partially completes the text on the screen by adding a \"``t``\"."
msgstr ""

#: ../../PyMOTW/readline/index.rst:155
# 1ea22d5103e44ac2820413e2af25d666
msgid "The log file shows:"
msgstr ""

#: ../../PyMOTW/readline/index.rst:164
# 18248258a9b14d19956bafad87a43800
msgid "and the screen:"
msgstr ""

#: ../../PyMOTW/readline/index.rst:173
# decc70edad0648b4aec574f762be874a
msgid "If your completer function raises an exception, it is ignored silently and :mod:`readline` assumes there are no matching completions."
msgstr ""

#: ../../PyMOTW/readline/index.rst:179
# b869095a864c4ee8bfd7577f650b95cd
msgid "Accessing the Completion Buffer"
msgstr ""

#: ../../PyMOTW/readline/index.rst:181
# 8acc9efeb2a8461195bdb7426f32ea1e
msgid "The completion algorithm above is simplistic because it only looks the text argument passed to the function, but does not use any more of readline's internal state.  It is also possible to use :mod:`readline` functions to manipulate the text of the input buffer."
msgstr ""

#: ../../PyMOTW/readline/index.rst:190
# c3fc43219fac4f1b8456aa28d298ea22
msgid "In this example, commands with sub-options are are being completed. The ``complete()`` method needs to look at the position of the completion within the input buffer to determine whether it is part of the first word or a later word.  If the target is the first word, the keys of the options dictionary are used as candidates.  If it is not the first word, then the first word is used to find candidates from the options dictionary."
msgstr ""

#: ../../PyMOTW/readline/index.rst:198
# d97ff653dd82405c86e72a37a83c37a2
msgid "There are three top-level commands, two of which have subcommands:"
msgstr ""

#: ../../PyMOTW/readline/index.rst:200
# b5b63a238bd94269b7d6081a3f46d0d8
msgid "list"
msgstr ""

#: ../../PyMOTW/readline/index.rst:202
# 92fe28156f95417fbb929c872760356f
msgid "files"
msgstr ""

#: ../../PyMOTW/readline/index.rst:203
# bed5c1aaacc34deca55962a2a105a1b6
msgid "directories"
msgstr ""

#: ../../PyMOTW/readline/index.rst:205
# 7b885104c0b5422f8f1950c971d54e9c
msgid "print"
msgstr ""

#: ../../PyMOTW/readline/index.rst:207
# 88420e988da745c2999bb88b795f5648
msgid "byname"
msgstr ""

#: ../../PyMOTW/readline/index.rst:208
# 21abb780706a480b885cd7cfc8d4c2bf
msgid "bysize"
msgstr ""

#: ../../PyMOTW/readline/index.rst:210
# 043145971e144e34a33eb7a8e2a245d0
msgid "stop"
msgstr ""

#: ../../PyMOTW/readline/index.rst:213
# 9ff0582959734fe5a1f007e734a7c526
msgid "Following the same sequence of actions as before, pressing TAB twice gives us the three top-level commands:"
msgstr ""

#: ../../PyMOTW/readline/index.rst:223
# aa829438c79b4b7185821257aa549cc4
msgid "and in the log:"
msgstr ""

#: ../../PyMOTW/readline/index.rst:246
# 101c6c290c574f89ab3dda712915f470
msgid "If the first word is ``\"list \"`` (with a space after the word), the candidates for completion are different:"
msgstr ""

#: ../../PyMOTW/readline/index.rst:254
# 4416d8df6b15417b940d8a11f4c5c63b
msgid "The log shows that the text being completed is *not* the full line, but the portion after"
msgstr ""

#: ../../PyMOTW/readline/index.rst:281
# 056110946b84448087d00a854e38e7a6
msgid "Input History"
msgstr ""

#: ../../PyMOTW/readline/index.rst:283
# 8aeb9c9bba0c41fa9fb3c09b316a992a
msgid ":mod:`readline` tracks the input history automatically.  There are two different sets of functions for working with the history.  The history for the current session can be accessed with ``get_current_history_length()`` and ``get_history_item()``.  That same history can be saved to a file to be reloaded later using ``write_history_file()`` and ``read_history_file()``.  By default the entire history is saved but the maximum length of the file can be set with ``set_history_length()``.  A length of -1 means no limit."
msgstr ""

#: ../../PyMOTW/readline/index.rst:296
# 02e9c7f8d18a43e98071ec3197913de3
msgid "The **HistoryCompleter** remembers everything you type and uses those values when completing subsequent inputs."
msgstr ""

#: ../../PyMOTW/readline/index.rst:316
# 0a46f0f410a24a90b2a4adb9a0b05f62
msgid "The log shows this output when the \"``b``\" is followed by two TABs."
msgstr ""

#: ../../PyMOTW/readline/index.rst:331
# 9b0651cf0e9b4a23bd4b748ad6f399c0
msgid "When the script is run the second time, all of the history is read from the file."
msgstr ""

#: ../../PyMOTW/readline/index.rst:341
# 99543f09658f45ca8fe4cb69becf391d
msgid "There are functions for removing individual history items and clearing the entire history, as well."
msgstr ""

#: ../../PyMOTW/readline/index.rst:346
# ecad5bbcf68f4e4db5c4d163926f97ad
msgid "Hooks"
msgstr ""

#: ../../PyMOTW/readline/index.rst:348
# ad6f419da88345f2b0e594a77108206c
msgid "There are several hooks available for triggering actions as part of the interaction sequence.  The *startup* hook is invoked immediately before printing the prompt, and the *pre-input* hook is run after the prompt, but before reading text from the user."
msgstr ""

#: ../../PyMOTW/readline/index.rst:357
# e020453c0b174219becfb6de63b7feff
msgid "Either hook is a potentially good place to use ``insert_text()`` to modify the input buffer."
msgstr ""

#: ../../PyMOTW/readline/index.rst:365
# 960c2cad38e343d589afb607969cc208
msgid "If the buffer is modified inside the pre-input hook, you need to call ``redisplay()`` to update the screen."
msgstr ""

#: ../../PyMOTW/readline/index.rst:372
# d0aab334f334493d8a56fa3963b13fc1
msgid "`readline <http://docs.python.org/library/readline.html>`_"
msgstr ""

#: ../../PyMOTW/readline/index.rst:372
# e7200159f45d45de817ca6cb858aad8a
msgid "The standard library documentation for this module."
msgstr ""

#: ../../PyMOTW/readline/index.rst:375
# 2aeb9f2a1af04325b60c09ed79dc93e8
msgid "`GNU readline <http://tiswww.case.edu/php/chet/readline/readline.html>`_"
msgstr ""

#: ../../PyMOTW/readline/index.rst:375
# 818096e0949c46d0999fc531cf3f2be4
msgid "Documentation for the GNU readline library."
msgstr ""

#: ../../PyMOTW/readline/index.rst:378
# 1ac1bd5dda4940e290e63d2a302fe15b
msgid "`readline init file format <http://tiswww.case.edu/php/chet/readline/readline.html#SEC10>`_"
msgstr ""

#: ../../PyMOTW/readline/index.rst:378
# 990022dc0ba74b4089be810c2595aab6
msgid "The initialization and configuration file format."
msgstr ""

#: ../../PyMOTW/readline/index.rst:381
# 168c2d4392b54c939c06c99748c1e91f
msgid "`effbot: The readline module <http://sandbox.effbot.org/librarybook/readline.htm>`_"
msgstr ""

#: ../../PyMOTW/readline/index.rst:381
# b55b4fe70e8b40f596fccb87bd5839e8
msgid "Effbot's guide to the readline module."
msgstr ""

#: ../../PyMOTW/readline/index.rst:385
# 115393ebb9fd4cd1905e2f145ca5b501
msgid "`pyreadline <https://launchpad.net/pyreadline>`_"
msgstr ""

#: ../../PyMOTW/readline/index.rst:384
# 4cca21b9f292478f9f658c32fda15c21
msgid "pyreadline, developed as a Python-based replacement for readline to be used in `iPython <http://ipython.scipy.org/>`_."
msgstr ""

#: ../../PyMOTW/readline/index.rst:390
# fc4cd44d74ef490394929e5dbdadb050
msgid ":mod:`cmd`"
msgstr ""

#: ../../PyMOTW/readline/index.rst:388
# a5ae3b337a424e1b9bcb38f1e3a81e63
msgid "The :mod:`cmd` module uses :mod:`readline` extensively to implement tab-completion in the command interface.  Some of the examples here were adapted from the code in :mod:`cmd`."
msgstr ""

#: ../../PyMOTW/readline/index.rst:393
# eed98f74240f473689f1be191fb1f7c7
msgid ":mod:`rlcompleter`"
msgstr ""

#: ../../PyMOTW/readline/index.rst:393
# d0c1ebe5256f474598976a3f8d653388
msgid ":mod:`rlcompleter` uses :mod:`readline` to add tab-completion to the interactive Python interpreter."
msgstr ""

